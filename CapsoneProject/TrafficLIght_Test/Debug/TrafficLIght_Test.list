
TrafficLIght_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e54  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08009fdc  08009fdc  00019fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a028  0800a028  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a028  0800a028  0001a028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a030  0800a030  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a030  0800a030  0001a030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a034  0800a034  0001a034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000998  20000090  0800a0c8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a28  0800a0c8  00020a28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc57  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003de0  00000000  00000000  0003cd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  00040af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e0  00000000  00000000  00042148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a285  00000000  00000000  00043628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb1c  00000000  00000000  0006d8ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7936  00000000  00000000  0008a3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00181cff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fb0  00000000  00000000  00181d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009fc4 	.word	0x08009fc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009fc4 	.word	0x08009fc4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <RightGreenOn>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void RightGreenOn(uint32_t red_delay, uint32_t yellow_delay, uint32_t green_delay){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
//	HAL_GPIO_WritePin(right_green_GPIO_Port, right_green_Pin,0);
//	HAL_GPIO_WritePin(left_green_GPIO_Port,left_green_Pin,0);
//	HAL_GPIO_WritePin(top_green_GPIO_Port, top_green_Pin,0);
//	HAL_GPIO_WritePin(bottom_green_GPIO_Port, bottom_green_Pin,0);

	HAL_GPIO_WritePin(right_red_GPIO_Port, right_red_Pin,0);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004de:	4854      	ldr	r0, [pc, #336]	; (8000630 <RightGreenOn+0x164>)
 80004e0:	f001 fd12 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(top_red_GPIO_Port, top_red_Pin,0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ea:	4852      	ldr	r0, [pc, #328]	; (8000634 <RightGreenOn+0x168>)
 80004ec:	f001 fd0c 	bl	8001f08 <HAL_GPIO_WritePin>

	// Toggle All yellows:
	HAL_GPIO_TogglePin(right_yellow_GPIO_Port, right_yellow_Pin);
 80004f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004f4:	484e      	ldr	r0, [pc, #312]	; (8000630 <RightGreenOn+0x164>)
 80004f6:	f001 fd1f 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(top_yellow_GPIO_Port, top_yellow_Pin);
 80004fa:	2104      	movs	r1, #4
 80004fc:	484e      	ldr	r0, [pc, #312]	; (8000638 <RightGreenOn+0x16c>)
 80004fe:	f001 fd1b 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 8000502:	68b8      	ldr	r0, [r7, #8]
 8000504:	f001 fa20 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(right_yellow_GPIO_Port, right_yellow_Pin);
 8000508:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800050c:	4848      	ldr	r0, [pc, #288]	; (8000630 <RightGreenOn+0x164>)
 800050e:	f001 fd13 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(top_yellow_GPIO_Port, top_yellow_Pin);
 8000512:	2104      	movs	r1, #4
 8000514:	4848      	ldr	r0, [pc, #288]	; (8000638 <RightGreenOn+0x16c>)
 8000516:	f001 fd0f 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 800051a:	68b8      	ldr	r0, [r7, #8]
 800051c:	f001 fa14 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(right_yellow_GPIO_Port, right_yellow_Pin);
 8000520:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000524:	4842      	ldr	r0, [pc, #264]	; (8000630 <RightGreenOn+0x164>)
 8000526:	f001 fd07 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(top_yellow_GPIO_Port, top_yellow_Pin);
 800052a:	2104      	movs	r1, #4
 800052c:	4842      	ldr	r0, [pc, #264]	; (8000638 <RightGreenOn+0x16c>)
 800052e:	f001 fd03 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 8000532:	68b8      	ldr	r0, [r7, #8]
 8000534:	f001 fa08 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(right_yellow_GPIO_Port, right_yellow_Pin);
 8000538:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800053c:	483c      	ldr	r0, [pc, #240]	; (8000630 <RightGreenOn+0x164>)
 800053e:	f001 fcfb 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(top_yellow_GPIO_Port, top_yellow_Pin);
 8000542:	2104      	movs	r1, #4
 8000544:	483c      	ldr	r0, [pc, #240]	; (8000638 <RightGreenOn+0x16c>)
 8000546:	f001 fcf7 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 800054a:	68b8      	ldr	r0, [r7, #8]
 800054c:	f001 f9fc 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(right_yellow_GPIO_Port, right_yellow_Pin);
 8000550:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000554:	4836      	ldr	r0, [pc, #216]	; (8000630 <RightGreenOn+0x164>)
 8000556:	f001 fcef 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(top_yellow_GPIO_Port, top_yellow_Pin);
 800055a:	2104      	movs	r1, #4
 800055c:	4836      	ldr	r0, [pc, #216]	; (8000638 <RightGreenOn+0x16c>)
 800055e:	f001 fceb 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 8000562:	68b8      	ldr	r0, [r7, #8]
 8000564:	f001 f9f0 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(right_yellow_GPIO_Port, right_yellow_Pin);
 8000568:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800056c:	4830      	ldr	r0, [pc, #192]	; (8000630 <RightGreenOn+0x164>)
 800056e:	f001 fce3 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(top_yellow_GPIO_Port, top_yellow_Pin);
 8000572:	2104      	movs	r1, #4
 8000574:	4830      	ldr	r0, [pc, #192]	; (8000638 <RightGreenOn+0x16c>)
 8000576:	f001 fcdf 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 800057a:	68b8      	ldr	r0, [r7, #8]
 800057c:	f001 f9e4 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(right_yellow_GPIO_Port, right_yellow_Pin);
 8000580:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000584:	482a      	ldr	r0, [pc, #168]	; (8000630 <RightGreenOn+0x164>)
 8000586:	f001 fcd7 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(top_yellow_GPIO_Port, top_yellow_Pin);
 800058a:	2104      	movs	r1, #4
 800058c:	482a      	ldr	r0, [pc, #168]	; (8000638 <RightGreenOn+0x16c>)
 800058e:	f001 fcd3 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 8000592:	68b8      	ldr	r0, [r7, #8]
 8000594:	f001 f9d8 	bl	8001948 <HAL_Delay>
	HAL_GPIO_WritePin(right_yellow_GPIO_Port, right_yellow_Pin,0);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800059e:	4824      	ldr	r0, [pc, #144]	; (8000630 <RightGreenOn+0x164>)
 80005a0:	f001 fcb2 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(left_yellow_GPIO_Port, left_yellow_Pin,0);
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005aa:	4822      	ldr	r0, [pc, #136]	; (8000634 <RightGreenOn+0x168>)
 80005ac:	f001 fcac 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bottom_yellow_GPIO_Port, bottom_yellow_Pin,0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b6:	481f      	ldr	r0, [pc, #124]	; (8000634 <RightGreenOn+0x168>)
 80005b8:	f001 fca6 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(top_yellow_GPIO_Port, top_yellow_Pin,0);
 80005bc:	2200      	movs	r2, #0
 80005be:	2104      	movs	r1, #4
 80005c0:	481d      	ldr	r0, [pc, #116]	; (8000638 <RightGreenOn+0x16c>)
 80005c2:	f001 fca1 	bl	8001f08 <HAL_GPIO_WritePin>




	//Right Green On:
	HAL_GPIO_WritePin(right_green_GPIO_Port, right_green_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2101      	movs	r1, #1
 80005ca:	481c      	ldr	r0, [pc, #112]	; (800063c <RightGreenOn+0x170>)
 80005cc:	f001 fc9c 	bl	8001f08 <HAL_GPIO_WritePin>
	// Right Red Off:
	HAL_GPIO_WritePin(right_red_GPIO_Port, right_red_Pin, 0);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d6:	4816      	ldr	r0, [pc, #88]	; (8000630 <RightGreenOn+0x164>)
 80005d8:	f001 fc96 	bl	8001f08 <HAL_GPIO_WritePin>

	// left,top, bottom Greens Off:
	HAL_GPIO_WritePin(left_green_GPIO_Port, left_green_Pin, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e2:	4814      	ldr	r0, [pc, #80]	; (8000634 <RightGreenOn+0x168>)
 80005e4:	f001 fc90 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(top_green_GPIO_Port, top_green_Pin, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2101      	movs	r1, #1
 80005ec:	4814      	ldr	r0, [pc, #80]	; (8000640 <RightGreenOn+0x174>)
 80005ee:	f001 fc8b 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bottom_green_GPIO_Port, bottom_green_Pin, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f8:	480e      	ldr	r0, [pc, #56]	; (8000634 <RightGreenOn+0x168>)
 80005fa:	f001 fc85 	bl	8001f08 <HAL_GPIO_WritePin>

	// left,top, bottom Reds On:
	HAL_GPIO_WritePin(left_red_GPIO_Port, left_red_Pin, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000604:	480b      	ldr	r0, [pc, #44]	; (8000634 <RightGreenOn+0x168>)
 8000606:	f001 fc7f 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bottom_red_GPIO_Port, bottom_red_Pin, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2102      	movs	r1, #2
 800060e:	480b      	ldr	r0, [pc, #44]	; (800063c <RightGreenOn+0x170>)
 8000610:	f001 fc7a 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(top_red_GPIO_Port, top_red_Pin, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800061a:	4806      	ldr	r0, [pc, #24]	; (8000634 <RightGreenOn+0x168>)
 800061c:	f001 fc74 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_Delay(green_delay);
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f001 f991 	bl	8001948 <HAL_Delay>
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	48000800 	.word	0x48000800
 8000634:	48001000 	.word	0x48001000
 8000638:	48000400 	.word	0x48000400
 800063c:	48001c00 	.word	0x48001c00
 8000640:	48000c00 	.word	0x48000c00

08000644 <LeftGreenOn>:

void LeftGreenOn(uint32_t red_delay, uint32_t yellow_delay, uint32_t green_delay){
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
//	HAL_GPIO_WritePin(right_green_GPIO_Port, right_green_Pin,0);
//	HAL_GPIO_WritePin(left_green_GPIO_Port,left_green_Pin,0);
//	HAL_GPIO_WritePin(top_green_GPIO_Port, top_green_Pin,0);
//	HAL_GPIO_WritePin(bottom_green_GPIO_Port, bottom_green_Pin,0);

	HAL_GPIO_WritePin(left_red_GPIO_Port, left_red_Pin,0);
 8000650:	2200      	movs	r2, #0
 8000652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000656:	4857      	ldr	r0, [pc, #348]	; (80007b4 <LeftGreenOn+0x170>)
 8000658:	f001 fc56 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bottom_red_GPIO_Port, bottom_red_Pin,0);
 800065c:	2200      	movs	r2, #0
 800065e:	2102      	movs	r1, #2
 8000660:	4855      	ldr	r0, [pc, #340]	; (80007b8 <LeftGreenOn+0x174>)
 8000662:	f001 fc51 	bl	8001f08 <HAL_GPIO_WritePin>

	// Toggle All yellows:
	HAL_GPIO_TogglePin(left_yellow_GPIO_Port, left_yellow_Pin);
 8000666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066a:	4852      	ldr	r0, [pc, #328]	; (80007b4 <LeftGreenOn+0x170>)
 800066c:	f001 fc64 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(bottom_yellow_GPIO_Port, bottom_yellow_Pin);
 8000670:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000674:	484f      	ldr	r0, [pc, #316]	; (80007b4 <LeftGreenOn+0x170>)
 8000676:	f001 fc5f 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 800067a:	68b8      	ldr	r0, [r7, #8]
 800067c:	f001 f964 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(left_yellow_GPIO_Port, left_yellow_Pin);
 8000680:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000684:	484b      	ldr	r0, [pc, #300]	; (80007b4 <LeftGreenOn+0x170>)
 8000686:	f001 fc57 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(bottom_yellow_GPIO_Port, bottom_yellow_Pin);
 800068a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800068e:	4849      	ldr	r0, [pc, #292]	; (80007b4 <LeftGreenOn+0x170>)
 8000690:	f001 fc52 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 8000694:	68b8      	ldr	r0, [r7, #8]
 8000696:	f001 f957 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(left_yellow_GPIO_Port, left_yellow_Pin);
 800069a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069e:	4845      	ldr	r0, [pc, #276]	; (80007b4 <LeftGreenOn+0x170>)
 80006a0:	f001 fc4a 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(bottom_yellow_GPIO_Port, bottom_yellow_Pin);
 80006a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a8:	4842      	ldr	r0, [pc, #264]	; (80007b4 <LeftGreenOn+0x170>)
 80006aa:	f001 fc45 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 80006ae:	68b8      	ldr	r0, [r7, #8]
 80006b0:	f001 f94a 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(left_yellow_GPIO_Port, left_yellow_Pin);
 80006b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b8:	483e      	ldr	r0, [pc, #248]	; (80007b4 <LeftGreenOn+0x170>)
 80006ba:	f001 fc3d 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(bottom_yellow_GPIO_Port, bottom_yellow_Pin);
 80006be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c2:	483c      	ldr	r0, [pc, #240]	; (80007b4 <LeftGreenOn+0x170>)
 80006c4:	f001 fc38 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 80006c8:	68b8      	ldr	r0, [r7, #8]
 80006ca:	f001 f93d 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(left_yellow_GPIO_Port, left_yellow_Pin);
 80006ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d2:	4838      	ldr	r0, [pc, #224]	; (80007b4 <LeftGreenOn+0x170>)
 80006d4:	f001 fc30 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(bottom_yellow_GPIO_Port, bottom_yellow_Pin);
 80006d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006dc:	4835      	ldr	r0, [pc, #212]	; (80007b4 <LeftGreenOn+0x170>)
 80006de:	f001 fc2b 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 80006e2:	68b8      	ldr	r0, [r7, #8]
 80006e4:	f001 f930 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(left_yellow_GPIO_Port, left_yellow_Pin);
 80006e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ec:	4831      	ldr	r0, [pc, #196]	; (80007b4 <LeftGreenOn+0x170>)
 80006ee:	f001 fc23 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(bottom_yellow_GPIO_Port, bottom_yellow_Pin);
 80006f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f6:	482f      	ldr	r0, [pc, #188]	; (80007b4 <LeftGreenOn+0x170>)
 80006f8:	f001 fc1e 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 80006fc:	68b8      	ldr	r0, [r7, #8]
 80006fe:	f001 f923 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(left_yellow_GPIO_Port, left_yellow_Pin);
 8000702:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000706:	482b      	ldr	r0, [pc, #172]	; (80007b4 <LeftGreenOn+0x170>)
 8000708:	f001 fc16 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(bottom_yellow_GPIO_Port, bottom_yellow_Pin);
 800070c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000710:	4828      	ldr	r0, [pc, #160]	; (80007b4 <LeftGreenOn+0x170>)
 8000712:	f001 fc11 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 8000716:	68b8      	ldr	r0, [r7, #8]
 8000718:	f001 f916 	bl	8001948 <HAL_Delay>
	HAL_GPIO_WritePin(right_yellow_GPIO_Port, right_yellow_Pin,0);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000722:	4826      	ldr	r0, [pc, #152]	; (80007bc <LeftGreenOn+0x178>)
 8000724:	f001 fbf0 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(left_yellow_GPIO_Port, left_yellow_Pin,0);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072e:	4821      	ldr	r0, [pc, #132]	; (80007b4 <LeftGreenOn+0x170>)
 8000730:	f001 fbea 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bottom_yellow_GPIO_Port, bottom_yellow_Pin,0);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800073a:	481e      	ldr	r0, [pc, #120]	; (80007b4 <LeftGreenOn+0x170>)
 800073c:	f001 fbe4 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(top_yellow_GPIO_Port, top_yellow_Pin,0);
 8000740:	2200      	movs	r2, #0
 8000742:	2104      	movs	r1, #4
 8000744:	481e      	ldr	r0, [pc, #120]	; (80007c0 <LeftGreenOn+0x17c>)
 8000746:	f001 fbdf 	bl	8001f08 <HAL_GPIO_WritePin>


	//Left Green On:
	HAL_GPIO_WritePin(left_green_GPIO_Port, left_green_Pin, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000750:	4818      	ldr	r0, [pc, #96]	; (80007b4 <LeftGreenOn+0x170>)
 8000752:	f001 fbd9 	bl	8001f08 <HAL_GPIO_WritePin>
	// Left Red Off:
	HAL_GPIO_WritePin(left_red_GPIO_Port, left_red_Pin, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075c:	4815      	ldr	r0, [pc, #84]	; (80007b4 <LeftGreenOn+0x170>)
 800075e:	f001 fbd3 	bl	8001f08 <HAL_GPIO_WritePin>

	// right,top, bottom Greens Off:
	HAL_GPIO_WritePin(right_green_GPIO_Port, right_green_Pin, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2101      	movs	r1, #1
 8000766:	4814      	ldr	r0, [pc, #80]	; (80007b8 <LeftGreenOn+0x174>)
 8000768:	f001 fbce 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(top_green_GPIO_Port, top_green_Pin, 0);
 800076c:	2200      	movs	r2, #0
 800076e:	2101      	movs	r1, #1
 8000770:	4814      	ldr	r0, [pc, #80]	; (80007c4 <LeftGreenOn+0x180>)
 8000772:	f001 fbc9 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bottom_green_GPIO_Port, bottom_green_Pin, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800077c:	480d      	ldr	r0, [pc, #52]	; (80007b4 <LeftGreenOn+0x170>)
 800077e:	f001 fbc3 	bl	8001f08 <HAL_GPIO_WritePin>

	// right,top, bottom Reds On:
	HAL_GPIO_WritePin(right_red_GPIO_Port, right_red_Pin, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <LeftGreenOn+0x178>)
 800078a:	f001 fbbd 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bottom_red_GPIO_Port, bottom_red_Pin, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2102      	movs	r1, #2
 8000792:	4809      	ldr	r0, [pc, #36]	; (80007b8 <LeftGreenOn+0x174>)
 8000794:	f001 fbb8 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(top_red_GPIO_Port, top_red_Pin, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <LeftGreenOn+0x170>)
 80007a0:	f001 fbb2 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_Delay(green_delay);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f001 f8cf 	bl	8001948 <HAL_Delay>
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	48001000 	.word	0x48001000
 80007b8:	48001c00 	.word	0x48001c00
 80007bc:	48000800 	.word	0x48000800
 80007c0:	48000400 	.word	0x48000400
 80007c4:	48000c00 	.word	0x48000c00

080007c8 <TopGreenOn>:

void TopGreenOn(uint32_t red_delay, uint32_t yellow_delay, uint32_t green_delay){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
//	HAL_GPIO_WritePin(right_green_GPIO_Port, right_green_Pin,0);
//	HAL_GPIO_WritePin(left_green_GPIO_Port,left_green_Pin,0);
//	HAL_GPIO_WritePin(top_green_GPIO_Port, top_green_Pin,0);
//	HAL_GPIO_WritePin(bottom_green_GPIO_Port, bottom_green_Pin,0);

	HAL_GPIO_WritePin(left_red_GPIO_Port, left_red_Pin,0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007da:	4854      	ldr	r0, [pc, #336]	; (800092c <TopGreenOn+0x164>)
 80007dc:	f001 fb94 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(top_red_GPIO_Port, top_red_Pin,0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007e6:	4851      	ldr	r0, [pc, #324]	; (800092c <TopGreenOn+0x164>)
 80007e8:	f001 fb8e 	bl	8001f08 <HAL_GPIO_WritePin>


	// Toggle All yellows:
	HAL_GPIO_TogglePin(left_yellow_GPIO_Port, left_yellow_Pin);
 80007ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f0:	484e      	ldr	r0, [pc, #312]	; (800092c <TopGreenOn+0x164>)
 80007f2:	f001 fba1 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(top_yellow_GPIO_Port, top_yellow_Pin);
 80007f6:	2104      	movs	r1, #4
 80007f8:	484d      	ldr	r0, [pc, #308]	; (8000930 <TopGreenOn+0x168>)
 80007fa:	f001 fb9d 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 80007fe:	68b8      	ldr	r0, [r7, #8]
 8000800:	f001 f8a2 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(left_yellow_GPIO_Port, left_yellow_Pin);
 8000804:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000808:	4848      	ldr	r0, [pc, #288]	; (800092c <TopGreenOn+0x164>)
 800080a:	f001 fb95 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(top_yellow_GPIO_Port, top_yellow_Pin);
 800080e:	2104      	movs	r1, #4
 8000810:	4847      	ldr	r0, [pc, #284]	; (8000930 <TopGreenOn+0x168>)
 8000812:	f001 fb91 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 8000816:	68b8      	ldr	r0, [r7, #8]
 8000818:	f001 f896 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(left_yellow_GPIO_Port, left_yellow_Pin);
 800081c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000820:	4842      	ldr	r0, [pc, #264]	; (800092c <TopGreenOn+0x164>)
 8000822:	f001 fb89 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(top_yellow_GPIO_Port, top_yellow_Pin);
 8000826:	2104      	movs	r1, #4
 8000828:	4841      	ldr	r0, [pc, #260]	; (8000930 <TopGreenOn+0x168>)
 800082a:	f001 fb85 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 800082e:	68b8      	ldr	r0, [r7, #8]
 8000830:	f001 f88a 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(left_yellow_GPIO_Port, left_yellow_Pin);
 8000834:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000838:	483c      	ldr	r0, [pc, #240]	; (800092c <TopGreenOn+0x164>)
 800083a:	f001 fb7d 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(top_yellow_GPIO_Port, top_yellow_Pin);
 800083e:	2104      	movs	r1, #4
 8000840:	483b      	ldr	r0, [pc, #236]	; (8000930 <TopGreenOn+0x168>)
 8000842:	f001 fb79 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 8000846:	68b8      	ldr	r0, [r7, #8]
 8000848:	f001 f87e 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(left_yellow_GPIO_Port, left_yellow_Pin);
 800084c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000850:	4836      	ldr	r0, [pc, #216]	; (800092c <TopGreenOn+0x164>)
 8000852:	f001 fb71 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(top_yellow_GPIO_Port, top_yellow_Pin);
 8000856:	2104      	movs	r1, #4
 8000858:	4835      	ldr	r0, [pc, #212]	; (8000930 <TopGreenOn+0x168>)
 800085a:	f001 fb6d 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 800085e:	68b8      	ldr	r0, [r7, #8]
 8000860:	f001 f872 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(left_yellow_GPIO_Port, left_yellow_Pin);
 8000864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000868:	4830      	ldr	r0, [pc, #192]	; (800092c <TopGreenOn+0x164>)
 800086a:	f001 fb65 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(top_yellow_GPIO_Port, top_yellow_Pin);
 800086e:	2104      	movs	r1, #4
 8000870:	482f      	ldr	r0, [pc, #188]	; (8000930 <TopGreenOn+0x168>)
 8000872:	f001 fb61 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 8000876:	68b8      	ldr	r0, [r7, #8]
 8000878:	f001 f866 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(left_yellow_GPIO_Port, left_yellow_Pin);
 800087c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000880:	482a      	ldr	r0, [pc, #168]	; (800092c <TopGreenOn+0x164>)
 8000882:	f001 fb59 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(top_yellow_GPIO_Port, top_yellow_Pin);
 8000886:	2104      	movs	r1, #4
 8000888:	4829      	ldr	r0, [pc, #164]	; (8000930 <TopGreenOn+0x168>)
 800088a:	f001 fb55 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 800088e:	68b8      	ldr	r0, [r7, #8]
 8000890:	f001 f85a 	bl	8001948 <HAL_Delay>
	HAL_GPIO_WritePin(right_yellow_GPIO_Port, right_yellow_Pin,0);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800089a:	4826      	ldr	r0, [pc, #152]	; (8000934 <TopGreenOn+0x16c>)
 800089c:	f001 fb34 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(left_yellow_GPIO_Port, left_yellow_Pin,0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a6:	4821      	ldr	r0, [pc, #132]	; (800092c <TopGreenOn+0x164>)
 80008a8:	f001 fb2e 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bottom_yellow_GPIO_Port, bottom_yellow_Pin,0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008b2:	481e      	ldr	r0, [pc, #120]	; (800092c <TopGreenOn+0x164>)
 80008b4:	f001 fb28 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(top_yellow_GPIO_Port, top_yellow_Pin,0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2104      	movs	r1, #4
 80008bc:	481c      	ldr	r0, [pc, #112]	; (8000930 <TopGreenOn+0x168>)
 80008be:	f001 fb23 	bl	8001f08 <HAL_GPIO_WritePin>


	//Top Green On:
	HAL_GPIO_WritePin(top_green_GPIO_Port, top_green_Pin, GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	2101      	movs	r1, #1
 80008c6:	481c      	ldr	r0, [pc, #112]	; (8000938 <TopGreenOn+0x170>)
 80008c8:	f001 fb1e 	bl	8001f08 <HAL_GPIO_WritePin>
	// Top Red Off:
	HAL_GPIO_WritePin(top_red_GPIO_Port, top_red_Pin, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008d2:	4816      	ldr	r0, [pc, #88]	; (800092c <TopGreenOn+0x164>)
 80008d4:	f001 fb18 	bl	8001f08 <HAL_GPIO_WritePin>

	// left,right, bottom Greens Off:
	HAL_GPIO_WritePin(left_green_GPIO_Port, left_green_Pin, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008de:	4813      	ldr	r0, [pc, #76]	; (800092c <TopGreenOn+0x164>)
 80008e0:	f001 fb12 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(right_green_GPIO_Port, right_green_Pin, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2101      	movs	r1, #1
 80008e8:	4814      	ldr	r0, [pc, #80]	; (800093c <TopGreenOn+0x174>)
 80008ea:	f001 fb0d 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bottom_green_GPIO_Port, bottom_green_Pin, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <TopGreenOn+0x164>)
 80008f6:	f001 fb07 	bl	8001f08 <HAL_GPIO_WritePin>

	// left,right, bottom Reds On:
	HAL_GPIO_WritePin(left_red_GPIO_Port, left_red_Pin, GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000900:	480a      	ldr	r0, [pc, #40]	; (800092c <TopGreenOn+0x164>)
 8000902:	f001 fb01 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bottom_red_GPIO_Port, bottom_red_Pin, GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	2102      	movs	r1, #2
 800090a:	480c      	ldr	r0, [pc, #48]	; (800093c <TopGreenOn+0x174>)
 800090c:	f001 fafc 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(right_red_GPIO_Port, right_red_Pin, GPIO_PIN_SET);
 8000910:	2201      	movs	r2, #1
 8000912:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000916:	4807      	ldr	r0, [pc, #28]	; (8000934 <TopGreenOn+0x16c>)
 8000918:	f001 faf6 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_Delay(green_delay);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f001 f813 	bl	8001948 <HAL_Delay>
}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	48001000 	.word	0x48001000
 8000930:	48000400 	.word	0x48000400
 8000934:	48000800 	.word	0x48000800
 8000938:	48000c00 	.word	0x48000c00
 800093c:	48001c00 	.word	0x48001c00

08000940 <BottomGreenOn>:

void BottomGreenOn(uint32_t red_delay, uint32_t yellow_delay, uint32_t green_delay){
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
//	HAL_GPIO_WritePin(right_green_GPIO_Port, right_green_Pin,0);
//	HAL_GPIO_WritePin(left_green_GPIO_Port,left_green_Pin,0);
//	HAL_GPIO_WritePin(top_green_GPIO_Port, top_green_Pin,0);
//	HAL_GPIO_WritePin(bottom_green_GPIO_Port, bottom_green_Pin,0);

	HAL_GPIO_WritePin(right_red_GPIO_Port, right_red_Pin,0);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000952:	4857      	ldr	r0, [pc, #348]	; (8000ab0 <BottomGreenOn+0x170>)
 8000954:	f001 fad8 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bottom_red_GPIO_Port, bottom_red_Pin,0);
 8000958:	2200      	movs	r2, #0
 800095a:	2102      	movs	r1, #2
 800095c:	4855      	ldr	r0, [pc, #340]	; (8000ab4 <BottomGreenOn+0x174>)
 800095e:	f001 fad3 	bl	8001f08 <HAL_GPIO_WritePin>

	// Toggle All yellows:
	HAL_GPIO_TogglePin(right_yellow_GPIO_Port, right_yellow_Pin);
 8000962:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000966:	4852      	ldr	r0, [pc, #328]	; (8000ab0 <BottomGreenOn+0x170>)
 8000968:	f001 fae6 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(bottom_yellow_GPIO_Port, bottom_yellow_Pin);
 800096c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000970:	4851      	ldr	r0, [pc, #324]	; (8000ab8 <BottomGreenOn+0x178>)
 8000972:	f001 fae1 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 8000976:	68b8      	ldr	r0, [r7, #8]
 8000978:	f000 ffe6 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(right_yellow_GPIO_Port, right_yellow_Pin);
 800097c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000980:	484b      	ldr	r0, [pc, #300]	; (8000ab0 <BottomGreenOn+0x170>)
 8000982:	f001 fad9 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(bottom_yellow_GPIO_Port, bottom_yellow_Pin);
 8000986:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800098a:	484b      	ldr	r0, [pc, #300]	; (8000ab8 <BottomGreenOn+0x178>)
 800098c:	f001 fad4 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 8000990:	68b8      	ldr	r0, [r7, #8]
 8000992:	f000 ffd9 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(right_yellow_GPIO_Port, right_yellow_Pin);
 8000996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800099a:	4845      	ldr	r0, [pc, #276]	; (8000ab0 <BottomGreenOn+0x170>)
 800099c:	f001 facc 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(bottom_yellow_GPIO_Port, bottom_yellow_Pin);
 80009a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a4:	4844      	ldr	r0, [pc, #272]	; (8000ab8 <BottomGreenOn+0x178>)
 80009a6:	f001 fac7 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 80009aa:	68b8      	ldr	r0, [r7, #8]
 80009ac:	f000 ffcc 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(right_yellow_GPIO_Port, right_yellow_Pin);
 80009b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009b4:	483e      	ldr	r0, [pc, #248]	; (8000ab0 <BottomGreenOn+0x170>)
 80009b6:	f001 fabf 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(bottom_yellow_GPIO_Port, bottom_yellow_Pin);
 80009ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009be:	483e      	ldr	r0, [pc, #248]	; (8000ab8 <BottomGreenOn+0x178>)
 80009c0:	f001 faba 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 80009c4:	68b8      	ldr	r0, [r7, #8]
 80009c6:	f000 ffbf 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(right_yellow_GPIO_Port, right_yellow_Pin);
 80009ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ce:	4838      	ldr	r0, [pc, #224]	; (8000ab0 <BottomGreenOn+0x170>)
 80009d0:	f001 fab2 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(bottom_yellow_GPIO_Port, bottom_yellow_Pin);
 80009d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d8:	4837      	ldr	r0, [pc, #220]	; (8000ab8 <BottomGreenOn+0x178>)
 80009da:	f001 faad 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 80009de:	68b8      	ldr	r0, [r7, #8]
 80009e0:	f000 ffb2 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(right_yellow_GPIO_Port, right_yellow_Pin);
 80009e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009e8:	4831      	ldr	r0, [pc, #196]	; (8000ab0 <BottomGreenOn+0x170>)
 80009ea:	f001 faa5 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(bottom_yellow_GPIO_Port, bottom_yellow_Pin);
 80009ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f2:	4831      	ldr	r0, [pc, #196]	; (8000ab8 <BottomGreenOn+0x178>)
 80009f4:	f001 faa0 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 80009f8:	68b8      	ldr	r0, [r7, #8]
 80009fa:	f000 ffa5 	bl	8001948 <HAL_Delay>
	HAL_GPIO_TogglePin(right_yellow_GPIO_Port, right_yellow_Pin);
 80009fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a02:	482b      	ldr	r0, [pc, #172]	; (8000ab0 <BottomGreenOn+0x170>)
 8000a04:	f001 fa98 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(bottom_yellow_GPIO_Port, bottom_yellow_Pin);
 8000a08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a0c:	482a      	ldr	r0, [pc, #168]	; (8000ab8 <BottomGreenOn+0x178>)
 8000a0e:	f001 fa93 	bl	8001f38 <HAL_GPIO_TogglePin>
	HAL_Delay(yellow_delay);
 8000a12:	68b8      	ldr	r0, [r7, #8]
 8000a14:	f000 ff98 	bl	8001948 <HAL_Delay>
	HAL_GPIO_WritePin(right_yellow_GPIO_Port, right_yellow_Pin,0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a1e:	4824      	ldr	r0, [pc, #144]	; (8000ab0 <BottomGreenOn+0x170>)
 8000a20:	f001 fa72 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(left_yellow_GPIO_Port, left_yellow_Pin,0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2a:	4823      	ldr	r0, [pc, #140]	; (8000ab8 <BottomGreenOn+0x178>)
 8000a2c:	f001 fa6c 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bottom_yellow_GPIO_Port, bottom_yellow_Pin,0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a36:	4820      	ldr	r0, [pc, #128]	; (8000ab8 <BottomGreenOn+0x178>)
 8000a38:	f001 fa66 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(top_yellow_GPIO_Port, top_yellow_Pin,0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2104      	movs	r1, #4
 8000a40:	481e      	ldr	r0, [pc, #120]	; (8000abc <BottomGreenOn+0x17c>)
 8000a42:	f001 fa61 	bl	8001f08 <HAL_GPIO_WritePin>


	//Bottom Green On:
	HAL_GPIO_WritePin(bottom_green_GPIO_Port, bottom_green_Pin, GPIO_PIN_SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a4c:	481a      	ldr	r0, [pc, #104]	; (8000ab8 <BottomGreenOn+0x178>)
 8000a4e:	f001 fa5b 	bl	8001f08 <HAL_GPIO_WritePin>
	// Bottom Red Off:
	HAL_GPIO_WritePin(bottom_red_GPIO_Port, bottom_red_Pin, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2102      	movs	r1, #2
 8000a56:	4817      	ldr	r0, [pc, #92]	; (8000ab4 <BottomGreenOn+0x174>)
 8000a58:	f001 fa56 	bl	8001f08 <HAL_GPIO_WritePin>

	// left,top, right Greens Off:
	HAL_GPIO_WritePin(left_green_GPIO_Port, left_green_Pin, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a62:	4815      	ldr	r0, [pc, #84]	; (8000ab8 <BottomGreenOn+0x178>)
 8000a64:	f001 fa50 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(top_green_GPIO_Port, top_green_Pin, 0);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	4814      	ldr	r0, [pc, #80]	; (8000ac0 <BottomGreenOn+0x180>)
 8000a6e:	f001 fa4b 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(right_green_GPIO_Port, right_green_Pin, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2101      	movs	r1, #1
 8000a76:	480f      	ldr	r0, [pc, #60]	; (8000ab4 <BottomGreenOn+0x174>)
 8000a78:	f001 fa46 	bl	8001f08 <HAL_GPIO_WritePin>

	// left,top, right Reds On:
	HAL_GPIO_WritePin(left_red_GPIO_Port, left_red_Pin, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a82:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <BottomGreenOn+0x178>)
 8000a84:	f001 fa40 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(right_red_GPIO_Port, right_red_Pin, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a8e:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <BottomGreenOn+0x170>)
 8000a90:	f001 fa3a 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(top_red_GPIO_Port, top_red_Pin, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a9a:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <BottomGreenOn+0x178>)
 8000a9c:	f001 fa34 	bl	8001f08 <HAL_GPIO_WritePin>
	HAL_Delay(green_delay);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f000 ff51 	bl	8001948 <HAL_Delay>
}
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	48000800 	.word	0x48000800
 8000ab4:	48001c00 	.word	0x48001c00
 8000ab8:	48001000 	.word	0x48001000
 8000abc:	48000400 	.word	0x48000400
 8000ac0:	48000c00 	.word	0x48000c00

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac8:	f000 fec2 	bl	8001850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000acc:	f000 f833 	bl	8000b36 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ad0:	f000 f885 	bl	8000bde <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad4:	f000 fa3e 	bl	8000f54 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ad8:	f000 f8ae 	bl	8000c38 <MX_I2C1_Init>
  MX_LCD_Init();
 8000adc:	f000 f8ec 	bl	8000cb8 <MX_LCD_Init>
  MX_SAI1_Init();
 8000ae0:	f000 f922 	bl	8000d28 <MX_SAI1_Init>
  MX_SPI2_Init();
 8000ae4:	f000 f9c8 	bl	8000e78 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000ae8:	f000 fa04 	bl	8000ef4 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 8000aec:	f008 fe1e 	bl	800972c <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	RightGreenOn(3000,500,3000);
 8000af0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000af4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000af8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000afc:	f7ff fce6 	bl	80004cc <RightGreenOn>
	BottomGreenOn(3000,500,3000);
 8000b00:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000b04:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b08:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b0c:	f7ff ff18 	bl	8000940 <BottomGreenOn>
	LeftGreenOn(3000,500,3000);
 8000b10:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000b14:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b18:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b1c:	f7ff fd92 	bl	8000644 <LeftGreenOn>
	TopGreenOn(3000,500,3000);
 8000b20:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000b24:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b28:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b2c:	f7ff fe4c 	bl	80007c8 <TopGreenOn>
//
//	HAL_GPIO_TogglePin(top_green_GPIO_Port, top_green_Pin);
//	HAL_Delay(500);
//	HAL_GPIO_TogglePin(top_green_GPIO_Port, top_green_Pin);
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000b30:	f008 fe22 	bl	8009778 <MX_USB_HOST_Process>
	RightGreenOn(3000,500,3000);
 8000b34:	e7dc      	b.n	8000af0 <main+0x2c>

08000b36 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b096      	sub	sp, #88	; 0x58
 8000b3a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2244      	movs	r2, #68	; 0x44
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f009 f937 	bl	8009db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b58:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b5c:	f002 ff9a 	bl	8003a94 <HAL_PWREx_ControlVoltageScaling>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b66:	f000 fb5d 	bl	8001224 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000b6a:	2318      	movs	r3, #24
 8000b6c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b72:	2301      	movs	r3, #1
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b7a:	2360      	movs	r3, #96	; 0x60
 8000b7c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b82:	2301      	movs	r3, #1
 8000b84:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b86:	2301      	movs	r3, #1
 8000b88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000b8a:	2314      	movs	r3, #20
 8000b8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b8e:	2307      	movs	r3, #7
 8000b90:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b92:	2302      	movs	r3, #2
 8000b94:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b96:	2302      	movs	r3, #2
 8000b98:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 ffde 	bl	8003b60 <HAL_RCC_OscConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000baa:	f000 fb3b 	bl	8001224 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bae:	230f      	movs	r3, #15
 8000bb0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f003 fba6 	bl	8004318 <HAL_RCC_ClockConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000bd2:	f000 fb27 	bl	8001224 <Error_Handler>
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	3758      	adds	r7, #88	; 0x58
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b0a2      	sub	sp, #136	; 0x88
 8000be2:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be4:	463b      	mov	r3, r7
 8000be6:	2288      	movs	r2, #136	; 0x88
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f009 f8e4 	bl	8009db8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB;
 8000bf0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bf4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000bfa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000c00:	2301      	movs	r3, #1
 8000c02:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000c08:	2318      	movs	r3, #24
 8000c0a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 8000c18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c1c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c1e:	463b      	mov	r3, r7
 8000c20:	4618      	mov	r0, r3
 8000c22:	f003 fd9d 	bl	8004760 <HAL_RCCEx_PeriphCLKConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8000c2c:	f000 fafa 	bl	8001224 <Error_Handler>
  }
}
 8000c30:	bf00      	nop
 8000c32:	3788      	adds	r7, #136	; 0x88
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c3e:	4a1c      	ldr	r2, [pc, #112]	; (8000cb0 <MX_I2C1_Init+0x78>)
 8000c40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c44:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <MX_I2C1_Init+0x7c>)
 8000c46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c72:	480e      	ldr	r0, [pc, #56]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c74:	f002 fcf7 	bl	8003666 <HAL_I2C_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c7e:	f000 fad1 	bl	8001224 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c82:	2100      	movs	r1, #0
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c86:	f002 fd7d 	bl	8003784 <HAL_I2CEx_ConfigAnalogFilter>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c90:	f000 fac8 	bl	8001224 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c94:	2100      	movs	r1, #0
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_I2C1_Init+0x74>)
 8000c98:	f002 fdbf 	bl	800381a <HAL_I2CEx_ConfigDigitalFilter>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ca2:	f000 fabf 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200000ac 	.word	0x200000ac
 8000cb0:	40005400 	.word	0x40005400
 8000cb4:	00404c74 	.word	0x00404c74

08000cb8 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 8000cbc:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <MX_LCD_Init+0x68>)
 8000cbe:	4a19      	ldr	r2, [pc, #100]	; (8000d24 <MX_LCD_Init+0x6c>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <MX_LCD_Init+0x68>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <MX_LCD_Init+0x68>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_LCD_Init+0x68>)
 8000cd0:	220c      	movs	r2, #12
 8000cd2:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <MX_LCD_Init+0x68>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <MX_LCD_Init+0x68>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <MX_LCD_Init+0x68>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <MX_LCD_Init+0x68>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <MX_LCD_Init+0x68>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <MX_LCD_Init+0x68>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_LCD_Init+0x68>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <MX_LCD_Init+0x68>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <MX_LCD_Init+0x68>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_LCD_Init+0x68>)
 8000d0c:	f002 fdd2 	bl	80038b4 <HAL_LCD_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_LCD_Init+0x62>
  {
    Error_Handler();
 8000d16:	f000 fa85 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000100 	.word	0x20000100
 8000d24:	40002400 	.word	0x40002400

08000d28 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000d2c:	4b4d      	ldr	r3, [pc, #308]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000d2e:	4a4e      	ldr	r2, [pc, #312]	; (8000e68 <MX_SAI1_Init+0x140>)
 8000d30:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d32:	4b4c      	ldr	r3, [pc, #304]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d38:	4b4a      	ldr	r3, [pc, #296]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000d3e:	4b49      	ldr	r3, [pc, #292]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000d40:	2240      	movs	r2, #64	; 0x40
 8000d42:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d44:	4b47      	ldr	r3, [pc, #284]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d4a:	4b46      	ldr	r3, [pc, #280]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d50:	4b44      	ldr	r3, [pc, #272]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d56:	4b43      	ldr	r3, [pc, #268]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d5c:	4b41      	ldr	r3, [pc, #260]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d62:	4b40      	ldr	r3, [pc, #256]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d68:	4b3e      	ldr	r3, [pc, #248]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000d6a:	4a40      	ldr	r2, [pc, #256]	; (8000e6c <MX_SAI1_Init+0x144>)
 8000d6c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d6e:	4b3d      	ldr	r3, [pc, #244]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d74:	4b3b      	ldr	r3, [pc, #236]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d7a:	4b3a      	ldr	r3, [pc, #232]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d80:	4b38      	ldr	r3, [pc, #224]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000d86:	4b37      	ldr	r3, [pc, #220]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000d88:	2208      	movs	r2, #8
 8000d8a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000d8c:	4b35      	ldr	r3, [pc, #212]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d92:	4b34      	ldr	r3, [pc, #208]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d98:	4b32      	ldr	r3, [pc, #200]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d9e:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000da4:	4b2f      	ldr	r3, [pc, #188]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000db0:	4b2c      	ldr	r3, [pc, #176]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000db6:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000dbc:	4829      	ldr	r0, [pc, #164]	; (8000e64 <MX_SAI1_Init+0x13c>)
 8000dbe:	f004 ffe9 	bl	8005d94 <HAL_SAI_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8000dc8:	f000 fa2c 	bl	8001224 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000dcc:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000dce:	4a29      	ldr	r2, [pc, #164]	; (8000e74 <MX_SAI1_Init+0x14c>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000dd2:	4b27      	ldr	r3, [pc, #156]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000dd8:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000dda:	2203      	movs	r2, #3
 8000ddc:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000dde:	4b24      	ldr	r3, [pc, #144]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000de0:	2240      	movs	r2, #64	; 0x40
 8000de2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000de4:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000dea:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000df6:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000e1c:	2208      	movs	r2, #8
 8000e1e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e26:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e2c:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000e44:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000e50:	4807      	ldr	r0, [pc, #28]	; (8000e70 <MX_SAI1_Init+0x148>)
 8000e52:	f004 ff9f 	bl	8005d94 <HAL_SAI_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8000e5c:	f000 f9e2 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	2000013c 	.word	0x2000013c
 8000e68:	40015404 	.word	0x40015404
 8000e6c:	0002ee00 	.word	0x0002ee00
 8000e70:	200001c0 	.word	0x200001c0
 8000e74:	40015424 	.word	0x40015424

08000e78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <MX_SPI2_Init+0x74>)
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <MX_SPI2_Init+0x78>)
 8000e80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MX_SPI2_Init+0x74>)
 8000e84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <MX_SPI2_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <MX_SPI2_Init+0x74>)
 8000e92:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e96:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_SPI2_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <MX_SPI2_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_SPI2_Init+0x74>)
 8000ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eaa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_SPI2_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_SPI2_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_SPI2_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <MX_SPI2_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_SPI2_Init+0x74>)
 8000ec6:	2207      	movs	r2, #7
 8000ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <MX_SPI2_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_SPI2_Init+0x74>)
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_SPI2_Init+0x74>)
 8000ed8:	f005 f908 	bl	80060ec <HAL_SPI_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000ee2:	f000 f99f 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000244 	.word	0x20000244
 8000ef0:	40003800 	.word	0x40003800

08000ef4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef8:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <MX_USART2_UART_Init+0x58>)
 8000efa:	4a15      	ldr	r2, [pc, #84]	; (8000f50 <MX_USART2_UART_Init+0x5c>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <MX_USART2_UART_Init+0x58>)
 8000f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_USART2_UART_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_USART2_UART_Init+0x58>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_USART2_UART_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_USART2_UART_Init+0x58>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <MX_USART2_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_USART2_UART_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <MX_USART2_UART_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_USART2_UART_Init+0x58>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_USART2_UART_Init+0x58>)
 8000f38:	f005 f97b 	bl	8006232 <HAL_UART_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f42:	f000 f96f 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200002a8 	.word	0x200002a8
 8000f50:	40004400 	.word	0x40004400

08000f54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08c      	sub	sp, #48	; 0x30
 8000f58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6a:	4ba8      	ldr	r3, [pc, #672]	; (800120c <MX_GPIO_Init+0x2b8>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	4aa7      	ldr	r2, [pc, #668]	; (800120c <MX_GPIO_Init+0x2b8>)
 8000f70:	f043 0310 	orr.w	r3, r3, #16
 8000f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f76:	4ba5      	ldr	r3, [pc, #660]	; (800120c <MX_GPIO_Init+0x2b8>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	f003 0310 	and.w	r3, r3, #16
 8000f7e:	61bb      	str	r3, [r7, #24]
 8000f80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	4ba2      	ldr	r3, [pc, #648]	; (800120c <MX_GPIO_Init+0x2b8>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	4aa1      	ldr	r2, [pc, #644]	; (800120c <MX_GPIO_Init+0x2b8>)
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8e:	4b9f      	ldr	r3, [pc, #636]	; (800120c <MX_GPIO_Init+0x2b8>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9a:	4b9c      	ldr	r3, [pc, #624]	; (800120c <MX_GPIO_Init+0x2b8>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	4a9b      	ldr	r2, [pc, #620]	; (800120c <MX_GPIO_Init+0x2b8>)
 8000fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa6:	4b99      	ldr	r3, [pc, #612]	; (800120c <MX_GPIO_Init+0x2b8>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	4b96      	ldr	r3, [pc, #600]	; (800120c <MX_GPIO_Init+0x2b8>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	4a95      	ldr	r2, [pc, #596]	; (800120c <MX_GPIO_Init+0x2b8>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbe:	4b93      	ldr	r3, [pc, #588]	; (800120c <MX_GPIO_Init+0x2b8>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fca:	4b90      	ldr	r3, [pc, #576]	; (800120c <MX_GPIO_Init+0x2b8>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	4a8f      	ldr	r2, [pc, #572]	; (800120c <MX_GPIO_Init+0x2b8>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd6:	4b8d      	ldr	r3, [pc, #564]	; (800120c <MX_GPIO_Init+0x2b8>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe2:	4b8a      	ldr	r3, [pc, #552]	; (800120c <MX_GPIO_Init+0x2b8>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a89      	ldr	r2, [pc, #548]	; (800120c <MX_GPIO_Init+0x2b8>)
 8000fe8:	f043 0308 	orr.w	r3, r3, #8
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b87      	ldr	r3, [pc, #540]	; (800120c <MX_GPIO_Init+0x2b8>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|bottom_green_Pin|bottom_yellow_Pin
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f64f 5109 	movw	r1, #64777	; 0xfd09
 8001000:	4883      	ldr	r0, [pc, #524]	; (8001210 <MX_GPIO_Init+0x2bc>)
 8001002:	f000 ff81 	bl	8001f08 <HAL_GPIO_WritePin>
                          |left_red_Pin|left_yellow_Pin|left_green_Pin|top_red_Pin
                          |XL_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, right_red_Pin|right_yellow_Pin|OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 800100c:	4881      	ldr	r0, [pc, #516]	; (8001214 <MX_GPIO_Init+0x2c0>)
 800100e:	f000 ff7b 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, right_green_Pin|bottom_red_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2103      	movs	r1, #3
 8001016:	4880      	ldr	r0, [pc, #512]	; (8001218 <MX_GPIO_Init+0x2c4>)
 8001018:	f000 ff76 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, top_yellow_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	210c      	movs	r1, #12
 8001020:	487e      	ldr	r0, [pc, #504]	; (800121c <MX_GPIO_Init+0x2c8>)
 8001022:	f000 ff71 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ped_green_Pin|ped_red_Pin|top_green_Pin|GYRO_CS_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f641 0181 	movw	r1, #6273	; 0x1881
 800102c:	487c      	ldr	r0, [pc, #496]	; (8001220 <MX_GPIO_Init+0x2cc>)
 800102e:	f000 ff6b 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001038:	4876      	ldr	r0, [pc, #472]	; (8001214 <MX_GPIO_Init+0x2c0>)
 800103a:	f000 ff65 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 800103e:	2308      	movs	r3, #8
 8001040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800104a:	2302      	movs	r3, #2
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	486e      	ldr	r0, [pc, #440]	; (8001210 <MX_GPIO_Init+0x2bc>)
 8001056:	f000 fdad 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_IRQ_OUT_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 800105a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800105e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001060:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	4868      	ldr	r0, [pc, #416]	; (8001214 <MX_GPIO_Init+0x2c0>)
 8001072:	f000 fd9f 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : right_red_Pin right_yellow_Pin OTG_FS_PowerSwitchOn_Pin OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = right_red_Pin|right_yellow_Pin|OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8001076:	f44f 434a 	mov.w	r3, #51712	; 0xca00
 800107a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107c:	2301      	movs	r3, #1
 800107e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4619      	mov	r1, r3
 800108e:	4861      	ldr	r0, [pc, #388]	; (8001214 <MX_GPIO_Init+0x2c0>)
 8001090:	f000 fd90 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : right_green_Pin bottom_red_Pin */
  GPIO_InitStruct.Pin = right_green_Pin|bottom_red_Pin;
 8001094:	2303      	movs	r3, #3
 8001096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	485b      	ldr	r0, [pc, #364]	; (8001218 <MX_GPIO_Init+0x2c4>)
 80010ac:	f000 fd82 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 MAG_INT_Pin MAG_DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 80010b0:	2307      	movs	r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	4854      	ldr	r0, [pc, #336]	; (8001214 <MX_GPIO_Init+0x2c0>)
 80010c4:	f000 fd76 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_CENTER_Pin JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin
                           JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 80010c8:	232f      	movs	r3, #47	; 0x2f
 80010ca:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010d0:	2302      	movs	r3, #2
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	4619      	mov	r1, r3
 80010da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010de:	f000 fd69 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 80010e2:	2310      	movs	r3, #16
 80010e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010e6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fa:	f000 fd5b 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : top_yellow_Pin M3V3_REG_ON_Pin */
  GPIO_InitStruct.Pin = top_yellow_Pin|M3V3_REG_ON_Pin;
 80010fe:	230c      	movs	r3, #12
 8001100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4619      	mov	r1, r3
 8001114:	4841      	ldr	r0, [pc, #260]	; (800121c <MX_GPIO_Init+0x2c8>)
 8001116:	f000 fd4d 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 800111a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800111e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001124:	2301      	movs	r3, #1
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	4837      	ldr	r0, [pc, #220]	; (8001210 <MX_GPIO_Init+0x2bc>)
 8001134:	f000 fd3e 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : bottom_green_Pin bottom_yellow_Pin left_red_Pin left_yellow_Pin
                           left_green_Pin top_red_Pin XL_CS_Pin */
  GPIO_InitStruct.Pin = bottom_green_Pin|bottom_yellow_Pin|left_red_Pin|left_yellow_Pin
 8001138:	f64f 4301 	movw	r3, #64513	; 0xfc01
 800113c:	61fb      	str	r3, [r7, #28]
                          |left_green_Pin|top_red_Pin|XL_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	2301      	movs	r3, #1
 8001140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	4619      	mov	r1, r3
 8001150:	482f      	ldr	r0, [pc, #188]	; (8001210 <MX_GPIO_Init+0x2bc>)
 8001152:	f000 fd2f 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_I2C_SLC_Pin */
  GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin;
 8001156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800115c:	2312      	movs	r3, #18
 800115e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001160:	2301      	movs	r3, #1
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001168:	2304      	movs	r3, #4
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_I2C_SLC_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	482a      	ldr	r0, [pc, #168]	; (800121c <MX_GPIO_Init+0x2c8>)
 8001174:	f000 fd1e 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ped_green_Pin ped_red_Pin top_green_Pin */
  GPIO_InitStruct.Pin = ped_green_Pin|ped_red_Pin|top_green_Pin;
 8001178:	f641 0301 	movw	r3, #6145	; 0x1801
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117e:	2301      	movs	r3, #1
 8001180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	4619      	mov	r1, r3
 8001190:	4823      	ldr	r0, [pc, #140]	; (8001220 <MX_GPIO_Init+0x2cc>)
 8001192:	f000 fd0f 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT1_Pin */
  GPIO_InitStruct.Pin = GYRO_INT1_Pin;
 8001196:	2304      	movs	r3, #4
 8001198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800119a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800119e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT1_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	481d      	ldr	r0, [pc, #116]	; (8001220 <MX_GPIO_Init+0x2cc>)
 80011ac:	f000 fd02 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 80011b0:	2380      	movs	r3, #128	; 0x80
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4619      	mov	r1, r3
 80011c6:	4816      	ldr	r0, [pc, #88]	; (8001220 <MX_GPIO_Init+0x2cc>)
 80011c8:	f000 fcf4 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT2_Pin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 80011cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011d2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80011d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	480e      	ldr	r0, [pc, #56]	; (800121c <MX_GPIO_Init+0x2c8>)
 80011e4:	f000 fce6 	bl	8001bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_INT_Pin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011ec:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80011f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <MX_GPIO_Init+0x2bc>)
 80011fe:	f000 fcd9 	bl	8001bb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001202:	bf00      	nop
 8001204:	3730      	adds	r7, #48	; 0x30
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	48001000 	.word	0x48001000
 8001214:	48000800 	.word	0x48000800
 8001218:	48001c00 	.word	0x48001c00
 800121c:	48000400 	.word	0x48000400
 8001220:	48000c00 	.word	0x48000c00

08001224 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001228:	b672      	cpsid	i
}
 800122a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800122c:	e7fe      	b.n	800122c <Error_Handler+0x8>
	...

08001230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <HAL_MspInit+0x44>)
 8001238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123a:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <HAL_MspInit+0x44>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6613      	str	r3, [r2, #96]	; 0x60
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_MspInit+0x44>)
 8001244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_MspInit+0x44>)
 8001250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001252:	4a08      	ldr	r2, [pc, #32]	; (8001274 <HAL_MspInit+0x44>)
 8001254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001258:	6593      	str	r3, [r2, #88]	; 0x58
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_MspInit+0x44>)
 800125c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000

08001278 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b0ac      	sub	sp, #176	; 0xb0
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2288      	movs	r2, #136	; 0x88
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f008 fd8d 	bl	8009db8 <memset>
  if(hi2c->Instance==I2C1)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a21      	ldr	r2, [pc, #132]	; (8001328 <HAL_I2C_MspInit+0xb0>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d13a      	bne.n	800131e <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012a8:	2340      	movs	r3, #64	; 0x40
 80012aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4618      	mov	r0, r3
 80012b6:	f003 fa53 	bl	8004760 <HAL_RCCEx_PeriphCLKConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012c0:	f7ff ffb0 	bl	8001224 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_I2C_MspInit+0xb4>)
 80012c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c8:	4a18      	ldr	r2, [pc, #96]	; (800132c <HAL_I2C_MspInit+0xb4>)
 80012ca:	f043 0302 	orr.w	r3, r3, #2
 80012ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <HAL_I2C_MspInit+0xb4>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80012dc:	23c0      	movs	r3, #192	; 0xc0
 80012de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e2:	2312      	movs	r3, #18
 80012e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	2303      	movs	r3, #3
 80012f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f4:	2304      	movs	r3, #4
 80012f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012fe:	4619      	mov	r1, r3
 8001300:	480b      	ldr	r0, [pc, #44]	; (8001330 <HAL_I2C_MspInit+0xb8>)
 8001302:	f000 fc57 	bl	8001bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_I2C_MspInit+0xb4>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_I2C_MspInit+0xb4>)
 800130c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001310:	6593      	str	r3, [r2, #88]	; 0x58
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_I2C_MspInit+0xb4>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800131e:	bf00      	nop
 8001320:	37b0      	adds	r7, #176	; 0xb0
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40005400 	.word	0x40005400
 800132c:	40021000 	.word	0x40021000
 8001330:	48000400 	.word	0x48000400

08001334 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b0ae      	sub	sp, #184	; 0xb8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	2288      	movs	r2, #136	; 0x88
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f008 fd2f 	bl	8009db8 <memset>
  if(hlcd->Instance==LCD)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a57      	ldr	r2, [pc, #348]	; (80014bc <HAL_LCD_MspInit+0x188>)
 8001360:	4293      	cmp	r3, r2
 8001362:	f040 80a6 	bne.w	80014b2 <HAL_LCD_MspInit+0x17e>

  /* USER CODE END LCD_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001366:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800136a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800136c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001370:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4618      	mov	r0, r3
 800137a:	f003 f9f1 	bl	8004760 <HAL_RCCEx_PeriphCLKConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_LCD_MspInit+0x54>
    {
      Error_Handler();
 8001384:	f7ff ff4e 	bl	8001224 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8001388:	4b4d      	ldr	r3, [pc, #308]	; (80014c0 <HAL_LCD_MspInit+0x18c>)
 800138a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138c:	4a4c      	ldr	r2, [pc, #304]	; (80014c0 <HAL_LCD_MspInit+0x18c>)
 800138e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001392:	6593      	str	r3, [r2, #88]	; 0x58
 8001394:	4b4a      	ldr	r3, [pc, #296]	; (80014c0 <HAL_LCD_MspInit+0x18c>)
 8001396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800139c:	61bb      	str	r3, [r7, #24]
 800139e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a0:	4b47      	ldr	r3, [pc, #284]	; (80014c0 <HAL_LCD_MspInit+0x18c>)
 80013a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a4:	4a46      	ldr	r2, [pc, #280]	; (80014c0 <HAL_LCD_MspInit+0x18c>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ac:	4b44      	ldr	r3, [pc, #272]	; (80014c0 <HAL_LCD_MspInit+0x18c>)
 80013ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b8:	4b41      	ldr	r3, [pc, #260]	; (80014c0 <HAL_LCD_MspInit+0x18c>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	4a40      	ldr	r2, [pc, #256]	; (80014c0 <HAL_LCD_MspInit+0x18c>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c4:	4b3e      	ldr	r3, [pc, #248]	; (80014c0 <HAL_LCD_MspInit+0x18c>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d0:	4b3b      	ldr	r3, [pc, #236]	; (80014c0 <HAL_LCD_MspInit+0x18c>)
 80013d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d4:	4a3a      	ldr	r2, [pc, #232]	; (80014c0 <HAL_LCD_MspInit+0x18c>)
 80013d6:	f043 0302 	orr.w	r3, r3, #2
 80013da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013dc:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <HAL_LCD_MspInit+0x18c>)
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e8:	4b35      	ldr	r3, [pc, #212]	; (80014c0 <HAL_LCD_MspInit+0x18c>)
 80013ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ec:	4a34      	ldr	r2, [pc, #208]	; (80014c0 <HAL_LCD_MspInit+0x18c>)
 80013ee:	f043 0308 	orr.w	r3, r3, #8
 80013f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f4:	4b32      	ldr	r3, [pc, #200]	; (80014c0 <HAL_LCD_MspInit+0x18c>)
 80013f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 8001400:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001404:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800141a:	230b      	movs	r3, #11
 800141c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001420:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001424:	4619      	mov	r1, r3
 8001426:	4827      	ldr	r0, [pc, #156]	; (80014c4 <HAL_LCD_MspInit+0x190>)
 8001428:	f000 fbc4 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 800142c:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8001430:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001446:	230b      	movs	r3, #11
 8001448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001450:	4619      	mov	r1, r3
 8001452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001456:	f000 fbad 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 800145a:	f24f 2333 	movw	r3, #62003	; 0xf233
 800145e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001474:	230b      	movs	r3, #11
 8001476:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800147e:	4619      	mov	r1, r3
 8001480:	4811      	ldr	r0, [pc, #68]	; (80014c8 <HAL_LCD_MspInit+0x194>)
 8001482:	f000 fb97 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG7_Pin|SEG15_Pin
 8001486:	f44f 4363 	mov.w	r3, #58112	; 0xe300
 800148a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80014a0:	230b      	movs	r3, #11
 80014a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014aa:	4619      	mov	r1, r3
 80014ac:	4807      	ldr	r0, [pc, #28]	; (80014cc <HAL_LCD_MspInit+0x198>)
 80014ae:	f000 fb81 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 80014b2:	bf00      	nop
 80014b4:	37b8      	adds	r7, #184	; 0xb8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40002400 	.word	0x40002400
 80014c0:	40021000 	.word	0x40021000
 80014c4:	48000800 	.word	0x48000800
 80014c8:	48000400 	.word	0x48000400
 80014cc:	48000c00 	.word	0x48000c00

080014d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a17      	ldr	r2, [pc, #92]	; (800154c <HAL_SPI_MspInit+0x7c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d127      	bne.n	8001542 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <HAL_SPI_MspInit+0x80>)
 80014f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f6:	4a16      	ldr	r2, [pc, #88]	; (8001550 <HAL_SPI_MspInit+0x80>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	6593      	str	r3, [r2, #88]	; 0x58
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_SPI_MspInit+0x80>)
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_SPI_MspInit+0x80>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	4a10      	ldr	r2, [pc, #64]	; (8001550 <HAL_SPI_MspInit+0x80>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_SPI_MspInit+0x80>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8001522:	231a      	movs	r3, #26
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001532:	2305      	movs	r3, #5
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <HAL_SPI_MspInit+0x84>)
 800153e:	f000 fb39 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001542:	bf00      	nop
 8001544:	3728      	adds	r7, #40	; 0x28
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40003800 	.word	0x40003800
 8001550:	40021000 	.word	0x40021000
 8001554:	48000c00 	.word	0x48000c00

08001558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b0ac      	sub	sp, #176	; 0xb0
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2288      	movs	r2, #136	; 0x88
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f008 fc1d 	bl	8009db8 <memset>
  if(huart->Instance==USART2)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a21      	ldr	r2, [pc, #132]	; (8001608 <HAL_UART_MspInit+0xb0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d13a      	bne.n	80015fe <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001588:	2302      	movs	r3, #2
 800158a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800158c:	2300      	movs	r3, #0
 800158e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4618      	mov	r0, r3
 8001596:	f003 f8e3 	bl	8004760 <HAL_RCCEx_PeriphCLKConfig>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015a0:	f7ff fe40 	bl	8001224 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_UART_MspInit+0xb4>)
 80015a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a8:	4a18      	ldr	r2, [pc, #96]	; (800160c <HAL_UART_MspInit+0xb4>)
 80015aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ae:	6593      	str	r3, [r2, #88]	; 0x58
 80015b0:	4b16      	ldr	r3, [pc, #88]	; (800160c <HAL_UART_MspInit+0xb4>)
 80015b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <HAL_UART_MspInit+0xb4>)
 80015be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c0:	4a12      	ldr	r2, [pc, #72]	; (800160c <HAL_UART_MspInit+0xb4>)
 80015c2:	f043 0308 	orr.w	r3, r3, #8
 80015c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c8:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_UART_MspInit+0xb4>)
 80015ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015d4:	2360      	movs	r3, #96	; 0x60
 80015d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ec:	2307      	movs	r3, #7
 80015ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	; (8001610 <HAL_UART_MspInit+0xb8>)
 80015fa:	f000 fadb 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015fe:	bf00      	nop
 8001600:	37b0      	adds	r7, #176	; 0xb0
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40004400 	.word	0x40004400
 800160c:	40021000 	.word	0x40021000
 8001610:	48000c00 	.word	0x48000c00

08001614 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a33      	ldr	r2, [pc, #204]	; (80016f0 <HAL_SAI_MspInit+0xdc>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d135      	bne.n	8001692 <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001626:	4b33      	ldr	r3, [pc, #204]	; (80016f4 <HAL_SAI_MspInit+0xe0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10b      	bne.n	8001646 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800162e:	4b32      	ldr	r3, [pc, #200]	; (80016f8 <HAL_SAI_MspInit+0xe4>)
 8001630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001632:	4a31      	ldr	r2, [pc, #196]	; (80016f8 <HAL_SAI_MspInit+0xe4>)
 8001634:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001638:	6613      	str	r3, [r2, #96]	; 0x60
 800163a:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <HAL_SAI_MspInit+0xe4>)
 800163c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001646:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_SAI_MspInit+0xe0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	4a29      	ldr	r2, [pc, #164]	; (80016f4 <HAL_SAI_MspInit+0xe0>)
 800164e:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 8001650:	2374      	movs	r3, #116	; 0x74
 8001652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001660:	230d      	movs	r3, #13
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	4824      	ldr	r0, [pc, #144]	; (80016fc <HAL_SAI_MspInit+0xe8>)
 800166c:	f000 faa2 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8001670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001682:	230d      	movs	r3, #13
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	481b      	ldr	r0, [pc, #108]	; (80016fc <HAL_SAI_MspInit+0xe8>)
 800168e:	f000 fa91 	bl	8001bb4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a1a      	ldr	r2, [pc, #104]	; (8001700 <HAL_SAI_MspInit+0xec>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d124      	bne.n	80016e6 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_SAI_MspInit+0xe0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10b      	bne.n	80016bc <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <HAL_SAI_MspInit+0xe4>)
 80016a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a8:	4a13      	ldr	r2, [pc, #76]	; (80016f8 <HAL_SAI_MspInit+0xe4>)
 80016aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ae:	6613      	str	r3, [r2, #96]	; 0x60
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_SAI_MspInit+0xe4>)
 80016b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <HAL_SAI_MspInit+0xe0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <HAL_SAI_MspInit+0xe0>)
 80016c4:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE7     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80016d6:	230d      	movs	r3, #13
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	4806      	ldr	r0, [pc, #24]	; (80016fc <HAL_SAI_MspInit+0xe8>)
 80016e2:	f000 fa67 	bl	8001bb4 <HAL_GPIO_Init>

    }
}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	; 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40015404 	.word	0x40015404
 80016f4:	2000032c 	.word	0x2000032c
 80016f8:	40021000 	.word	0x40021000
 80016fc:	48001000 	.word	0x48001000
 8001700:	40015424 	.word	0x40015424

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <NMI_Handler+0x4>

0800170a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <HardFault_Handler+0x4>

08001710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <MemManage_Handler+0x4>

08001716 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <BusFault_Handler+0x4>

0800171c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <UsageFault_Handler+0x4>

08001722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001750:	f000 f8da 	bl	8001908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}

08001758 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <OTG_FS_IRQHandler+0x10>)
 800175e:	f000 fe6b 	bl	8002438 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000714 	.word	0x20000714

0800176c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001774:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <_sbrk+0x5c>)
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <_sbrk+0x60>)
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d102      	bne.n	800178e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <_sbrk+0x64>)
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <_sbrk+0x68>)
 800178c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	429a      	cmp	r2, r3
 800179a:	d207      	bcs.n	80017ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800179c:	f008 fad2 	bl	8009d44 <__errno>
 80017a0:	4603      	mov	r3, r0
 80017a2:	220c      	movs	r2, #12
 80017a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
 80017aa:	e009      	b.n	80017c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <_sbrk+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <_sbrk+0x64>)
 80017bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20018000 	.word	0x20018000
 80017cc:	00000400 	.word	0x00000400
 80017d0:	20000330 	.word	0x20000330
 80017d4:	20000a28 	.word	0x20000a28

080017d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <SystemInit+0x20>)
 80017de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <SystemInit+0x20>)
 80017e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001834 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001800:	f7ff ffea 	bl	80017d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001804:	480c      	ldr	r0, [pc, #48]	; (8001838 <LoopForever+0x6>)
  ldr r1, =_edata
 8001806:	490d      	ldr	r1, [pc, #52]	; (800183c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001808:	4a0d      	ldr	r2, [pc, #52]	; (8001840 <LoopForever+0xe>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800180c:	e002      	b.n	8001814 <LoopCopyDataInit>

0800180e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001812:	3304      	adds	r3, #4

08001814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001818:	d3f9      	bcc.n	800180e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <LoopForever+0x12>)
  ldr r4, =_ebss
 800181c:	4c0a      	ldr	r4, [pc, #40]	; (8001848 <LoopForever+0x16>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001820:	e001      	b.n	8001826 <LoopFillZerobss>

08001822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001824:	3204      	adds	r2, #4

08001826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001828:	d3fb      	bcc.n	8001822 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800182a:	f008 fa91 	bl	8009d50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800182e:	f7ff f949 	bl	8000ac4 <main>

08001832 <LoopForever>:

LoopForever:
    b LoopForever
 8001832:	e7fe      	b.n	8001832 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001834:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800183c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001840:	0800a038 	.word	0x0800a038
  ldr r2, =_sbss
 8001844:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001848:	20000a28 	.word	0x20000a28

0800184c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800184c:	e7fe      	b.n	800184c <ADC1_2_IRQHandler>
	...

08001850 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <HAL_Init+0x3c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a0b      	ldr	r2, [pc, #44]	; (800188c <HAL_Init+0x3c>)
 8001860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001864:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001866:	2003      	movs	r0, #3
 8001868:	f000 f962 	bl	8001b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800186c:	2000      	movs	r0, #0
 800186e:	f000 f80f 	bl	8001890 <HAL_InitTick>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	71fb      	strb	r3, [r7, #7]
 800187c:	e001      	b.n	8001882 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800187e:	f7ff fcd7 	bl	8001230 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001882:	79fb      	ldrb	r3, [r7, #7]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40022000 	.word	0x40022000

08001890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800189c:	4b17      	ldr	r3, [pc, #92]	; (80018fc <HAL_InitTick+0x6c>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d023      	beq.n	80018ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018a4:	4b16      	ldr	r3, [pc, #88]	; (8001900 <HAL_InitTick+0x70>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <HAL_InitTick+0x6c>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 f96d 	bl	8001b9a <HAL_SYSTICK_Config>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10f      	bne.n	80018e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b0f      	cmp	r3, #15
 80018ca:	d809      	bhi.n	80018e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018cc:	2200      	movs	r2, #0
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f000 f937 	bl	8001b46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018d8:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <HAL_InitTick+0x74>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e007      	b.n	80018f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	73fb      	strb	r3, [r7, #15]
 80018e4:	e004      	b.n	80018f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	73fb      	strb	r3, [r7, #15]
 80018ea:	e001      	b.n	80018f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000008 	.word	0x20000008
 8001900:	20000000 	.word	0x20000000
 8001904:	20000004 	.word	0x20000004

08001908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x20>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x24>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_IncTick+0x24>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000008 	.word	0x20000008
 800192c:	20000334 	.word	0x20000334

08001930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_GetTick+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000334 	.word	0x20000334

08001948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff ffee 	bl	8001930 <HAL_GetTick>
 8001954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001960:	d005      	beq.n	800196e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_Delay+0x44>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800196e:	bf00      	nop
 8001970:	f7ff ffde 	bl	8001930 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	429a      	cmp	r2, r3
 800197e:	d8f7      	bhi.n	8001970 <HAL_Delay+0x28>
  {
  }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000008 	.word	0x20000008

08001990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <__NVIC_GetPriorityGrouping+0x18>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 0307 	and.w	r3, r3, #7
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db0b      	blt.n	8001a1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	f003 021f 	and.w	r2, r3, #31
 8001a0c:	4907      	ldr	r1, [pc, #28]	; (8001a2c <__NVIC_EnableIRQ+0x38>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2001      	movs	r0, #1
 8001a16:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000e100 	.word	0xe000e100

08001a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db0a      	blt.n	8001a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	490c      	ldr	r1, [pc, #48]	; (8001a7c <__NVIC_SetPriority+0x4c>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	0112      	lsls	r2, r2, #4
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	440b      	add	r3, r1
 8001a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a58:	e00a      	b.n	8001a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4908      	ldr	r1, [pc, #32]	; (8001a80 <__NVIC_SetPriority+0x50>)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	3b04      	subs	r3, #4
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	761a      	strb	r2, [r3, #24]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000e100 	.word	0xe000e100
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f1c3 0307 	rsb	r3, r3, #7
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	bf28      	it	cs
 8001aa2:	2304      	movcs	r3, #4
 8001aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d902      	bls.n	8001ab4 <NVIC_EncodePriority+0x30>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3b03      	subs	r3, #3
 8001ab2:	e000      	b.n	8001ab6 <NVIC_EncodePriority+0x32>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	4313      	orrs	r3, r2
         );
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001afc:	d301      	bcc.n	8001b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afe:	2301      	movs	r3, #1
 8001b00:	e00f      	b.n	8001b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <SysTick_Config+0x40>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0a:	210f      	movs	r1, #15
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	f7ff ff8e 	bl	8001a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <SysTick_Config+0x40>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1a:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <SysTick_Config+0x40>)
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	e000e010 	.word	0xe000e010

08001b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff29 	bl	8001990 <__NVIC_SetPriorityGrouping>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b58:	f7ff ff3e 	bl	80019d8 <__NVIC_GetPriorityGrouping>
 8001b5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	6978      	ldr	r0, [r7, #20]
 8001b64:	f7ff ff8e 	bl	8001a84 <NVIC_EncodePriority>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff5d 	bl	8001a30 <__NVIC_SetPriority>
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff31 	bl	80019f4 <__NVIC_EnableIRQ>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ffa2 	bl	8001aec <SysTick_Config>
 8001ba8:	4603      	mov	r3, r0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc2:	e17f      	b.n	8001ec4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2101      	movs	r1, #1
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8171 	beq.w	8001ebe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d005      	beq.n	8001bf4 <HAL_GPIO_Init+0x40>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d130      	bne.n	8001c56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	091b      	lsrs	r3, r3, #4
 8001c40:	f003 0201 	and.w	r2, r3, #1
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d118      	bne.n	8001c94 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c68:	2201      	movs	r2, #1
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	08db      	lsrs	r3, r3, #3
 8001c7e:	f003 0201 	and.w	r2, r3, #1
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d017      	beq.n	8001cd0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2203      	movs	r2, #3
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d123      	bne.n	8001d24 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	08da      	lsrs	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3208      	adds	r2, #8
 8001ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	220f      	movs	r2, #15
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	08da      	lsrs	r2, r3, #3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3208      	adds	r2, #8
 8001d1e:	6939      	ldr	r1, [r7, #16]
 8001d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2203      	movs	r2, #3
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0203 	and.w	r2, r3, #3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 80ac 	beq.w	8001ebe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d66:	4b5f      	ldr	r3, [pc, #380]	; (8001ee4 <HAL_GPIO_Init+0x330>)
 8001d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6a:	4a5e      	ldr	r2, [pc, #376]	; (8001ee4 <HAL_GPIO_Init+0x330>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6613      	str	r3, [r2, #96]	; 0x60
 8001d72:	4b5c      	ldr	r3, [pc, #368]	; (8001ee4 <HAL_GPIO_Init+0x330>)
 8001d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d7e:	4a5a      	ldr	r2, [pc, #360]	; (8001ee8 <HAL_GPIO_Init+0x334>)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3302      	adds	r3, #2
 8001d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001da8:	d025      	beq.n	8001df6 <HAL_GPIO_Init+0x242>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4f      	ldr	r2, [pc, #316]	; (8001eec <HAL_GPIO_Init+0x338>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d01f      	beq.n	8001df2 <HAL_GPIO_Init+0x23e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4e      	ldr	r2, [pc, #312]	; (8001ef0 <HAL_GPIO_Init+0x33c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d019      	beq.n	8001dee <HAL_GPIO_Init+0x23a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4d      	ldr	r2, [pc, #308]	; (8001ef4 <HAL_GPIO_Init+0x340>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <HAL_GPIO_Init+0x236>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4c      	ldr	r2, [pc, #304]	; (8001ef8 <HAL_GPIO_Init+0x344>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00d      	beq.n	8001de6 <HAL_GPIO_Init+0x232>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4b      	ldr	r2, [pc, #300]	; (8001efc <HAL_GPIO_Init+0x348>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d007      	beq.n	8001de2 <HAL_GPIO_Init+0x22e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4a      	ldr	r2, [pc, #296]	; (8001f00 <HAL_GPIO_Init+0x34c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_GPIO_Init+0x22a>
 8001dda:	2306      	movs	r3, #6
 8001ddc:	e00c      	b.n	8001df8 <HAL_GPIO_Init+0x244>
 8001dde:	2307      	movs	r3, #7
 8001de0:	e00a      	b.n	8001df8 <HAL_GPIO_Init+0x244>
 8001de2:	2305      	movs	r3, #5
 8001de4:	e008      	b.n	8001df8 <HAL_GPIO_Init+0x244>
 8001de6:	2304      	movs	r3, #4
 8001de8:	e006      	b.n	8001df8 <HAL_GPIO_Init+0x244>
 8001dea:	2303      	movs	r3, #3
 8001dec:	e004      	b.n	8001df8 <HAL_GPIO_Init+0x244>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e002      	b.n	8001df8 <HAL_GPIO_Init+0x244>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_GPIO_Init+0x244>
 8001df6:	2300      	movs	r3, #0
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	f002 0203 	and.w	r2, r2, #3
 8001dfe:	0092      	lsls	r2, r2, #2
 8001e00:	4093      	lsls	r3, r2
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e08:	4937      	ldr	r1, [pc, #220]	; (8001ee8 <HAL_GPIO_Init+0x334>)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e16:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <HAL_GPIO_Init+0x350>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e3a:	4a32      	ldr	r2, [pc, #200]	; (8001f04 <HAL_GPIO_Init+0x350>)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e40:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <HAL_GPIO_Init+0x350>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e64:	4a27      	ldr	r2, [pc, #156]	; (8001f04 <HAL_GPIO_Init+0x350>)
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e6a:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <HAL_GPIO_Init+0x350>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e8e:	4a1d      	ldr	r2, [pc, #116]	; (8001f04 <HAL_GPIO_Init+0x350>)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e94:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <HAL_GPIO_Init+0x350>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001eb8:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <HAL_GPIO_Init+0x350>)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f47f ae78 	bne.w	8001bc4 <HAL_GPIO_Init+0x10>
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	371c      	adds	r7, #28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	48000400 	.word	0x48000400
 8001ef0:	48000800 	.word	0x48000800
 8001ef4:	48000c00 	.word	0x48000c00
 8001ef8:	48001000 	.word	0x48001000
 8001efc:	48001400 	.word	0x48001400
 8001f00:	48001800 	.word	0x48001800
 8001f04:	40010400 	.word	0x40010400

08001f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]
 8001f14:	4613      	mov	r3, r2
 8001f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f18:	787b      	ldrb	r3, [r7, #1]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f24:	e002      	b.n	8001f2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f26:	887a      	ldrh	r2, [r7, #2]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	041a      	lsls	r2, r3, #16
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	43d9      	mvns	r1, r3
 8001f56:	887b      	ldrh	r3, [r7, #2]
 8001f58:	400b      	ands	r3, r1
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	619a      	str	r2, [r3, #24]
}
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6e:	b08f      	sub	sp, #60	; 0x3c
 8001f70:	af0a      	add	r7, sp, #40	; 0x28
 8001f72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e054      	b.n	8002028 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d106      	bne.n	8001f9e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f007 fc25 	bl	80097e8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d102      	bne.n	8001fb8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f004 fe2b 	bl	8006c18 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	687e      	ldr	r6, [r7, #4]
 8001fca:	466d      	mov	r5, sp
 8001fcc:	f106 0410 	add.w	r4, r6, #16
 8001fd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fdc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fe0:	1d33      	adds	r3, r6, #4
 8001fe2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fe4:	6838      	ldr	r0, [r7, #0]
 8001fe6:	f004 fdda 	bl	8006b9e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2101      	movs	r1, #1
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f004 fe22 	bl	8006c3a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	687e      	ldr	r6, [r7, #4]
 8001ffe:	466d      	mov	r5, sp
 8002000:	f106 0410 	add.w	r4, r6, #16
 8002004:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002006:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800200a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800200c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002010:	e885 0003 	stmia.w	r5, {r0, r1}
 8002014:	1d33      	adds	r3, r6, #4
 8002016:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002018:	6838      	ldr	r0, [r7, #0]
 800201a:	f004 ffa7 	bl	8006f6c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002030 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af04      	add	r7, sp, #16
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	4608      	mov	r0, r1
 800203a:	4611      	mov	r1, r2
 800203c:	461a      	mov	r2, r3
 800203e:	4603      	mov	r3, r0
 8002040:	70fb      	strb	r3, [r7, #3]
 8002042:	460b      	mov	r3, r1
 8002044:	70bb      	strb	r3, [r7, #2]
 8002046:	4613      	mov	r3, r2
 8002048:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_HCD_HC_Init+0x28>
 8002054:	2302      	movs	r3, #2
 8002056:	e076      	b.n	8002146 <HAL_HCD_HC_Init+0x116>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	212c      	movs	r1, #44	; 0x2c
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	333d      	adds	r3, #61	; 0x3d
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	212c      	movs	r1, #44	; 0x2c
 8002078:	fb01 f303 	mul.w	r3, r1, r3
 800207c:	4413      	add	r3, r2
 800207e:	3338      	adds	r3, #56	; 0x38
 8002080:	787a      	ldrb	r2, [r7, #1]
 8002082:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	212c      	movs	r1, #44	; 0x2c
 800208a:	fb01 f303 	mul.w	r3, r1, r3
 800208e:	4413      	add	r3, r2
 8002090:	3340      	adds	r3, #64	; 0x40
 8002092:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002094:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	212c      	movs	r1, #44	; 0x2c
 800209c:	fb01 f303 	mul.w	r3, r1, r3
 80020a0:	4413      	add	r3, r2
 80020a2:	3339      	adds	r3, #57	; 0x39
 80020a4:	78fa      	ldrb	r2, [r7, #3]
 80020a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	212c      	movs	r1, #44	; 0x2c
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	333f      	adds	r3, #63	; 0x3f
 80020b6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80020ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	78ba      	ldrb	r2, [r7, #2]
 80020c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020c4:	b2d0      	uxtb	r0, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	212c      	movs	r1, #44	; 0x2c
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	333a      	adds	r3, #58	; 0x3a
 80020d2:	4602      	mov	r2, r0
 80020d4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80020d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	da09      	bge.n	80020f2 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80020de:	78fb      	ldrb	r3, [r7, #3]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	212c      	movs	r1, #44	; 0x2c
 80020e4:	fb01 f303 	mul.w	r3, r1, r3
 80020e8:	4413      	add	r3, r2
 80020ea:	333b      	adds	r3, #59	; 0x3b
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]
 80020f0:	e008      	b.n	8002104 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	212c      	movs	r1, #44	; 0x2c
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	333b      	adds	r3, #59	; 0x3b
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	212c      	movs	r1, #44	; 0x2c
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	333c      	adds	r3, #60	; 0x3c
 8002112:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002116:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	787c      	ldrb	r4, [r7, #1]
 800211e:	78ba      	ldrb	r2, [r7, #2]
 8002120:	78f9      	ldrb	r1, [r7, #3]
 8002122:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002124:	9302      	str	r3, [sp, #8]
 8002126:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	4623      	mov	r3, r4
 8002134:	f005 f862 	bl	80071fc <USB_HC_Init>
 8002138:	4603      	mov	r3, r0
 800213a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002144:	7bfb      	ldrb	r3, [r7, #15]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	bd90      	pop	{r4, r7, pc}

0800214e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b084      	sub	sp, #16
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	460b      	mov	r3, r1
 8002158:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_HCD_HC_Halt+0x1e>
 8002168:	2302      	movs	r3, #2
 800216a:	e00f      	b.n	800218c <HAL_HCD_HC_Halt+0x3e>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f005 fa52 	bl	8007626 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800218a:	7bfb      	ldrb	r3, [r7, #15]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	4608      	mov	r0, r1
 800219e:	4611      	mov	r1, r2
 80021a0:	461a      	mov	r2, r3
 80021a2:	4603      	mov	r3, r0
 80021a4:	70fb      	strb	r3, [r7, #3]
 80021a6:	460b      	mov	r3, r1
 80021a8:	70bb      	strb	r3, [r7, #2]
 80021aa:	4613      	mov	r3, r2
 80021ac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	212c      	movs	r1, #44	; 0x2c
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	333b      	adds	r3, #59	; 0x3b
 80021bc:	78ba      	ldrb	r2, [r7, #2]
 80021be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	212c      	movs	r1, #44	; 0x2c
 80021c6:	fb01 f303 	mul.w	r3, r1, r3
 80021ca:	4413      	add	r3, r2
 80021cc:	333f      	adds	r3, #63	; 0x3f
 80021ce:	787a      	ldrb	r2, [r7, #1]
 80021d0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80021d2:	7c3b      	ldrb	r3, [r7, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d112      	bne.n	80021fe <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	212c      	movs	r1, #44	; 0x2c
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	3342      	adds	r3, #66	; 0x42
 80021e6:	2203      	movs	r2, #3
 80021e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	212c      	movs	r1, #44	; 0x2c
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	4413      	add	r3, r2
 80021f6:	333d      	adds	r3, #61	; 0x3d
 80021f8:	7f3a      	ldrb	r2, [r7, #28]
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	e008      	b.n	8002210 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	212c      	movs	r1, #44	; 0x2c
 8002204:	fb01 f303 	mul.w	r3, r1, r3
 8002208:	4413      	add	r3, r2
 800220a:	3342      	adds	r3, #66	; 0x42
 800220c:	2202      	movs	r2, #2
 800220e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002210:	787b      	ldrb	r3, [r7, #1]
 8002212:	2b03      	cmp	r3, #3
 8002214:	f200 80c6 	bhi.w	80023a4 <HAL_HCD_HC_SubmitRequest+0x210>
 8002218:	a201      	add	r2, pc, #4	; (adr r2, 8002220 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800221a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221e:	bf00      	nop
 8002220:	08002231 	.word	0x08002231
 8002224:	08002391 	.word	0x08002391
 8002228:	08002295 	.word	0x08002295
 800222c:	08002313 	.word	0x08002313
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002230:	7c3b      	ldrb	r3, [r7, #16]
 8002232:	2b01      	cmp	r3, #1
 8002234:	f040 80b8 	bne.w	80023a8 <HAL_HCD_HC_SubmitRequest+0x214>
 8002238:	78bb      	ldrb	r3, [r7, #2]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f040 80b4 	bne.w	80023a8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002240:	8b3b      	ldrh	r3, [r7, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d108      	bne.n	8002258 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002246:	78fb      	ldrb	r3, [r7, #3]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	212c      	movs	r1, #44	; 0x2c
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	4413      	add	r3, r2
 8002252:	3355      	adds	r3, #85	; 0x55
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	212c      	movs	r1, #44	; 0x2c
 800225e:	fb01 f303 	mul.w	r3, r1, r3
 8002262:	4413      	add	r3, r2
 8002264:	3355      	adds	r3, #85	; 0x55
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d109      	bne.n	8002280 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	3342      	adds	r3, #66	; 0x42
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800227e:	e093      	b.n	80023a8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	212c      	movs	r1, #44	; 0x2c
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	4413      	add	r3, r2
 800228c:	3342      	adds	r3, #66	; 0x42
 800228e:	2202      	movs	r2, #2
 8002290:	701a      	strb	r2, [r3, #0]
      break;
 8002292:	e089      	b.n	80023a8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002294:	78bb      	ldrb	r3, [r7, #2]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d11d      	bne.n	80022d6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	212c      	movs	r1, #44	; 0x2c
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	3355      	adds	r3, #85	; 0x55
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	212c      	movs	r1, #44	; 0x2c
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	3342      	adds	r3, #66	; 0x42
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80022c0:	e073      	b.n	80023aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	212c      	movs	r1, #44	; 0x2c
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	3342      	adds	r3, #66	; 0x42
 80022d0:	2202      	movs	r2, #2
 80022d2:	701a      	strb	r2, [r3, #0]
      break;
 80022d4:	e069      	b.n	80023aa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	212c      	movs	r1, #44	; 0x2c
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	3354      	adds	r3, #84	; 0x54
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d109      	bne.n	80022fe <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	212c      	movs	r1, #44	; 0x2c
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	4413      	add	r3, r2
 80022f6:	3342      	adds	r3, #66	; 0x42
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
      break;
 80022fc:	e055      	b.n	80023aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022fe:	78fb      	ldrb	r3, [r7, #3]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	212c      	movs	r1, #44	; 0x2c
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	4413      	add	r3, r2
 800230a:	3342      	adds	r3, #66	; 0x42
 800230c:	2202      	movs	r2, #2
 800230e:	701a      	strb	r2, [r3, #0]
      break;
 8002310:	e04b      	b.n	80023aa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002312:	78bb      	ldrb	r3, [r7, #2]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d11d      	bne.n	8002354 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	212c      	movs	r1, #44	; 0x2c
 800231e:	fb01 f303 	mul.w	r3, r1, r3
 8002322:	4413      	add	r3, r2
 8002324:	3355      	adds	r3, #85	; 0x55
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d109      	bne.n	8002340 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	212c      	movs	r1, #44	; 0x2c
 8002332:	fb01 f303 	mul.w	r3, r1, r3
 8002336:	4413      	add	r3, r2
 8002338:	3342      	adds	r3, #66	; 0x42
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800233e:	e034      	b.n	80023aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	212c      	movs	r1, #44	; 0x2c
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	4413      	add	r3, r2
 800234c:	3342      	adds	r3, #66	; 0x42
 800234e:	2202      	movs	r2, #2
 8002350:	701a      	strb	r2, [r3, #0]
      break;
 8002352:	e02a      	b.n	80023aa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	212c      	movs	r1, #44	; 0x2c
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	4413      	add	r3, r2
 8002360:	3354      	adds	r3, #84	; 0x54
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d109      	bne.n	800237c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	3342      	adds	r3, #66	; 0x42
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
      break;
 800237a:	e016      	b.n	80023aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	212c      	movs	r1, #44	; 0x2c
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	3342      	adds	r3, #66	; 0x42
 800238a:	2202      	movs	r2, #2
 800238c:	701a      	strb	r2, [r3, #0]
      break;
 800238e:	e00c      	b.n	80023aa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	212c      	movs	r1, #44	; 0x2c
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	4413      	add	r3, r2
 800239c:	3342      	adds	r3, #66	; 0x42
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
      break;
 80023a2:	e002      	b.n	80023aa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80023a4:	bf00      	nop
 80023a6:	e000      	b.n	80023aa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80023a8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	212c      	movs	r1, #44	; 0x2c
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	3344      	adds	r3, #68	; 0x44
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	8b3a      	ldrh	r2, [r7, #24]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	202c      	movs	r0, #44	; 0x2c
 80023c4:	fb00 f303 	mul.w	r3, r0, r3
 80023c8:	440b      	add	r3, r1
 80023ca:	334c      	adds	r3, #76	; 0x4c
 80023cc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80023ce:	78fb      	ldrb	r3, [r7, #3]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	212c      	movs	r1, #44	; 0x2c
 80023d4:	fb01 f303 	mul.w	r3, r1, r3
 80023d8:	4413      	add	r3, r2
 80023da:	3360      	adds	r3, #96	; 0x60
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	212c      	movs	r1, #44	; 0x2c
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	3350      	adds	r3, #80	; 0x50
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	212c      	movs	r1, #44	; 0x2c
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	3339      	adds	r3, #57	; 0x39
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	212c      	movs	r1, #44	; 0x2c
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4413      	add	r3, r2
 8002410:	3361      	adds	r3, #97	; 0x61
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	222c      	movs	r2, #44	; 0x2c
 800241e:	fb02 f303 	mul.w	r3, r2, r3
 8002422:	3338      	adds	r3, #56	; 0x38
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	4619      	mov	r1, r3
 800242a:	f004 fff3 	bl	8007414 <USB_HC_StartXfer>
 800242e:	4603      	mov	r3, r0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f004 fd49 	bl	8006ee6 <USB_GetMode>
 8002454:	4603      	mov	r3, r0
 8002456:	2b01      	cmp	r3, #1
 8002458:	f040 80f6 	bne.w	8002648 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f004 fd2d 	bl	8006ec0 <USB_ReadInterrupts>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80ec 	beq.w	8002646 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f004 fd24 	bl	8006ec0 <USB_ReadInterrupts>
 8002478:	4603      	mov	r3, r0
 800247a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800247e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002482:	d104      	bne.n	800248e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800248c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f004 fd14 	bl	8006ec0 <USB_ReadInterrupts>
 8002498:	4603      	mov	r3, r0
 800249a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800249e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024a2:	d104      	bne.n	80024ae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f004 fd04 	bl	8006ec0 <USB_ReadInterrupts>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024c2:	d104      	bne.n	80024ce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f004 fcf4 	bl	8006ec0 <USB_ReadInterrupts>
 80024d8:	4603      	mov	r3, r0
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d103      	bne.n	80024ea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2202      	movs	r2, #2
 80024e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f004 fce6 	bl	8006ec0 <USB_ReadInterrupts>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024fe:	d11c      	bne.n	800253a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002508:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10f      	bne.n	800253a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800251a:	2110      	movs	r1, #16
 800251c:	6938      	ldr	r0, [r7, #16]
 800251e:	f004 fbd9 	bl	8006cd4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002522:	6938      	ldr	r0, [r7, #16]
 8002524:	f004 fc0a 	bl	8006d3c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2101      	movs	r1, #1
 800252e:	4618      	mov	r0, r3
 8002530:	f004 fd9e 	bl	8007070 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f007 f9d9 	bl	80098ec <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f004 fcbe 	bl	8006ec0 <USB_ReadInterrupts>
 8002544:	4603      	mov	r3, r0
 8002546:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800254a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800254e:	d102      	bne.n	8002556 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f001 f815 	bl	8003580 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f004 fcb0 	bl	8006ec0 <USB_ReadInterrupts>
 8002560:	4603      	mov	r3, r0
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b08      	cmp	r3, #8
 8002568:	d106      	bne.n	8002578 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f007 f9a2 	bl	80098b4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2208      	movs	r2, #8
 8002576:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f004 fc9f 	bl	8006ec0 <USB_ReadInterrupts>
 8002582:	4603      	mov	r3, r0
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b10      	cmp	r3, #16
 800258a:	d101      	bne.n	8002590 <HAL_HCD_IRQHandler+0x158>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <HAL_HCD_IRQHandler+0x15a>
 8002590:	2300      	movs	r3, #0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d012      	beq.n	80025bc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699a      	ldr	r2, [r3, #24]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0210 	bic.w	r2, r2, #16
 80025a4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 ff18 	bl	80033dc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699a      	ldr	r2, [r3, #24]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0210 	orr.w	r2, r2, #16
 80025ba:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f004 fc7d 	bl	8006ec0 <USB_ReadInterrupts>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025d0:	d13a      	bne.n	8002648 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f005 f814 	bl	8007604 <USB_HC_ReadInterrupt>
 80025dc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	e025      	b.n	8002630 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	fa22 f303 	lsr.w	r3, r2, r3
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d018      	beq.n	800262a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800260a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800260e:	d106      	bne.n	800261e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	4619      	mov	r1, r3
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f8ab 	bl	8002772 <HCD_HC_IN_IRQHandler>
 800261c:	e005      	b.n	800262a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4619      	mov	r1, r3
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fbd7 	bl	8002dd8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	3301      	adds	r3, #1
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	429a      	cmp	r2, r3
 8002638:	d3d4      	bcc.n	80025e4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002642:	615a      	str	r2, [r3, #20]
 8002644:	e000      	b.n	8002648 <HAL_HCD_IRQHandler+0x210>
      return;
 8002646:	bf00      	nop
    }
  }
}
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_HCD_Start+0x16>
 8002660:	2302      	movs	r3, #2
 8002662:	e013      	b.n	800268c <HAL_HCD_Start+0x3e>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2101      	movs	r1, #1
 8002672:	4618      	mov	r0, r3
 8002674:	f004 fd60 	bl	8007138 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f004 faba 	bl	8006bf6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_HCD_Stop+0x16>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e00d      	b.n	80026c6 <HAL_HCD_Stop+0x32>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f005 f8b1 	bl	800781e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f004 fd02 	bl	80070e4 <USB_ResetPort>
 80026e0:	4603      	mov	r3, r0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	460b      	mov	r3, r1
 80026f4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	3360      	adds	r3, #96	; 0x60
 8002704:	781b      	ldrb	r3, [r3, #0]
}
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	212c      	movs	r1, #44	; 0x2c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	3350      	adds	r3, #80	; 0x50
 800272c:	681b      	ldr	r3, [r3, #0]
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f004 fd46 	bl	80071d8 <USB_GetCurrentFrame>
 800274c:	4603      	mov	r3, r0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f004 fd21 	bl	80071aa <USB_GetHostSpeed>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b086      	sub	sp, #24
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	460b      	mov	r3, r1
 800277c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4413      	add	r3, r2
 8002794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d11a      	bne.n	80027d8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ae:	461a      	mov	r2, r3
 80027b0:	2304      	movs	r3, #4
 80027b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	212c      	movs	r1, #44	; 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	3361      	adds	r3, #97	; 0x61
 80027c2:	2206      	movs	r2, #6
 80027c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	4611      	mov	r1, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f004 ff28 	bl	8007626 <USB_HC_Halt>
 80027d6:	e0af      	b.n	8002938 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ee:	d11b      	bne.n	8002828 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fc:	461a      	mov	r2, r3
 80027fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002802:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	212c      	movs	r1, #44	; 0x2c
 800280a:	fb01 f303 	mul.w	r3, r1, r3
 800280e:	4413      	add	r3, r2
 8002810:	3361      	adds	r3, #97	; 0x61
 8002812:	2207      	movs	r2, #7
 8002814:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f004 ff00 	bl	8007626 <USB_HC_Halt>
 8002826:	e087      	b.n	8002938 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4413      	add	r3, r2
 8002830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b20      	cmp	r3, #32
 800283c:	d109      	bne.n	8002852 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	461a      	mov	r2, r3
 800284c:	2320      	movs	r3, #32
 800284e:	6093      	str	r3, [r2, #8]
 8002850:	e072      	b.n	8002938 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4413      	add	r3, r2
 800285a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b08      	cmp	r3, #8
 8002866:	d11a      	bne.n	800289e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002874:	461a      	mov	r2, r3
 8002876:	2308      	movs	r3, #8
 8002878:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	212c      	movs	r1, #44	; 0x2c
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	4413      	add	r3, r2
 8002886:	3361      	adds	r3, #97	; 0x61
 8002888:	2205      	movs	r2, #5
 800288a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	4611      	mov	r1, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f004 fec5 	bl	8007626 <USB_HC_Halt>
 800289c:	e04c      	b.n	8002938 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	015a      	lsls	r2, r3, #5
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b4:	d11b      	bne.n	80028ee <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c2:	461a      	mov	r2, r3
 80028c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	212c      	movs	r1, #44	; 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	3361      	adds	r3, #97	; 0x61
 80028d8:	2208      	movs	r2, #8
 80028da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	4611      	mov	r1, r2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f004 fe9d 	bl	8007626 <USB_HC_Halt>
 80028ec:	e024      	b.n	8002938 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002900:	2b80      	cmp	r3, #128	; 0x80
 8002902:	d119      	bne.n	8002938 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4413      	add	r3, r2
 800290c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002910:	461a      	mov	r2, r3
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	3361      	adds	r3, #97	; 0x61
 8002924:	2206      	movs	r2, #6
 8002926:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f004 fe77 	bl	8007626 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4413      	add	r3, r2
 8002940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800294a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800294e:	d112      	bne.n	8002976 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f004 fe63 	bl	8007626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296c:	461a      	mov	r2, r3
 800296e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002972:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002974:	e22c      	b.n	8002dd0 <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4413      	add	r3, r2
 800297e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b01      	cmp	r3, #1
 800298a:	f040 80c1 	bne.w	8002b10 <HCD_HC_IN_IRQHandler+0x39e>
    hhcd->hc[ch_num].state = HC_XFRC;
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	212c      	movs	r1, #44	; 0x2c
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	4413      	add	r3, r2
 800299a:	3361      	adds	r3, #97	; 0x61
 800299c:	2201      	movs	r2, #1
 800299e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	212c      	movs	r1, #44	; 0x2c
 80029a6:	fb01 f303 	mul.w	r3, r1, r3
 80029aa:	4413      	add	r3, r2
 80029ac:	335c      	adds	r3, #92	; 0x5c
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029be:	461a      	mov	r2, r3
 80029c0:	2301      	movs	r3, #1
 80029c2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	333f      	adds	r3, #63	; 0x3f
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d009      	beq.n	80029ec <HCD_HC_IN_IRQHandler+0x27a>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	212c      	movs	r1, #44	; 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	333f      	adds	r3, #63	; 0x3f
 80029e6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d111      	bne.n	8002a10 <HCD_HC_IN_IRQHandler+0x29e>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f004 fe15 	bl	8007626 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2310      	movs	r3, #16
 8002a0c:	6093      	str	r3, [r2, #8]
 8002a0e:	e03a      	b.n	8002a86 <HCD_HC_IN_IRQHandler+0x314>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	333f      	adds	r3, #63	; 0x3f
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d009      	beq.n	8002a38 <HCD_HC_IN_IRQHandler+0x2c6>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	333f      	adds	r3, #63	; 0x3f
 8002a32:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d126      	bne.n	8002a86 <HCD_HC_IN_IRQHandler+0x314>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	0151      	lsls	r1, r2, #5
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	440a      	add	r2, r1
 8002a4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a56:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3360      	adds	r3, #96	; 0x60
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	b2d9      	uxtb	r1, r3
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	202c      	movs	r0, #44	; 0x2c
 8002a74:	fb00 f303 	mul.w	r3, r0, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	3360      	adds	r3, #96	; 0x60
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f006 ff41 	bl	8009908 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d12b      	bne.n	8002ae6 <HCD_HC_IN_IRQHandler+0x374>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	212c      	movs	r1, #44	; 0x2c
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	3348      	adds	r3, #72	; 0x48
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	202c      	movs	r0, #44	; 0x2c
 8002aa4:	fb00 f202 	mul.w	r2, r0, r2
 8002aa8:	440a      	add	r2, r1
 8002aaa:	3240      	adds	r2, #64	; 0x40
 8002aac:	8812      	ldrh	r2, [r2, #0]
 8002aae:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 818a 	beq.w	8002dd0 <HCD_HC_IN_IRQHandler+0x65e>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	212c      	movs	r1, #44	; 0x2c
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3354      	adds	r3, #84	; 0x54
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	f083 0301 	eor.w	r3, r3, #1
 8002ad0:	b2d8      	uxtb	r0, r3
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	3354      	adds	r3, #84	; 0x54
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	701a      	strb	r2, [r3, #0]
}
 8002ae4:	e174      	b.n	8002dd0 <HCD_HC_IN_IRQHandler+0x65e>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	212c      	movs	r1, #44	; 0x2c
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	3354      	adds	r3, #84	; 0x54
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	f083 0301 	eor.w	r3, r3, #1
 8002afa:	b2d8      	uxtb	r0, r3
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	3354      	adds	r3, #84	; 0x54
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	701a      	strb	r2, [r3, #0]
}
 8002b0e:	e15f      	b.n	8002dd0 <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	f040 80f6 	bne.w	8002d14 <HCD_HC_IN_IRQHandler+0x5a2>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	3361      	adds	r3, #97	; 0x61
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d109      	bne.n	8002b50 <HCD_HC_IN_IRQHandler+0x3de>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	212c      	movs	r1, #44	; 0x2c
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	4413      	add	r3, r2
 8002b48:	3360      	adds	r3, #96	; 0x60
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	e0c9      	b.n	8002ce4 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	212c      	movs	r1, #44	; 0x2c
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3361      	adds	r3, #97	; 0x61
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b05      	cmp	r3, #5
 8002b62:	d109      	bne.n	8002b78 <HCD_HC_IN_IRQHandler+0x406>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	212c      	movs	r1, #44	; 0x2c
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3360      	adds	r3, #96	; 0x60
 8002b72:	2205      	movs	r2, #5
 8002b74:	701a      	strb	r2, [r3, #0]
 8002b76:	e0b5      	b.n	8002ce4 <HCD_HC_IN_IRQHandler+0x572>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	3361      	adds	r3, #97	; 0x61
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b06      	cmp	r3, #6
 8002b8a:	d009      	beq.n	8002ba0 <HCD_HC_IN_IRQHandler+0x42e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	212c      	movs	r1, #44	; 0x2c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	3361      	adds	r3, #97	; 0x61
 8002b9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d150      	bne.n	8002c42 <HCD_HC_IN_IRQHandler+0x4d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	212c      	movs	r1, #44	; 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	335c      	adds	r3, #92	; 0x5c
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	202c      	movs	r0, #44	; 0x2c
 8002bb8:	fb00 f303 	mul.w	r3, r0, r3
 8002bbc:	440b      	add	r3, r1
 8002bbe:	335c      	adds	r3, #92	; 0x5c
 8002bc0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	335c      	adds	r3, #92	; 0x5c
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d912      	bls.n	8002bfc <HCD_HC_IN_IRQHandler+0x48a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	335c      	adds	r3, #92	; 0x5c
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3360      	adds	r3, #96	; 0x60
 8002bf6:	2204      	movs	r2, #4
 8002bf8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bfa:	e073      	b.n	8002ce4 <HCD_HC_IN_IRQHandler+0x572>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	3360      	adds	r3, #96	; 0x60
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c24:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c2c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c40:	e050      	b.n	8002ce4 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	212c      	movs	r1, #44	; 0x2c
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3361      	adds	r3, #97	; 0x61
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d122      	bne.n	8002c9c <HCD_HC_IN_IRQHandler+0x52a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	212c      	movs	r1, #44	; 0x2c
 8002c5c:	fb01 f303 	mul.w	r3, r1, r3
 8002c60:	4413      	add	r3, r2
 8002c62:	3360      	adds	r3, #96	; 0x60
 8002c64:	2202      	movs	r2, #2
 8002c66:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c7e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c86:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c94:	461a      	mov	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	e023      	b.n	8002ce4 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3361      	adds	r3, #97	; 0x61
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b07      	cmp	r3, #7
 8002cae:	d119      	bne.n	8002ce4 <HCD_HC_IN_IRQHandler+0x572>
      hhcd->hc[ch_num].ErrCnt++;
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	335c      	adds	r3, #92	; 0x5c
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	202c      	movs	r0, #44	; 0x2c
 8002cc8:	fb00 f303 	mul.w	r3, r0, r3
 8002ccc:	440b      	add	r3, r1
 8002cce:	335c      	adds	r3, #92	; 0x5c
 8002cd0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	212c      	movs	r1, #44	; 0x2c
 8002cd8:	fb01 f303 	mul.w	r3, r1, r3
 8002cdc:	4413      	add	r3, r2
 8002cde:	3360      	adds	r3, #96	; 0x60
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	b2d9      	uxtb	r1, r3
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	202c      	movs	r0, #44	; 0x2c
 8002d00:	fb00 f303 	mul.w	r3, r0, r3
 8002d04:	4413      	add	r3, r2
 8002d06:	3360      	adds	r3, #96	; 0x60
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f006 fdfb 	bl	8009908 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d12:	e05d      	b.n	8002dd0 <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b10      	cmp	r3, #16
 8002d28:	d152      	bne.n	8002dd0 <HCD_HC_IN_IRQHandler+0x65e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	212c      	movs	r1, #44	; 0x2c
 8002d30:	fb01 f303 	mul.w	r3, r1, r3
 8002d34:	4413      	add	r3, r2
 8002d36:	333f      	adds	r3, #63	; 0x3f
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d111      	bne.n	8002d62 <HCD_HC_IN_IRQHandler+0x5f0>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	212c      	movs	r1, #44	; 0x2c
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	335c      	adds	r3, #92	; 0x5c
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	4611      	mov	r1, r2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f004 fc63 	bl	8007626 <USB_HC_Halt>
 8002d60:	e02d      	b.n	8002dbe <HCD_HC_IN_IRQHandler+0x64c>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	333f      	adds	r3, #63	; 0x3f
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <HCD_HC_IN_IRQHandler+0x618>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	212c      	movs	r1, #44	; 0x2c
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	333f      	adds	r3, #63	; 0x3f
 8002d84:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d119      	bne.n	8002dbe <HCD_HC_IN_IRQHandler+0x64c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	212c      	movs	r1, #44	; 0x2c
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	335c      	adds	r3, #92	; 0x5c
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3361      	adds	r3, #97	; 0x61
 8002daa:	2203      	movs	r2, #3
 8002dac:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	4611      	mov	r1, r2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f004 fc34 	bl	8007626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dca:	461a      	mov	r2, r3
 8002dcc:	2310      	movs	r3, #16
 8002dce:	6093      	str	r3, [r2, #8]
}
 8002dd0:	bf00      	nop
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d11a      	bne.n	8002e3e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e14:	461a      	mov	r2, r3
 8002e16:	2304      	movs	r3, #4
 8002e18:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	212c      	movs	r1, #44	; 0x2c
 8002e20:	fb01 f303 	mul.w	r3, r1, r3
 8002e24:	4413      	add	r3, r2
 8002e26:	3361      	adds	r3, #97	; 0x61
 8002e28:	2206      	movs	r2, #6
 8002e2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	4611      	mov	r1, r2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f004 fbf5 	bl	8007626 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002e3c:	e2ca      	b.n	80033d4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0320 	and.w	r3, r3, #32
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	d12e      	bne.n	8002eb2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	461a      	mov	r2, r3
 8002e62:	2320      	movs	r3, #32
 8002e64:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	333d      	adds	r3, #61	; 0x3d
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	f040 82ac 	bne.w	80033d4 <HCD_HC_OUT_IRQHandler+0x5fc>
      hhcd->hc[ch_num].do_ping = 0U;
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	333d      	adds	r3, #61	; 0x3d
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	212c      	movs	r1, #44	; 0x2c
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	3360      	adds	r3, #96	; 0x60
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f004 fbbb 	bl	8007626 <USB_HC_Halt>
}
 8002eb0:	e290      	b.n	80033d4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec8:	d112      	bne.n	8002ef0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002edc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f004 fb9c 	bl	8007626 <USB_HC_Halt>
}
 8002eee:	e271      	b.n	80033d4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d140      	bne.n	8002f88 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	335c      	adds	r3, #92	; 0x5c
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2a:	2b40      	cmp	r3, #64	; 0x40
 8002f2c:	d111      	bne.n	8002f52 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	333d      	adds	r3, #61	; 0x3d
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2340      	movs	r3, #64	; 0x40
 8002f50:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	015a      	lsls	r2, r3, #5
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5e:	461a      	mov	r2, r3
 8002f60:	2301      	movs	r3, #1
 8002f62:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	212c      	movs	r1, #44	; 0x2c
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	3361      	adds	r3, #97	; 0x61
 8002f72:	2201      	movs	r2, #1
 8002f74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f004 fb50 	bl	8007626 <USB_HC_Halt>
}
 8002f86:	e225      	b.n	80033d4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9a:	2b40      	cmp	r3, #64	; 0x40
 8002f9c:	d12c      	bne.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	212c      	movs	r1, #44	; 0x2c
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	3361      	adds	r3, #97	; 0x61
 8002fac:	2204      	movs	r2, #4
 8002fae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	212c      	movs	r1, #44	; 0x2c
 8002fb6:	fb01 f303 	mul.w	r3, r1, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	333d      	adds	r3, #61	; 0x3d
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	212c      	movs	r1, #44	; 0x2c
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	335c      	adds	r3, #92	; 0x5c
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f004 fb21 	bl	8007626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	2340      	movs	r3, #64	; 0x40
 8002ff4:	6093      	str	r3, [r2, #8]
}
 8002ff6:	e1ed      	b.n	80033d4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b08      	cmp	r3, #8
 800300c:	d11a      	bne.n	8003044 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	4413      	add	r3, r2
 8003016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301a:	461a      	mov	r2, r3
 800301c:	2308      	movs	r3, #8
 800301e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	212c      	movs	r1, #44	; 0x2c
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	4413      	add	r3, r2
 800302c:	3361      	adds	r3, #97	; 0x61
 800302e:	2205      	movs	r2, #5
 8003030:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f004 faf2 	bl	8007626 <USB_HC_Halt>
}
 8003042:	e1c7      	b.n	80033d4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	2b10      	cmp	r3, #16
 8003058:	d123      	bne.n	80030a2 <HCD_HC_OUT_IRQHandler+0x2ca>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	212c      	movs	r1, #44	; 0x2c
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	4413      	add	r3, r2
 8003066:	335c      	adds	r3, #92	; 0x5c
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	212c      	movs	r1, #44	; 0x2c
 8003072:	fb01 f303 	mul.w	r3, r1, r3
 8003076:	4413      	add	r3, r2
 8003078:	3361      	adds	r3, #97	; 0x61
 800307a:	2203      	movs	r2, #3
 800307c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f004 facc 	bl	8007626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	4413      	add	r3, r2
 8003096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309a:	461a      	mov	r2, r3
 800309c:	2310      	movs	r3, #16
 800309e:	6093      	str	r3, [r2, #8]
}
 80030a0:	e198      	b.n	80033d4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b4:	2b80      	cmp	r3, #128	; 0x80
 80030b6:	d11a      	bne.n	80030ee <HCD_HC_OUT_IRQHandler+0x316>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	212c      	movs	r1, #44	; 0x2c
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	3361      	adds	r3, #97	; 0x61
 80030c6:	2206      	movs	r2, #6
 80030c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f004 faa6 	bl	8007626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e6:	461a      	mov	r2, r3
 80030e8:	2380      	movs	r3, #128	; 0x80
 80030ea:	6093      	str	r3, [r2, #8]
}
 80030ec:	e172      	b.n	80033d4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003104:	d11b      	bne.n	800313e <HCD_HC_OUT_IRQHandler+0x366>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	212c      	movs	r1, #44	; 0x2c
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	4413      	add	r3, r2
 8003112:	3361      	adds	r3, #97	; 0x61
 8003114:	2208      	movs	r2, #8
 8003116:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	4611      	mov	r1, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f004 fa7f 	bl	8007626 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	4413      	add	r3, r2
 8003130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003134:	461a      	mov	r2, r3
 8003136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800313a:	6093      	str	r3, [r2, #8]
}
 800313c:	e14a      	b.n	80033d4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	4413      	add	r3, r2
 8003146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b02      	cmp	r3, #2
 8003152:	f040 813f 	bne.w	80033d4 <HCD_HC_OUT_IRQHandler+0x5fc>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	212c      	movs	r1, #44	; 0x2c
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	3361      	adds	r3, #97	; 0x61
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d17d      	bne.n	8003266 <HCD_HC_OUT_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	212c      	movs	r1, #44	; 0x2c
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	4413      	add	r3, r2
 8003176:	3360      	adds	r3, #96	; 0x60
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	212c      	movs	r1, #44	; 0x2c
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	4413      	add	r3, r2
 8003188:	333f      	adds	r3, #63	; 0x3f
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d00a      	beq.n	80031a6 <HCD_HC_OUT_IRQHandler+0x3ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	212c      	movs	r1, #44	; 0x2c
 8003196:	fb01 f303 	mul.w	r3, r1, r3
 800319a:	4413      	add	r3, r2
 800319c:	333f      	adds	r3, #63	; 0x3f
 800319e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	f040 8100 	bne.w	80033a6 <HCD_HC_OUT_IRQHandler+0x5ce>
        if (hhcd->Init.dma_enable == 0U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d113      	bne.n	80031d6 <HCD_HC_OUT_IRQHandler+0x3fe>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	212c      	movs	r1, #44	; 0x2c
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	3355      	adds	r3, #85	; 0x55
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	f083 0301 	eor.w	r3, r3, #1
 80031c2:	b2d8      	uxtb	r0, r3
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	212c      	movs	r1, #44	; 0x2c
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	3355      	adds	r3, #85	; 0x55
 80031d2:	4602      	mov	r2, r0
 80031d4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	f040 80e3 	bne.w	80033a6 <HCD_HC_OUT_IRQHandler+0x5ce>
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	212c      	movs	r1, #44	; 0x2c
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	334c      	adds	r3, #76	; 0x4c
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80d8 	beq.w	80033a6 <HCD_HC_OUT_IRQHandler+0x5ce>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	212c      	movs	r1, #44	; 0x2c
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	4413      	add	r3, r2
 8003202:	334c      	adds	r3, #76	; 0x4c
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	202c      	movs	r0, #44	; 0x2c
 800320c:	fb00 f202 	mul.w	r2, r0, r2
 8003210:	440a      	add	r2, r1
 8003212:	3240      	adds	r2, #64	; 0x40
 8003214:	8812      	ldrh	r2, [r2, #0]
 8003216:	4413      	add	r3, r2
 8003218:	3b01      	subs	r3, #1
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	202c      	movs	r0, #44	; 0x2c
 8003220:	fb00 f202 	mul.w	r2, r0, r2
 8003224:	440a      	add	r2, r1
 8003226:	3240      	adds	r2, #64	; 0x40
 8003228:	8812      	ldrh	r2, [r2, #0]
 800322a:	fbb3 f3f2 	udiv	r3, r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 80b5 	beq.w	80033a6 <HCD_HC_OUT_IRQHandler+0x5ce>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	212c      	movs	r1, #44	; 0x2c
 8003242:	fb01 f303 	mul.w	r3, r1, r3
 8003246:	4413      	add	r3, r2
 8003248:	3355      	adds	r3, #85	; 0x55
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	f083 0301 	eor.w	r3, r3, #1
 8003250:	b2d8      	uxtb	r0, r3
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	212c      	movs	r1, #44	; 0x2c
 8003258:	fb01 f303 	mul.w	r3, r1, r3
 800325c:	4413      	add	r3, r2
 800325e:	3355      	adds	r3, #85	; 0x55
 8003260:	4602      	mov	r2, r0
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	e09f      	b.n	80033a6 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	212c      	movs	r1, #44	; 0x2c
 800326c:	fb01 f303 	mul.w	r3, r1, r3
 8003270:	4413      	add	r3, r2
 8003272:	3361      	adds	r3, #97	; 0x61
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b03      	cmp	r3, #3
 8003278:	d109      	bne.n	800328e <HCD_HC_OUT_IRQHandler+0x4b6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	212c      	movs	r1, #44	; 0x2c
 8003280:	fb01 f303 	mul.w	r3, r1, r3
 8003284:	4413      	add	r3, r2
 8003286:	3360      	adds	r3, #96	; 0x60
 8003288:	2202      	movs	r2, #2
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	e08b      	b.n	80033a6 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	212c      	movs	r1, #44	; 0x2c
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	4413      	add	r3, r2
 800329a:	3361      	adds	r3, #97	; 0x61
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d109      	bne.n	80032b6 <HCD_HC_OUT_IRQHandler+0x4de>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	212c      	movs	r1, #44	; 0x2c
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	4413      	add	r3, r2
 80032ae:	3360      	adds	r3, #96	; 0x60
 80032b0:	2202      	movs	r2, #2
 80032b2:	701a      	strb	r2, [r3, #0]
 80032b4:	e077      	b.n	80033a6 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	212c      	movs	r1, #44	; 0x2c
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	3361      	adds	r3, #97	; 0x61
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b05      	cmp	r3, #5
 80032c8:	d109      	bne.n	80032de <HCD_HC_OUT_IRQHandler+0x506>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	212c      	movs	r1, #44	; 0x2c
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	3360      	adds	r3, #96	; 0x60
 80032d8:	2205      	movs	r2, #5
 80032da:	701a      	strb	r2, [r3, #0]
 80032dc:	e063      	b.n	80033a6 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	212c      	movs	r1, #44	; 0x2c
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	4413      	add	r3, r2
 80032ea:	3361      	adds	r3, #97	; 0x61
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b06      	cmp	r3, #6
 80032f0:	d009      	beq.n	8003306 <HCD_HC_OUT_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	212c      	movs	r1, #44	; 0x2c
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	3361      	adds	r3, #97	; 0x61
 8003300:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003302:	2b08      	cmp	r3, #8
 8003304:	d14f      	bne.n	80033a6 <HCD_HC_OUT_IRQHandler+0x5ce>
      hhcd->hc[ch_num].ErrCnt++;
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	212c      	movs	r1, #44	; 0x2c
 800330c:	fb01 f303 	mul.w	r3, r1, r3
 8003310:	4413      	add	r3, r2
 8003312:	335c      	adds	r3, #92	; 0x5c
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	202c      	movs	r0, #44	; 0x2c
 800331e:	fb00 f303 	mul.w	r3, r0, r3
 8003322:	440b      	add	r3, r1
 8003324:	335c      	adds	r3, #92	; 0x5c
 8003326:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	212c      	movs	r1, #44	; 0x2c
 800332e:	fb01 f303 	mul.w	r3, r1, r3
 8003332:	4413      	add	r3, r2
 8003334:	335c      	adds	r3, #92	; 0x5c
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d912      	bls.n	8003362 <HCD_HC_OUT_IRQHandler+0x58a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	212c      	movs	r1, #44	; 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	335c      	adds	r3, #92	; 0x5c
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	212c      	movs	r1, #44	; 0x2c
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	3360      	adds	r3, #96	; 0x60
 800335c:	2204      	movs	r2, #4
 800335e:	701a      	strb	r2, [r3, #0]
 8003360:	e021      	b.n	80033a6 <HCD_HC_OUT_IRQHandler+0x5ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	212c      	movs	r1, #44	; 0x2c
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	4413      	add	r3, r2
 800336e:	3360      	adds	r3, #96	; 0x60
 8003370:	2202      	movs	r2, #2
 8003372:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	4413      	add	r3, r2
 800337c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800338a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003392:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	4413      	add	r3, r2
 800339c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a0:	461a      	mov	r2, r3
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b2:	461a      	mov	r2, r3
 80033b4:	2302      	movs	r3, #2
 80033b6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	b2d9      	uxtb	r1, r3
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	202c      	movs	r0, #44	; 0x2c
 80033c2:	fb00 f303 	mul.w	r3, r0, r3
 80033c6:	4413      	add	r3, r2
 80033c8:	3360      	adds	r3, #96	; 0x60
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f006 fa9a 	bl	8009908 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80033d4:	bf00      	nop
 80033d6:	3720      	adds	r7, #32
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08a      	sub	sp, #40	; 0x28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	0c5b      	lsrs	r3, r3, #17
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	091b      	lsrs	r3, r3, #4
 800340c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003410:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d004      	beq.n	8003422 <HCD_RXQLVL_IRQHandler+0x46>
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	2b05      	cmp	r3, #5
 800341c:	f000 80a9 	beq.w	8003572 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003420:	e0aa      	b.n	8003578 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80a6 	beq.w	8003576 <HCD_RXQLVL_IRQHandler+0x19a>
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	3344      	adds	r3, #68	; 0x44
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 809b 	beq.w	8003576 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	212c      	movs	r1, #44	; 0x2c
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	4413      	add	r3, r2
 800344c:	3350      	adds	r3, #80	; 0x50
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	441a      	add	r2, r3
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	202c      	movs	r0, #44	; 0x2c
 800345a:	fb00 f303 	mul.w	r3, r0, r3
 800345e:	440b      	add	r3, r1
 8003460:	334c      	adds	r3, #76	; 0x4c
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d87a      	bhi.n	800355e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	212c      	movs	r1, #44	; 0x2c
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	4413      	add	r3, r2
 8003478:	3344      	adds	r3, #68	; 0x44
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	b292      	uxth	r2, r2
 8003480:	4619      	mov	r1, r3
 8003482:	f003 fcc5 	bl	8006e10 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	212c      	movs	r1, #44	; 0x2c
 800348c:	fb01 f303 	mul.w	r3, r1, r3
 8003490:	4413      	add	r3, r2
 8003492:	3344      	adds	r3, #68	; 0x44
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	441a      	add	r2, r3
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	202c      	movs	r0, #44	; 0x2c
 80034a0:	fb00 f303 	mul.w	r3, r0, r3
 80034a4:	440b      	add	r3, r1
 80034a6:	3344      	adds	r3, #68	; 0x44
 80034a8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	212c      	movs	r1, #44	; 0x2c
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	4413      	add	r3, r2
 80034b6:	3350      	adds	r3, #80	; 0x50
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	441a      	add	r2, r3
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	202c      	movs	r0, #44	; 0x2c
 80034c4:	fb00 f303 	mul.w	r3, r0, r3
 80034c8:	440b      	add	r3, r1
 80034ca:	3350      	adds	r3, #80	; 0x50
 80034cc:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	0cdb      	lsrs	r3, r3, #19
 80034de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034e2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	212c      	movs	r1, #44	; 0x2c
 80034ea:	fb01 f303 	mul.w	r3, r1, r3
 80034ee:	4413      	add	r3, r2
 80034f0:	3340      	adds	r3, #64	; 0x40
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d13c      	bne.n	8003576 <HCD_RXQLVL_IRQHandler+0x19a>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d039      	beq.n	8003576 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	4413      	add	r3, r2
 800350a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003518:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003520:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	4413      	add	r3, r2
 800352a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352e:	461a      	mov	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	212c      	movs	r1, #44	; 0x2c
 800353a:	fb01 f303 	mul.w	r3, r1, r3
 800353e:	4413      	add	r3, r2
 8003540:	3354      	adds	r3, #84	; 0x54
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	f083 0301 	eor.w	r3, r3, #1
 8003548:	b2d8      	uxtb	r0, r3
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	212c      	movs	r1, #44	; 0x2c
 8003550:	fb01 f303 	mul.w	r3, r1, r3
 8003554:	4413      	add	r3, r2
 8003556:	3354      	adds	r3, #84	; 0x54
 8003558:	4602      	mov	r2, r0
 800355a:	701a      	strb	r2, [r3, #0]
      break;
 800355c:	e00b      	b.n	8003576 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	212c      	movs	r1, #44	; 0x2c
 8003564:	fb01 f303 	mul.w	r3, r1, r3
 8003568:	4413      	add	r3, r2
 800356a:	3360      	adds	r3, #96	; 0x60
 800356c:	2204      	movs	r2, #4
 800356e:	701a      	strb	r2, [r3, #0]
      break;
 8003570:	e001      	b.n	8003576 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003572:	bf00      	nop
 8003574:	e000      	b.n	8003578 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003576:	bf00      	nop
  }
}
 8003578:	bf00      	nop
 800357a:	3728      	adds	r7, #40	; 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80035ac:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d10b      	bne.n	80035d0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d102      	bne.n	80035c8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f006 f984 	bl	80098d0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f043 0302 	orr.w	r3, r3, #2
 80035ce:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b08      	cmp	r3, #8
 80035d8:	d132      	bne.n	8003640 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f043 0308 	orr.w	r3, r3, #8
 80035e0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d126      	bne.n	800363a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d113      	bne.n	800361c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80035fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035fe:	d106      	bne.n	800360e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2102      	movs	r1, #2
 8003606:	4618      	mov	r0, r3
 8003608:	f003 fd32 	bl	8007070 <USB_InitFSLSPClkSel>
 800360c:	e011      	b.n	8003632 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2101      	movs	r1, #1
 8003614:	4618      	mov	r0, r3
 8003616:	f003 fd2b 	bl	8007070 <USB_InitFSLSPClkSel>
 800361a:	e00a      	b.n	8003632 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d106      	bne.n	8003632 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800362a:	461a      	mov	r2, r3
 800362c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003630:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f006 f976 	bl	8009924 <HAL_HCD_PortEnabled_Callback>
 8003638:	e002      	b.n	8003640 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f006 f980 	bl	8009940 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b20      	cmp	r3, #32
 8003648:	d103      	bne.n	8003652 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f043 0320 	orr.w	r3, r3, #32
 8003650:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003658:	461a      	mov	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	6013      	str	r3, [r2, #0]
}
 800365e:	bf00      	nop
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b082      	sub	sp, #8
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e081      	b.n	800377c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d106      	bne.n	8003692 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7fd fdf3 	bl	8001278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2224      	movs	r2, #36	; 0x24
 8003696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0201 	bic.w	r2, r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d107      	bne.n	80036e0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036dc:	609a      	str	r2, [r3, #8]
 80036de:	e006      	b.n	80036ee <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80036ec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d104      	bne.n	8003700 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036fe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6812      	ldr	r2, [r2, #0]
 800370a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800370e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003712:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003722:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69d9      	ldr	r1, [r3, #28]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1a      	ldr	r2, [r3, #32]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0201 	orr.w	r2, r2, #1
 800375c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b20      	cmp	r3, #32
 8003798:	d138      	bne.n	800380c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e032      	b.n	800380e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2224      	movs	r2, #36	; 0x24
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6819      	ldr	r1, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	e000      	b.n	800380e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800380c:	2302      	movs	r3, #2
  }
}
 800380e:	4618      	mov	r0, r3
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800381a:	b480      	push	{r7}
 800381c:	b085      	sub	sp, #20
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b20      	cmp	r3, #32
 800382e:	d139      	bne.n	80038a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800383a:	2302      	movs	r3, #2
 800383c:	e033      	b.n	80038a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2224      	movs	r2, #36	; 0x24
 800384a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0201 	bic.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800386c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	021b      	lsls	r3, r3, #8
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	e000      	b.n	80038a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038a4:	2302      	movs	r3, #2
  }
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e0af      	b.n	8003a26 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd fd2a 	bl	8001334 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	e00a      	b.n	8003914 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	3304      	adds	r3, #4
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	2200      	movs	r2, #0
 800390c:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	3301      	adds	r3, #1
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2b0f      	cmp	r3, #15
 8003918:	d9f1      	bls.n	80038fe <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0204 	orr.w	r2, r2, #4
 8003928:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	4b3f      	ldr	r3, [pc, #252]	; (8003a30 <HAL_LCD_Init+0x17c>)
 8003932:	4013      	ands	r3, r2
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6851      	ldr	r1, [r2, #4]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6892      	ldr	r2, [r2, #8]
 800393c:	4311      	orrs	r1, r2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003942:	4311      	orrs	r1, r2
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003948:	4311      	orrs	r1, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	69d2      	ldr	r2, [r2, #28]
 800394e:	4311      	orrs	r1, r2
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6a12      	ldr	r2, [r2, #32]
 8003954:	4311      	orrs	r1, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6992      	ldr	r2, [r2, #24]
 800395a:	4311      	orrs	r1, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003960:	4311      	orrs	r1, r2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6812      	ldr	r2, [r2, #0]
 8003966:	430b      	orrs	r3, r1
 8003968:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f862 	bl	8003a34 <LCD_WaitForSynchro>
 8003970:	4603      	mov	r3, r0
 8003972:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8003974:	7cfb      	ldrb	r3, [r7, #19]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_LCD_Init+0xca>
  {
    return status;
 800397a:	7cfb      	ldrb	r3, [r7, #19]
 800397c:	e053      	b.n	8003a26 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	431a      	orrs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0201 	orr.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80039b6:	f7fd ffbb 	bl	8001930 <HAL_GetTick>
 80039ba:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80039bc:	e00c      	b.n	80039d8 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80039be:	f7fd ffb7 	bl	8001930 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039cc:	d904      	bls.n	80039d8 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2208      	movs	r2, #8
 80039d2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e026      	b.n	8003a26 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d1eb      	bne.n	80039be <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 80039e6:	f7fd ffa3 	bl	8001930 <HAL_GetTick>
 80039ea:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80039ec:	e00c      	b.n	8003a08 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80039ee:	f7fd ff9f 	bl	8001930 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039fc:	d904      	bls.n	8003a08 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2210      	movs	r2, #16
 8003a02:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e00e      	b.n	8003a26 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b10      	cmp	r3, #16
 8003a14:	d1eb      	bne.n	80039ee <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8003a24:	7cfb      	ldrb	r3, [r7, #19]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	fc00000e 	.word	0xfc00000e

08003a34 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003a3c:	f7fd ff78 	bl	8001930 <HAL_GetTick>
 8003a40:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8003a42:	e00c      	b.n	8003a5e <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8003a44:	f7fd ff74 	bl	8001930 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a52:	d904      	bls.n	8003a5e <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e007      	b.n	8003a6e <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d1eb      	bne.n	8003a44 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a7c:	4b04      	ldr	r3, [pc, #16]	; (8003a90 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40007000 	.word	0x40007000

08003a94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aa2:	d130      	bne.n	8003b06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aa4:	4b23      	ldr	r3, [pc, #140]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ab0:	d038      	beq.n	8003b24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ab2:	4b20      	ldr	r3, [pc, #128]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003aba:	4a1e      	ldr	r2, [pc, #120]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003abc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ac0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ac2:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2232      	movs	r2, #50	; 0x32
 8003ac8:	fb02 f303 	mul.w	r3, r2, r3
 8003acc:	4a1b      	ldr	r2, [pc, #108]	; (8003b3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	0c9b      	lsrs	r3, r3, #18
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ad8:	e002      	b.n	8003ae0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ae0:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aec:	d102      	bne.n	8003af4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1f2      	bne.n	8003ada <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003af4:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b00:	d110      	bne.n	8003b24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e00f      	b.n	8003b26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b12:	d007      	beq.n	8003b24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b14:	4b07      	ldr	r3, [pc, #28]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b1c:	4a05      	ldr	r2, [pc, #20]	; (8003b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40007000 	.word	0x40007000
 8003b38:	20000000 	.word	0x20000000
 8003b3c:	431bde83 	.word	0x431bde83

08003b40 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	4a04      	ldr	r2, [pc, #16]	; (8003b5c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b4e:	6053      	str	r3, [r2, #4]
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40007000 	.word	0x40007000

08003b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e3ca      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b72:	4b97      	ldr	r3, [pc, #604]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 030c 	and.w	r3, r3, #12
 8003b7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b7c:	4b94      	ldr	r3, [pc, #592]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 80e4 	beq.w	8003d5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d007      	beq.n	8003baa <HAL_RCC_OscConfig+0x4a>
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b0c      	cmp	r3, #12
 8003b9e:	f040 808b 	bne.w	8003cb8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	f040 8087 	bne.w	8003cb8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003baa:	4b89      	ldr	r3, [pc, #548]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x62>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e3a2      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1a      	ldr	r2, [r3, #32]
 8003bc6:	4b82      	ldr	r3, [pc, #520]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d004      	beq.n	8003bdc <HAL_RCC_OscConfig+0x7c>
 8003bd2:	4b7f      	ldr	r3, [pc, #508]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bda:	e005      	b.n	8003be8 <HAL_RCC_OscConfig+0x88>
 8003bdc:	4b7c      	ldr	r3, [pc, #496]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be2:	091b      	lsrs	r3, r3, #4
 8003be4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d223      	bcs.n	8003c34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fd55 	bl	80046a0 <RCC_SetFlashLatencyFromMSIRange>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e383      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c00:	4b73      	ldr	r3, [pc, #460]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a72      	ldr	r2, [pc, #456]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c06:	f043 0308 	orr.w	r3, r3, #8
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	4b70      	ldr	r3, [pc, #448]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	496d      	ldr	r1, [pc, #436]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c1e:	4b6c      	ldr	r3, [pc, #432]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	021b      	lsls	r3, r3, #8
 8003c2c:	4968      	ldr	r1, [pc, #416]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	604b      	str	r3, [r1, #4]
 8003c32:	e025      	b.n	8003c80 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c34:	4b66      	ldr	r3, [pc, #408]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a65      	ldr	r2, [pc, #404]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c3a:	f043 0308 	orr.w	r3, r3, #8
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	4b63      	ldr	r3, [pc, #396]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	4960      	ldr	r1, [pc, #384]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c52:	4b5f      	ldr	r3, [pc, #380]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	021b      	lsls	r3, r3, #8
 8003c60:	495b      	ldr	r1, [pc, #364]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d109      	bne.n	8003c80 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fd15 	bl	80046a0 <RCC_SetFlashLatencyFromMSIRange>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e343      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c80:	f000 fc4a 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 8003c84:	4602      	mov	r2, r0
 8003c86:	4b52      	ldr	r3, [pc, #328]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	091b      	lsrs	r3, r3, #4
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	4950      	ldr	r1, [pc, #320]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003c92:	5ccb      	ldrb	r3, [r1, r3]
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9c:	4a4e      	ldr	r2, [pc, #312]	; (8003dd8 <HAL_RCC_OscConfig+0x278>)
 8003c9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ca0:	4b4e      	ldr	r3, [pc, #312]	; (8003ddc <HAL_RCC_OscConfig+0x27c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fd fdf3 	bl	8001890 <HAL_InitTick>
 8003caa:	4603      	mov	r3, r0
 8003cac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d052      	beq.n	8003d5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
 8003cb6:	e327      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d032      	beq.n	8003d26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cc0:	4b43      	ldr	r3, [pc, #268]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a42      	ldr	r2, [pc, #264]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ccc:	f7fd fe30 	bl	8001930 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cd4:	f7fd fe2c 	bl	8001930 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e310      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ce6:	4b3a      	ldr	r3, [pc, #232]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cf2:	4b37      	ldr	r3, [pc, #220]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a36      	ldr	r2, [pc, #216]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003cf8:	f043 0308 	orr.w	r3, r3, #8
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	4b34      	ldr	r3, [pc, #208]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	4931      	ldr	r1, [pc, #196]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d10:	4b2f      	ldr	r3, [pc, #188]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	492c      	ldr	r1, [pc, #176]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
 8003d24:	e01a      	b.n	8003d5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d26:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a29      	ldr	r2, [pc, #164]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003d2c:	f023 0301 	bic.w	r3, r3, #1
 8003d30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d32:	f7fd fdfd 	bl	8001930 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d3a:	f7fd fdf9 	bl	8001930 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e2dd      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d4c:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1f0      	bne.n	8003d3a <HAL_RCC_OscConfig+0x1da>
 8003d58:	e000      	b.n	8003d5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d074      	beq.n	8003e52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d005      	beq.n	8003d7a <HAL_RCC_OscConfig+0x21a>
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b0c      	cmp	r3, #12
 8003d72:	d10e      	bne.n	8003d92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	2b03      	cmp	r3, #3
 8003d78:	d10b      	bne.n	8003d92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7a:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d064      	beq.n	8003e50 <HAL_RCC_OscConfig+0x2f0>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d160      	bne.n	8003e50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e2ba      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d9a:	d106      	bne.n	8003daa <HAL_RCC_OscConfig+0x24a>
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0b      	ldr	r2, [pc, #44]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	e026      	b.n	8003df8 <HAL_RCC_OscConfig+0x298>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003db2:	d115      	bne.n	8003de0 <HAL_RCC_OscConfig+0x280>
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a05      	ldr	r2, [pc, #20]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003dba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	4b03      	ldr	r3, [pc, #12]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a02      	ldr	r2, [pc, #8]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	e014      	b.n	8003df8 <HAL_RCC_OscConfig+0x298>
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	08009fe0 	.word	0x08009fe0
 8003dd8:	20000000 	.word	0x20000000
 8003ddc:	20000004 	.word	0x20000004
 8003de0:	4ba0      	ldr	r3, [pc, #640]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a9f      	ldr	r2, [pc, #636]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	4b9d      	ldr	r3, [pc, #628]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a9c      	ldr	r2, [pc, #624]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d013      	beq.n	8003e28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fd fd96 	bl	8001930 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e08:	f7fd fd92 	bl	8001930 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b64      	cmp	r3, #100	; 0x64
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e276      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e1a:	4b92      	ldr	r3, [pc, #584]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x2a8>
 8003e26:	e014      	b.n	8003e52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7fd fd82 	bl	8001930 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e30:	f7fd fd7e 	bl	8001930 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b64      	cmp	r3, #100	; 0x64
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e262      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e42:	4b88      	ldr	r3, [pc, #544]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x2d0>
 8003e4e:	e000      	b.n	8003e52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d060      	beq.n	8003f20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d005      	beq.n	8003e70 <HAL_RCC_OscConfig+0x310>
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b0c      	cmp	r3, #12
 8003e68:	d119      	bne.n	8003e9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d116      	bne.n	8003e9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e70:	4b7c      	ldr	r3, [pc, #496]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <HAL_RCC_OscConfig+0x328>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e23f      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e88:	4b76      	ldr	r3, [pc, #472]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	061b      	lsls	r3, r3, #24
 8003e96:	4973      	ldr	r1, [pc, #460]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e9c:	e040      	b.n	8003f20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d023      	beq.n	8003eee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea6:	4b6f      	ldr	r3, [pc, #444]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a6e      	ldr	r2, [pc, #440]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb2:	f7fd fd3d 	bl	8001930 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eba:	f7fd fd39 	bl	8001930 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e21d      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ecc:	4b65      	ldr	r3, [pc, #404]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed8:	4b62      	ldr	r3, [pc, #392]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	061b      	lsls	r3, r3, #24
 8003ee6:	495f      	ldr	r1, [pc, #380]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	604b      	str	r3, [r1, #4]
 8003eec:	e018      	b.n	8003f20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eee:	4b5d      	ldr	r3, [pc, #372]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a5c      	ldr	r2, [pc, #368]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efa:	f7fd fd19 	bl	8001930 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f02:	f7fd fd15 	bl	8001930 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e1f9      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f14:	4b53      	ldr	r3, [pc, #332]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1f0      	bne.n	8003f02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d03c      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d01c      	beq.n	8003f6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f34:	4b4b      	ldr	r3, [pc, #300]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f3a:	4a4a      	ldr	r2, [pc, #296]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f44:	f7fd fcf4 	bl	8001930 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f4c:	f7fd fcf0 	bl	8001930 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e1d4      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f5e:	4b41      	ldr	r3, [pc, #260]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0ef      	beq.n	8003f4c <HAL_RCC_OscConfig+0x3ec>
 8003f6c:	e01b      	b.n	8003fa6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f6e:	4b3d      	ldr	r3, [pc, #244]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f74:	4a3b      	ldr	r2, [pc, #236]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003f76:	f023 0301 	bic.w	r3, r3, #1
 8003f7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7e:	f7fd fcd7 	bl	8001930 <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f86:	f7fd fcd3 	bl	8001930 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e1b7      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f98:	4b32      	ldr	r3, [pc, #200]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1ef      	bne.n	8003f86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 80a6 	beq.w	8004100 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fb8:	4b2a      	ldr	r3, [pc, #168]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10d      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc4:	4b27      	ldr	r3, [pc, #156]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc8:	4a26      	ldr	r2, [pc, #152]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fce:	6593      	str	r3, [r2, #88]	; 0x58
 8003fd0:	4b24      	ldr	r3, [pc, #144]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fe0:	4b21      	ldr	r3, [pc, #132]	; (8004068 <HAL_RCC_OscConfig+0x508>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d118      	bne.n	800401e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fec:	4b1e      	ldr	r3, [pc, #120]	; (8004068 <HAL_RCC_OscConfig+0x508>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a1d      	ldr	r2, [pc, #116]	; (8004068 <HAL_RCC_OscConfig+0x508>)
 8003ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff8:	f7fd fc9a 	bl	8001930 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004000:	f7fd fc96 	bl	8001930 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e17a      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004012:	4b15      	ldr	r3, [pc, #84]	; (8004068 <HAL_RCC_OscConfig+0x508>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d108      	bne.n	8004038 <HAL_RCC_OscConfig+0x4d8>
 8004026:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402c:	4a0d      	ldr	r2, [pc, #52]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004036:	e029      	b.n	800408c <HAL_RCC_OscConfig+0x52c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b05      	cmp	r3, #5
 800403e:	d115      	bne.n	800406c <HAL_RCC_OscConfig+0x50c>
 8004040:	4b08      	ldr	r3, [pc, #32]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004046:	4a07      	ldr	r2, [pc, #28]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8004048:	f043 0304 	orr.w	r3, r3, #4
 800404c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004050:	4b04      	ldr	r3, [pc, #16]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004056:	4a03      	ldr	r2, [pc, #12]	; (8004064 <HAL_RCC_OscConfig+0x504>)
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004060:	e014      	b.n	800408c <HAL_RCC_OscConfig+0x52c>
 8004062:	bf00      	nop
 8004064:	40021000 	.word	0x40021000
 8004068:	40007000 	.word	0x40007000
 800406c:	4b9c      	ldr	r3, [pc, #624]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	4a9b      	ldr	r2, [pc, #620]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 8004074:	f023 0301 	bic.w	r3, r3, #1
 8004078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800407c:	4b98      	ldr	r3, [pc, #608]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	4a97      	ldr	r2, [pc, #604]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 8004084:	f023 0304 	bic.w	r3, r3, #4
 8004088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d016      	beq.n	80040c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004094:	f7fd fc4c 	bl	8001930 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409c:	f7fd fc48 	bl	8001930 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e12a      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040b2:	4b8b      	ldr	r3, [pc, #556]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 80040b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0ed      	beq.n	800409c <HAL_RCC_OscConfig+0x53c>
 80040c0:	e015      	b.n	80040ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c2:	f7fd fc35 	bl	8001930 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040c8:	e00a      	b.n	80040e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ca:	f7fd fc31 	bl	8001930 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d8:	4293      	cmp	r3, r2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e113      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040e0:	4b7f      	ldr	r3, [pc, #508]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 80040e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1ed      	bne.n	80040ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040ee:	7ffb      	ldrb	r3, [r7, #31]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d105      	bne.n	8004100 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040f4:	4b7a      	ldr	r3, [pc, #488]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f8:	4a79      	ldr	r2, [pc, #484]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 80040fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 80fe 	beq.w	8004306 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410e:	2b02      	cmp	r3, #2
 8004110:	f040 80d0 	bne.w	80042b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004114:	4b72      	ldr	r3, [pc, #456]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f003 0203 	and.w	r2, r3, #3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	429a      	cmp	r2, r3
 8004126:	d130      	bne.n	800418a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	3b01      	subs	r3, #1
 8004134:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004136:	429a      	cmp	r2, r3
 8004138:	d127      	bne.n	800418a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004144:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004146:	429a      	cmp	r2, r3
 8004148:	d11f      	bne.n	800418a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004154:	2a07      	cmp	r2, #7
 8004156:	bf14      	ite	ne
 8004158:	2201      	movne	r2, #1
 800415a:	2200      	moveq	r2, #0
 800415c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800415e:	4293      	cmp	r3, r2
 8004160:	d113      	bne.n	800418a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416c:	085b      	lsrs	r3, r3, #1
 800416e:	3b01      	subs	r3, #1
 8004170:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004172:	429a      	cmp	r2, r3
 8004174:	d109      	bne.n	800418a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	085b      	lsrs	r3, r3, #1
 8004182:	3b01      	subs	r3, #1
 8004184:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004186:	429a      	cmp	r2, r3
 8004188:	d06e      	beq.n	8004268 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b0c      	cmp	r3, #12
 800418e:	d069      	beq.n	8004264 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004190:	4b53      	ldr	r3, [pc, #332]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d105      	bne.n	80041a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800419c:	4b50      	ldr	r3, [pc, #320]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e0ad      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041ac:	4b4c      	ldr	r3, [pc, #304]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a4b      	ldr	r2, [pc, #300]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 80041b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041b8:	f7fd fbba 	bl	8001930 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c0:	f7fd fbb6 	bl	8001930 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e09a      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041d2:	4b43      	ldr	r3, [pc, #268]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041de:	4b40      	ldr	r3, [pc, #256]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	4b40      	ldr	r3, [pc, #256]	; (80042e4 <HAL_RCC_OscConfig+0x784>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041ee:	3a01      	subs	r2, #1
 80041f0:	0112      	lsls	r2, r2, #4
 80041f2:	4311      	orrs	r1, r2
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041f8:	0212      	lsls	r2, r2, #8
 80041fa:	4311      	orrs	r1, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004200:	0852      	lsrs	r2, r2, #1
 8004202:	3a01      	subs	r2, #1
 8004204:	0552      	lsls	r2, r2, #21
 8004206:	4311      	orrs	r1, r2
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800420c:	0852      	lsrs	r2, r2, #1
 800420e:	3a01      	subs	r2, #1
 8004210:	0652      	lsls	r2, r2, #25
 8004212:	4311      	orrs	r1, r2
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004218:	0912      	lsrs	r2, r2, #4
 800421a:	0452      	lsls	r2, r2, #17
 800421c:	430a      	orrs	r2, r1
 800421e:	4930      	ldr	r1, [pc, #192]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 8004220:	4313      	orrs	r3, r2
 8004222:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004224:	4b2e      	ldr	r3, [pc, #184]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a2d      	ldr	r2, [pc, #180]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 800422a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800422e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004230:	4b2b      	ldr	r3, [pc, #172]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	4a2a      	ldr	r2, [pc, #168]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 8004236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800423a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800423c:	f7fd fb78 	bl	8001930 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004244:	f7fd fb74 	bl	8001930 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e058      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004256:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004262:	e050      	b.n	8004306 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e04f      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004268:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d148      	bne.n	8004306 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004274:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a19      	ldr	r2, [pc, #100]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 800427a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800427e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004280:	4b17      	ldr	r3, [pc, #92]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4a16      	ldr	r2, [pc, #88]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 8004286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800428a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800428c:	f7fd fb50 	bl	8001930 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004294:	f7fd fb4c 	bl	8001930 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e030      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a6:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0x734>
 80042b2:	e028      	b.n	8004306 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2b0c      	cmp	r3, #12
 80042b8:	d023      	beq.n	8004302 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ba:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a08      	ldr	r2, [pc, #32]	; (80042e0 <HAL_RCC_OscConfig+0x780>)
 80042c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c6:	f7fd fb33 	bl	8001930 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042cc:	e00c      	b.n	80042e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ce:	f7fd fb2f 	bl	8001930 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d905      	bls.n	80042e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e013      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
 80042e0:	40021000 	.word	0x40021000
 80042e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042e8:	4b09      	ldr	r3, [pc, #36]	; (8004310 <HAL_RCC_OscConfig+0x7b0>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1ec      	bne.n	80042ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <HAL_RCC_OscConfig+0x7b0>)
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	4905      	ldr	r1, [pc, #20]	; (8004310 <HAL_RCC_OscConfig+0x7b0>)
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <HAL_RCC_OscConfig+0x7b4>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	60cb      	str	r3, [r1, #12]
 8004300:	e001      	b.n	8004306 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3720      	adds	r7, #32
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40021000 	.word	0x40021000
 8004314:	feeefffc 	.word	0xfeeefffc

08004318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0e7      	b.n	80044fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800432c:	4b75      	ldr	r3, [pc, #468]	; (8004504 <HAL_RCC_ClockConfig+0x1ec>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d910      	bls.n	800435c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433a:	4b72      	ldr	r3, [pc, #456]	; (8004504 <HAL_RCC_ClockConfig+0x1ec>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 0207 	bic.w	r2, r3, #7
 8004342:	4970      	ldr	r1, [pc, #448]	; (8004504 <HAL_RCC_ClockConfig+0x1ec>)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	4313      	orrs	r3, r2
 8004348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800434a:	4b6e      	ldr	r3, [pc, #440]	; (8004504 <HAL_RCC_ClockConfig+0x1ec>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d001      	beq.n	800435c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0cf      	b.n	80044fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d010      	beq.n	800438a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	4b66      	ldr	r3, [pc, #408]	; (8004508 <HAL_RCC_ClockConfig+0x1f0>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004374:	429a      	cmp	r2, r3
 8004376:	d908      	bls.n	800438a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004378:	4b63      	ldr	r3, [pc, #396]	; (8004508 <HAL_RCC_ClockConfig+0x1f0>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	4960      	ldr	r1, [pc, #384]	; (8004508 <HAL_RCC_ClockConfig+0x1f0>)
 8004386:	4313      	orrs	r3, r2
 8004388:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d04c      	beq.n	8004430 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b03      	cmp	r3, #3
 800439c:	d107      	bne.n	80043ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439e:	4b5a      	ldr	r3, [pc, #360]	; (8004508 <HAL_RCC_ClockConfig+0x1f0>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d121      	bne.n	80043ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e0a6      	b.n	80044fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d107      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043b6:	4b54      	ldr	r3, [pc, #336]	; (8004508 <HAL_RCC_ClockConfig+0x1f0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d115      	bne.n	80043ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e09a      	b.n	80044fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d107      	bne.n	80043de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043ce:	4b4e      	ldr	r3, [pc, #312]	; (8004508 <HAL_RCC_ClockConfig+0x1f0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d109      	bne.n	80043ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e08e      	b.n	80044fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043de:	4b4a      	ldr	r3, [pc, #296]	; (8004508 <HAL_RCC_ClockConfig+0x1f0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e086      	b.n	80044fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043ee:	4b46      	ldr	r3, [pc, #280]	; (8004508 <HAL_RCC_ClockConfig+0x1f0>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f023 0203 	bic.w	r2, r3, #3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	4943      	ldr	r1, [pc, #268]	; (8004508 <HAL_RCC_ClockConfig+0x1f0>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004400:	f7fd fa96 	bl	8001930 <HAL_GetTick>
 8004404:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004406:	e00a      	b.n	800441e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004408:	f7fd fa92 	bl	8001930 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	f241 3288 	movw	r2, #5000	; 0x1388
 8004416:	4293      	cmp	r3, r2
 8004418:	d901      	bls.n	800441e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e06e      	b.n	80044fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441e:	4b3a      	ldr	r3, [pc, #232]	; (8004508 <HAL_RCC_ClockConfig+0x1f0>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 020c 	and.w	r2, r3, #12
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	429a      	cmp	r2, r3
 800442e:	d1eb      	bne.n	8004408 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d010      	beq.n	800445e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	4b31      	ldr	r3, [pc, #196]	; (8004508 <HAL_RCC_ClockConfig+0x1f0>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004448:	429a      	cmp	r2, r3
 800444a:	d208      	bcs.n	800445e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800444c:	4b2e      	ldr	r3, [pc, #184]	; (8004508 <HAL_RCC_ClockConfig+0x1f0>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	492b      	ldr	r1, [pc, #172]	; (8004508 <HAL_RCC_ClockConfig+0x1f0>)
 800445a:	4313      	orrs	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800445e:	4b29      	ldr	r3, [pc, #164]	; (8004504 <HAL_RCC_ClockConfig+0x1ec>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d210      	bcs.n	800448e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446c:	4b25      	ldr	r3, [pc, #148]	; (8004504 <HAL_RCC_ClockConfig+0x1ec>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f023 0207 	bic.w	r2, r3, #7
 8004474:	4923      	ldr	r1, [pc, #140]	; (8004504 <HAL_RCC_ClockConfig+0x1ec>)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	4313      	orrs	r3, r2
 800447a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447c:	4b21      	ldr	r3, [pc, #132]	; (8004504 <HAL_RCC_ClockConfig+0x1ec>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d001      	beq.n	800448e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e036      	b.n	80044fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b00      	cmp	r3, #0
 8004498:	d008      	beq.n	80044ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800449a:	4b1b      	ldr	r3, [pc, #108]	; (8004508 <HAL_RCC_ClockConfig+0x1f0>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	4918      	ldr	r1, [pc, #96]	; (8004508 <HAL_RCC_ClockConfig+0x1f0>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d009      	beq.n	80044cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b8:	4b13      	ldr	r3, [pc, #76]	; (8004508 <HAL_RCC_ClockConfig+0x1f0>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	4910      	ldr	r1, [pc, #64]	; (8004508 <HAL_RCC_ClockConfig+0x1f0>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044cc:	f000 f824 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 80044d0:	4602      	mov	r2, r0
 80044d2:	4b0d      	ldr	r3, [pc, #52]	; (8004508 <HAL_RCC_ClockConfig+0x1f0>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	091b      	lsrs	r3, r3, #4
 80044d8:	f003 030f 	and.w	r3, r3, #15
 80044dc:	490b      	ldr	r1, [pc, #44]	; (800450c <HAL_RCC_ClockConfig+0x1f4>)
 80044de:	5ccb      	ldrb	r3, [r1, r3]
 80044e0:	f003 031f 	and.w	r3, r3, #31
 80044e4:	fa22 f303 	lsr.w	r3, r2, r3
 80044e8:	4a09      	ldr	r2, [pc, #36]	; (8004510 <HAL_RCC_ClockConfig+0x1f8>)
 80044ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044ec:	4b09      	ldr	r3, [pc, #36]	; (8004514 <HAL_RCC_ClockConfig+0x1fc>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fd f9cd 	bl	8001890 <HAL_InitTick>
 80044f6:	4603      	mov	r3, r0
 80044f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80044fa:	7afb      	ldrb	r3, [r7, #11]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40022000 	.word	0x40022000
 8004508:	40021000 	.word	0x40021000
 800450c:	08009fe0 	.word	0x08009fe0
 8004510:	20000000 	.word	0x20000000
 8004514:	20000004 	.word	0x20000004

08004518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004518:	b480      	push	{r7}
 800451a:	b089      	sub	sp, #36	; 0x24
 800451c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	2300      	movs	r3, #0
 8004524:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004526:	4b3e      	ldr	r3, [pc, #248]	; (8004620 <HAL_RCC_GetSysClockFreq+0x108>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 030c 	and.w	r3, r3, #12
 800452e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004530:	4b3b      	ldr	r3, [pc, #236]	; (8004620 <HAL_RCC_GetSysClockFreq+0x108>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0303 	and.w	r3, r3, #3
 8004538:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_RCC_GetSysClockFreq+0x34>
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b0c      	cmp	r3, #12
 8004544:	d121      	bne.n	800458a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d11e      	bne.n	800458a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800454c:	4b34      	ldr	r3, [pc, #208]	; (8004620 <HAL_RCC_GetSysClockFreq+0x108>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d107      	bne.n	8004568 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004558:	4b31      	ldr	r3, [pc, #196]	; (8004620 <HAL_RCC_GetSysClockFreq+0x108>)
 800455a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800455e:	0a1b      	lsrs	r3, r3, #8
 8004560:	f003 030f 	and.w	r3, r3, #15
 8004564:	61fb      	str	r3, [r7, #28]
 8004566:	e005      	b.n	8004574 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004568:	4b2d      	ldr	r3, [pc, #180]	; (8004620 <HAL_RCC_GetSysClockFreq+0x108>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004574:	4a2b      	ldr	r2, [pc, #172]	; (8004624 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800457c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10d      	bne.n	80045a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004588:	e00a      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b04      	cmp	r3, #4
 800458e:	d102      	bne.n	8004596 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004590:	4b25      	ldr	r3, [pc, #148]	; (8004628 <HAL_RCC_GetSysClockFreq+0x110>)
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	e004      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b08      	cmp	r3, #8
 800459a:	d101      	bne.n	80045a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800459c:	4b23      	ldr	r3, [pc, #140]	; (800462c <HAL_RCC_GetSysClockFreq+0x114>)
 800459e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	2b0c      	cmp	r3, #12
 80045a4:	d134      	bne.n	8004610 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045a6:	4b1e      	ldr	r3, [pc, #120]	; (8004620 <HAL_RCC_GetSysClockFreq+0x108>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d003      	beq.n	80045be <HAL_RCC_GetSysClockFreq+0xa6>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	d003      	beq.n	80045c4 <HAL_RCC_GetSysClockFreq+0xac>
 80045bc:	e005      	b.n	80045ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80045be:	4b1a      	ldr	r3, [pc, #104]	; (8004628 <HAL_RCC_GetSysClockFreq+0x110>)
 80045c0:	617b      	str	r3, [r7, #20]
      break;
 80045c2:	e005      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80045c4:	4b19      	ldr	r3, [pc, #100]	; (800462c <HAL_RCC_GetSysClockFreq+0x114>)
 80045c6:	617b      	str	r3, [r7, #20]
      break;
 80045c8:	e002      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	617b      	str	r3, [r7, #20]
      break;
 80045ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045d0:	4b13      	ldr	r3, [pc, #76]	; (8004620 <HAL_RCC_GetSysClockFreq+0x108>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	091b      	lsrs	r3, r3, #4
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	3301      	adds	r3, #1
 80045dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045de:	4b10      	ldr	r3, [pc, #64]	; (8004620 <HAL_RCC_GetSysClockFreq+0x108>)
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	0a1b      	lsrs	r3, r3, #8
 80045e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	fb03 f202 	mul.w	r2, r3, r2
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045f6:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <HAL_RCC_GetSysClockFreq+0x108>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	0e5b      	lsrs	r3, r3, #25
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	3301      	adds	r3, #1
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	fbb2 f3f3 	udiv	r3, r2, r3
 800460e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004610:	69bb      	ldr	r3, [r7, #24]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3724      	adds	r7, #36	; 0x24
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40021000 	.word	0x40021000
 8004624:	08009ff8 	.word	0x08009ff8
 8004628:	00f42400 	.word	0x00f42400
 800462c:	007a1200 	.word	0x007a1200

08004630 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004634:	4b03      	ldr	r3, [pc, #12]	; (8004644 <HAL_RCC_GetHCLKFreq+0x14>)
 8004636:	681b      	ldr	r3, [r3, #0]
}
 8004638:	4618      	mov	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000000 	.word	0x20000000

08004648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800464c:	f7ff fff0 	bl	8004630 <HAL_RCC_GetHCLKFreq>
 8004650:	4602      	mov	r2, r0
 8004652:	4b06      	ldr	r3, [pc, #24]	; (800466c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	0a1b      	lsrs	r3, r3, #8
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	4904      	ldr	r1, [pc, #16]	; (8004670 <HAL_RCC_GetPCLK1Freq+0x28>)
 800465e:	5ccb      	ldrb	r3, [r1, r3]
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004668:	4618      	mov	r0, r3
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40021000 	.word	0x40021000
 8004670:	08009ff0 	.word	0x08009ff0

08004674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004678:	f7ff ffda 	bl	8004630 <HAL_RCC_GetHCLKFreq>
 800467c:	4602      	mov	r2, r0
 800467e:	4b06      	ldr	r3, [pc, #24]	; (8004698 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	0adb      	lsrs	r3, r3, #11
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	4904      	ldr	r1, [pc, #16]	; (800469c <HAL_RCC_GetPCLK2Freq+0x28>)
 800468a:	5ccb      	ldrb	r3, [r1, r3]
 800468c:	f003 031f 	and.w	r3, r3, #31
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004694:	4618      	mov	r0, r3
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40021000 	.word	0x40021000
 800469c:	08009ff0 	.word	0x08009ff0

080046a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80046a8:	2300      	movs	r3, #0
 80046aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80046ac:	4b2a      	ldr	r3, [pc, #168]	; (8004758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80046b8:	f7ff f9de 	bl	8003a78 <HAL_PWREx_GetVoltageRange>
 80046bc:	6178      	str	r0, [r7, #20]
 80046be:	e014      	b.n	80046ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046c0:	4b25      	ldr	r3, [pc, #148]	; (8004758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c4:	4a24      	ldr	r2, [pc, #144]	; (8004758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ca:	6593      	str	r3, [r2, #88]	; 0x58
 80046cc:	4b22      	ldr	r3, [pc, #136]	; (8004758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80046d8:	f7ff f9ce 	bl	8003a78 <HAL_PWREx_GetVoltageRange>
 80046dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80046de:	4b1e      	ldr	r3, [pc, #120]	; (8004758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e2:	4a1d      	ldr	r2, [pc, #116]	; (8004758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f0:	d10b      	bne.n	800470a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b80      	cmp	r3, #128	; 0x80
 80046f6:	d919      	bls.n	800472c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2ba0      	cmp	r3, #160	; 0xa0
 80046fc:	d902      	bls.n	8004704 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046fe:	2302      	movs	r3, #2
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	e013      	b.n	800472c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004704:	2301      	movs	r3, #1
 8004706:	613b      	str	r3, [r7, #16]
 8004708:	e010      	b.n	800472c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b80      	cmp	r3, #128	; 0x80
 800470e:	d902      	bls.n	8004716 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004710:	2303      	movs	r3, #3
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	e00a      	b.n	800472c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b80      	cmp	r3, #128	; 0x80
 800471a:	d102      	bne.n	8004722 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800471c:	2302      	movs	r3, #2
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	e004      	b.n	800472c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b70      	cmp	r3, #112	; 0x70
 8004726:	d101      	bne.n	800472c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004728:	2301      	movs	r3, #1
 800472a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800472c:	4b0b      	ldr	r3, [pc, #44]	; (800475c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f023 0207 	bic.w	r2, r3, #7
 8004734:	4909      	ldr	r1, [pc, #36]	; (800475c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800473c:	4b07      	ldr	r3, [pc, #28]	; (800475c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	429a      	cmp	r2, r3
 8004748:	d001      	beq.n	800474e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3718      	adds	r7, #24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40021000 	.word	0x40021000
 800475c:	40022000 	.word	0x40022000

08004760 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004768:	2300      	movs	r3, #0
 800476a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800476c:	2300      	movs	r3, #0
 800476e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004778:	2b00      	cmp	r3, #0
 800477a:	d041      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004780:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004784:	d02a      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004786:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800478a:	d824      	bhi.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800478c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004790:	d008      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004792:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004796:	d81e      	bhi.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800479c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047a0:	d010      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80047a2:	e018      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047a4:	4b86      	ldr	r3, [pc, #536]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	4a85      	ldr	r2, [pc, #532]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047b0:	e015      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3304      	adds	r3, #4
 80047b6:	2100      	movs	r1, #0
 80047b8:	4618      	mov	r0, r3
 80047ba:	f001 f829 	bl	8005810 <RCCEx_PLLSAI1_Config>
 80047be:	4603      	mov	r3, r0
 80047c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047c2:	e00c      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3320      	adds	r3, #32
 80047c8:	2100      	movs	r1, #0
 80047ca:	4618      	mov	r0, r3
 80047cc:	f001 f914 	bl	80059f8 <RCCEx_PLLSAI2_Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047d4:	e003      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	74fb      	strb	r3, [r7, #19]
      break;
 80047da:	e000      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80047dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047de:	7cfb      	ldrb	r3, [r7, #19]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10b      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047e4:	4b76      	ldr	r3, [pc, #472]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047f2:	4973      	ldr	r1, [pc, #460]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047fa:	e001      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fc:	7cfb      	ldrb	r3, [r7, #19]
 80047fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d041      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004810:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004814:	d02a      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004816:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800481a:	d824      	bhi.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800481c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004820:	d008      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004822:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004826:	d81e      	bhi.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00a      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800482c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004830:	d010      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004832:	e018      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004834:	4b62      	ldr	r3, [pc, #392]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	4a61      	ldr	r2, [pc, #388]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800483a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800483e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004840:	e015      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3304      	adds	r3, #4
 8004846:	2100      	movs	r1, #0
 8004848:	4618      	mov	r0, r3
 800484a:	f000 ffe1 	bl	8005810 <RCCEx_PLLSAI1_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004852:	e00c      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3320      	adds	r3, #32
 8004858:	2100      	movs	r1, #0
 800485a:	4618      	mov	r0, r3
 800485c:	f001 f8cc 	bl	80059f8 <RCCEx_PLLSAI2_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004864:	e003      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	74fb      	strb	r3, [r7, #19]
      break;
 800486a:	e000      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800486c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800486e:	7cfb      	ldrb	r3, [r7, #19]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10b      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004874:	4b52      	ldr	r3, [pc, #328]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004882:	494f      	ldr	r1, [pc, #316]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004884:	4313      	orrs	r3, r2
 8004886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800488a:	e001      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488c:	7cfb      	ldrb	r3, [r7, #19]
 800488e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 80a0 	beq.w	80049de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800489e:	2300      	movs	r3, #0
 80048a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048a2:	4b47      	ldr	r3, [pc, #284]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80048ae:	2301      	movs	r3, #1
 80048b0:	e000      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80048b2:	2300      	movs	r3, #0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00d      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b8:	4b41      	ldr	r3, [pc, #260]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048bc:	4a40      	ldr	r2, [pc, #256]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c2:	6593      	str	r3, [r2, #88]	; 0x58
 80048c4:	4b3e      	ldr	r3, [pc, #248]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048d0:	2301      	movs	r3, #1
 80048d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048d4:	4b3b      	ldr	r3, [pc, #236]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a3a      	ldr	r2, [pc, #232]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048e0:	f7fd f826 	bl	8001930 <HAL_GetTick>
 80048e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048e6:	e009      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e8:	f7fd f822 	bl	8001930 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d902      	bls.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	74fb      	strb	r3, [r7, #19]
        break;
 80048fa:	e005      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048fc:	4b31      	ldr	r3, [pc, #196]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0ef      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004908:	7cfb      	ldrb	r3, [r7, #19]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d15c      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800490e:	4b2c      	ldr	r3, [pc, #176]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004918:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d01f      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	429a      	cmp	r2, r3
 800492a:	d019      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800492c:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004936:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004938:	4b21      	ldr	r3, [pc, #132]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493e:	4a20      	ldr	r2, [pc, #128]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004948:	4b1d      	ldr	r3, [pc, #116]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494e:	4a1c      	ldr	r2, [pc, #112]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004958:	4a19      	ldr	r2, [pc, #100]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d016      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496a:	f7fc ffe1 	bl	8001930 <HAL_GetTick>
 800496e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004970:	e00b      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004972:	f7fc ffdd 	bl	8001930 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004980:	4293      	cmp	r3, r2
 8004982:	d902      	bls.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	74fb      	strb	r3, [r7, #19]
            break;
 8004988:	e006      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800498a:	4b0d      	ldr	r3, [pc, #52]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0ec      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004998:	7cfb      	ldrb	r3, [r7, #19]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10c      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800499e:	4b08      	ldr	r3, [pc, #32]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ae:	4904      	ldr	r1, [pc, #16]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049b6:	e009      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049b8:	7cfb      	ldrb	r3, [r7, #19]
 80049ba:	74bb      	strb	r3, [r7, #18]
 80049bc:	e006      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80049be:	bf00      	nop
 80049c0:	40021000 	.word	0x40021000
 80049c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c8:	7cfb      	ldrb	r3, [r7, #19]
 80049ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049cc:	7c7b      	ldrb	r3, [r7, #17]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d105      	bne.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049d2:	4b9e      	ldr	r3, [pc, #632]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d6:	4a9d      	ldr	r2, [pc, #628]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049ea:	4b98      	ldr	r3, [pc, #608]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f0:	f023 0203 	bic.w	r2, r3, #3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f8:	4994      	ldr	r1, [pc, #592]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a0c:	4b8f      	ldr	r3, [pc, #572]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a12:	f023 020c 	bic.w	r2, r3, #12
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1a:	498c      	ldr	r1, [pc, #560]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0304 	and.w	r3, r3, #4
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a2e:	4b87      	ldr	r3, [pc, #540]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	4983      	ldr	r1, [pc, #524]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0308 	and.w	r3, r3, #8
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a50:	4b7e      	ldr	r3, [pc, #504]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5e:	497b      	ldr	r1, [pc, #492]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0310 	and.w	r3, r3, #16
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a72:	4b76      	ldr	r3, [pc, #472]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a80:	4972      	ldr	r1, [pc, #456]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0320 	and.w	r3, r3, #32
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a94:	4b6d      	ldr	r3, [pc, #436]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa2:	496a      	ldr	r1, [pc, #424]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ab6:	4b65      	ldr	r3, [pc, #404]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac4:	4961      	ldr	r1, [pc, #388]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00a      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ad8:	4b5c      	ldr	r3, [pc, #368]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ade:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae6:	4959      	ldr	r1, [pc, #356]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004afa:	4b54      	ldr	r3, [pc, #336]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b08:	4950      	ldr	r1, [pc, #320]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b1c:	4b4b      	ldr	r3, [pc, #300]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2a:	4948      	ldr	r1, [pc, #288]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b3e:	4b43      	ldr	r3, [pc, #268]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4c:	493f      	ldr	r1, [pc, #252]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d028      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b60:	4b3a      	ldr	r3, [pc, #232]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b6e:	4937      	ldr	r1, [pc, #220]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b7e:	d106      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b80:	4b32      	ldr	r3, [pc, #200]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	4a31      	ldr	r2, [pc, #196]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b8a:	60d3      	str	r3, [r2, #12]
 8004b8c:	e011      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b96:	d10c      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 fe36 	bl	8005810 <RCCEx_PLLSAI1_Config>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ba8:	7cfb      	ldrb	r3, [r7, #19]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004bae:	7cfb      	ldrb	r3, [r7, #19]
 8004bb0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d028      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bbe:	4b23      	ldr	r3, [pc, #140]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bcc:	491f      	ldr	r1, [pc, #124]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bdc:	d106      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bde:	4b1b      	ldr	r3, [pc, #108]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	4a1a      	ldr	r2, [pc, #104]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004be8:	60d3      	str	r3, [r2, #12]
 8004bea:	e011      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bf4:	d10c      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fe07 	bl	8005810 <RCCEx_PLLSAI1_Config>
 8004c02:	4603      	mov	r3, r0
 8004c04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c06:	7cfb      	ldrb	r3, [r7, #19]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004c0c:	7cfb      	ldrb	r3, [r7, #19]
 8004c0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d02b      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c2a:	4908      	ldr	r1, [pc, #32]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c3a:	d109      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c3c:	4b03      	ldr	r3, [pc, #12]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4a02      	ldr	r2, [pc, #8]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c46:	60d3      	str	r3, [r2, #12]
 8004c48:	e014      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004c4a:	bf00      	nop
 8004c4c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c58:	d10c      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	2101      	movs	r1, #1
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 fdd5 	bl	8005810 <RCCEx_PLLSAI1_Config>
 8004c66:	4603      	mov	r3, r0
 8004c68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c6a:	7cfb      	ldrb	r3, [r7, #19]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004c70:	7cfb      	ldrb	r3, [r7, #19]
 8004c72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d02f      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c80:	4b2b      	ldr	r3, [pc, #172]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c8e:	4928      	ldr	r1, [pc, #160]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c9e:	d10d      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	2102      	movs	r1, #2
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fdb2 	bl	8005810 <RCCEx_PLLSAI1_Config>
 8004cac:	4603      	mov	r3, r0
 8004cae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cb0:	7cfb      	ldrb	r3, [r7, #19]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d014      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004cb6:	7cfb      	ldrb	r3, [r7, #19]
 8004cb8:	74bb      	strb	r3, [r7, #18]
 8004cba:	e011      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cc4:	d10c      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3320      	adds	r3, #32
 8004cca:	2102      	movs	r1, #2
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fe93 	bl	80059f8 <RCCEx_PLLSAI2_Config>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cd6:	7cfb      	ldrb	r3, [r7, #19]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004cdc:	7cfb      	ldrb	r3, [r7, #19]
 8004cde:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cec:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cfa:	490d      	ldr	r1, [pc, #52]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00b      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d0e:	4b08      	ldr	r3, [pc, #32]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d1e:	4904      	ldr	r1, [pc, #16]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d26:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40021000 	.word	0x40021000

08004d34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b088      	sub	sp, #32
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d46:	d13e      	bne.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004d48:	4bb2      	ldr	r3, [pc, #712]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d52:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d5a:	d028      	beq.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d62:	f200 8542 	bhi.w	80057ea <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d6c:	d005      	beq.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d74:	d00e      	beq.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004d76:	f000 bd38 	b.w	80057ea <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d7a:	4ba6      	ldr	r3, [pc, #664]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	f040 8532 	bne.w	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8004d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d8e:	61fb      	str	r3, [r7, #28]
      break;
 8004d90:	f000 bd2d 	b.w	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004d94:	4b9f      	ldr	r3, [pc, #636]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	f040 8527 	bne.w	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8004da4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004da8:	61fb      	str	r3, [r7, #28]
      break;
 8004daa:	f000 bd22 	b.w	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004dae:	4b99      	ldr	r3, [pc, #612]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dba:	f040 851c 	bne.w	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8004dbe:	4b96      	ldr	r3, [pc, #600]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8004dc0:	61fb      	str	r3, [r7, #28]
      break;
 8004dc2:	f000 bd18 	b.w	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dc6:	4b93      	ldr	r3, [pc, #588]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d036      	beq.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	d840      	bhi.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d003      	beq.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d020      	beq.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004de8:	e039      	b.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004dea:	4b8a      	ldr	r3, [pc, #552]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d116      	bne.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004df6:	4b87      	ldr	r3, [pc, #540]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0308 	and.w	r3, r3, #8
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004e02:	4b84      	ldr	r3, [pc, #528]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	091b      	lsrs	r3, r3, #4
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	e005      	b.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004e0e:	4b81      	ldr	r3, [pc, #516]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e14:	0a1b      	lsrs	r3, r3, #8
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	4a80      	ldr	r2, [pc, #512]	; (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004e22:	e01f      	b.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	61bb      	str	r3, [r7, #24]
      break;
 8004e28:	e01c      	b.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e2a:	4b7a      	ldr	r3, [pc, #488]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e36:	d102      	bne.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004e38:	4b79      	ldr	r3, [pc, #484]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004e3a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004e3c:	e012      	b.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	61bb      	str	r3, [r7, #24]
      break;
 8004e42:	e00f      	b.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004e44:	4b73      	ldr	r3, [pc, #460]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e50:	d102      	bne.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004e52:	4b74      	ldr	r3, [pc, #464]	; (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004e54:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004e56:	e005      	b.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	61bb      	str	r3, [r7, #24]
      break;
 8004e5c:	e002      	b.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	61bb      	str	r3, [r7, #24]
      break;
 8004e62:	bf00      	nop
    }

    switch(PeriphClk)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e6a:	f000 80dd 	beq.w	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e74:	f200 84c1 	bhi.w	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e7e:	f000 80d3 	beq.w	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e88:	f200 84b7 	bhi.w	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e92:	f000 835f 	beq.w	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e9c:	f200 84ad 	bhi.w	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea6:	f000 847e 	beq.w	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb0:	f200 84a3 	bhi.w	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eba:	f000 82cd 	beq.w	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ec4:	f200 8499 	bhi.w	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ece:	f000 80ab 	beq.w	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed8:	f200 848f 	bhi.w	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee2:	f000 8090 	beq.w	8005006 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eec:	f200 8485 	bhi.w	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef6:	d07f      	beq.n	8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004efe:	f200 847c 	bhi.w	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f08:	f000 8403 	beq.w	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f12:	f200 8472 	bhi.w	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f1c:	f000 83af 	beq.w	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f26:	f200 8468 	bhi.w	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f30:	f000 8379 	beq.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f3a:	f200 845e 	bhi.w	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b80      	cmp	r3, #128	; 0x80
 8004f42:	f000 8344 	beq.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b80      	cmp	r3, #128	; 0x80
 8004f4a:	f200 8456 	bhi.w	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d84b      	bhi.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 844f 	beq.w	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	2b1f      	cmp	r3, #31
 8004f62:	f200 844a 	bhi.w	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004f66:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8004f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6c:	08005155 	.word	0x08005155
 8004f70:	080051c3 	.word	0x080051c3
 8004f74:	080057fb 	.word	0x080057fb
 8004f78:	08005257 	.word	0x08005257
 8004f7c:	080057fb 	.word	0x080057fb
 8004f80:	080057fb 	.word	0x080057fb
 8004f84:	080057fb 	.word	0x080057fb
 8004f88:	080052dd 	.word	0x080052dd
 8004f8c:	080057fb 	.word	0x080057fb
 8004f90:	080057fb 	.word	0x080057fb
 8004f94:	080057fb 	.word	0x080057fb
 8004f98:	080057fb 	.word	0x080057fb
 8004f9c:	080057fb 	.word	0x080057fb
 8004fa0:	080057fb 	.word	0x080057fb
 8004fa4:	080057fb 	.word	0x080057fb
 8004fa8:	08005355 	.word	0x08005355
 8004fac:	080057fb 	.word	0x080057fb
 8004fb0:	080057fb 	.word	0x080057fb
 8004fb4:	080057fb 	.word	0x080057fb
 8004fb8:	080057fb 	.word	0x080057fb
 8004fbc:	080057fb 	.word	0x080057fb
 8004fc0:	080057fb 	.word	0x080057fb
 8004fc4:	080057fb 	.word	0x080057fb
 8004fc8:	080057fb 	.word	0x080057fb
 8004fcc:	080057fb 	.word	0x080057fb
 8004fd0:	080057fb 	.word	0x080057fb
 8004fd4:	080057fb 	.word	0x080057fb
 8004fd8:	080057fb 	.word	0x080057fb
 8004fdc:	080057fb 	.word	0x080057fb
 8004fe0:	080057fb 	.word	0x080057fb
 8004fe4:	080057fb 	.word	0x080057fb
 8004fe8:	080053d7 	.word	0x080053d7
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b40      	cmp	r3, #64	; 0x40
 8004ff0:	f000 82c1 	beq.w	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004ff4:	f000 bc01 	b.w	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004ff8:	69b9      	ldr	r1, [r7, #24]
 8004ffa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004ffe:	f000 fdd9 	bl	8005bb4 <RCCEx_GetSAIxPeriphCLKFreq>
 8005002:	61f8      	str	r0, [r7, #28]
      break;
 8005004:	e3fa      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005006:	69b9      	ldr	r1, [r7, #24]
 8005008:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800500c:	f000 fdd2 	bl	8005bb4 <RCCEx_GetSAIxPeriphCLKFreq>
 8005010:	61f8      	str	r0, [r7, #28]
      break;
 8005012:	e3f3      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8005014:	40021000 	.word	0x40021000
 8005018:	0003d090 	.word	0x0003d090
 800501c:	08009ff8 	.word	0x08009ff8
 8005020:	00f42400 	.word	0x00f42400
 8005024:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005028:	4ba9      	ldr	r3, [pc, #676]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800502a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005032:	613b      	str	r3, [r7, #16]
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800503a:	d00c      	beq.n	8005056 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005042:	d87f      	bhi.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800504a:	d04e      	beq.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005052:	d01d      	beq.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8005054:	e076      	b.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005056:	4b9e      	ldr	r3, [pc, #632]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b02      	cmp	r3, #2
 8005060:	d172      	bne.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005062:	4b9b      	ldr	r3, [pc, #620]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 800506e:	4b98      	ldr	r3, [pc, #608]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	091b      	lsrs	r3, r3, #4
 8005074:	f003 030f 	and.w	r3, r3, #15
 8005078:	e005      	b.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800507a:	4b95      	ldr	r3, [pc, #596]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800507c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005080:	0a1b      	lsrs	r3, r3, #8
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	4a93      	ldr	r2, [pc, #588]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508c:	61fb      	str	r3, [r7, #28]
          break;
 800508e:	e05b      	b.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005090:	4b8f      	ldr	r3, [pc, #572]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005098:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800509c:	d156      	bne.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800509e:	4b8c      	ldr	r3, [pc, #560]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050aa:	d14f      	bne.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80050ac:	4b88      	ldr	r3, [pc, #544]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	0a1b      	lsrs	r3, r3, #8
 80050b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050b6:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	fb03 f202 	mul.w	r2, r3, r2
 80050c0:	4b83      	ldr	r3, [pc, #524]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	3301      	adds	r3, #1
 80050cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80050d2:	4b7f      	ldr	r3, [pc, #508]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	0d5b      	lsrs	r3, r3, #21
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	3301      	adds	r3, #1
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e6:	61fb      	str	r3, [r7, #28]
          break;
 80050e8:	e030      	b.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80050ea:	4b79      	ldr	r3, [pc, #484]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050f6:	d12b      	bne.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80050f8:	4b75      	ldr	r3, [pc, #468]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005100:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005104:	d124      	bne.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005106:	4b72      	ldr	r3, [pc, #456]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	0a1b      	lsrs	r3, r3, #8
 800510c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005110:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	fb03 f202 	mul.w	r2, r3, r2
 800511a:	4b6d      	ldr	r3, [pc, #436]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	091b      	lsrs	r3, r3, #4
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	3301      	adds	r3, #1
 8005126:	fbb2 f3f3 	udiv	r3, r2, r3
 800512a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800512c:	4b68      	ldr	r3, [pc, #416]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	0d5b      	lsrs	r3, r3, #21
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	3301      	adds	r3, #1
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005140:	61fb      	str	r3, [r7, #28]
          break;
 8005142:	e005      	b.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8005144:	bf00      	nop
 8005146:	e359      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005148:	bf00      	nop
 800514a:	e357      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800514c:	bf00      	nop
 800514e:	e355      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005150:	bf00      	nop
        break;
 8005152:	e353      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005154:	4b5e      	ldr	r3, [pc, #376]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2b03      	cmp	r3, #3
 8005164:	d827      	bhi.n	80051b6 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8005166:	a201      	add	r2, pc, #4	; (adr r2, 800516c <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8005168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516c:	0800517d 	.word	0x0800517d
 8005170:	08005185 	.word	0x08005185
 8005174:	0800518d 	.word	0x0800518d
 8005178:	080051a1 	.word	0x080051a1
          frequency = HAL_RCC_GetPCLK2Freq();
 800517c:	f7ff fa7a 	bl	8004674 <HAL_RCC_GetPCLK2Freq>
 8005180:	61f8      	str	r0, [r7, #28]
          break;
 8005182:	e01d      	b.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005184:	f7ff f9c8 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 8005188:	61f8      	str	r0, [r7, #28]
          break;
 800518a:	e019      	b.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800518c:	4b50      	ldr	r3, [pc, #320]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005198:	d10f      	bne.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 800519a:	4b4f      	ldr	r3, [pc, #316]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800519c:	61fb      	str	r3, [r7, #28]
          break;
 800519e:	e00c      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80051a0:	4b4b      	ldr	r3, [pc, #300]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80051a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d107      	bne.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 80051ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051b2:	61fb      	str	r3, [r7, #28]
          break;
 80051b4:	e003      	b.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 80051b6:	bf00      	nop
 80051b8:	e320      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80051ba:	bf00      	nop
 80051bc:	e31e      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80051be:	bf00      	nop
        break;
 80051c0:	e31c      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80051c2:	4b43      	ldr	r3, [pc, #268]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c8:	f003 030c 	and.w	r3, r3, #12
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	2b0c      	cmp	r3, #12
 80051d2:	d83a      	bhi.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80051d4:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 80051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051da:	bf00      	nop
 80051dc:	08005211 	.word	0x08005211
 80051e0:	0800524b 	.word	0x0800524b
 80051e4:	0800524b 	.word	0x0800524b
 80051e8:	0800524b 	.word	0x0800524b
 80051ec:	08005219 	.word	0x08005219
 80051f0:	0800524b 	.word	0x0800524b
 80051f4:	0800524b 	.word	0x0800524b
 80051f8:	0800524b 	.word	0x0800524b
 80051fc:	08005221 	.word	0x08005221
 8005200:	0800524b 	.word	0x0800524b
 8005204:	0800524b 	.word	0x0800524b
 8005208:	0800524b 	.word	0x0800524b
 800520c:	08005235 	.word	0x08005235
          frequency = HAL_RCC_GetPCLK1Freq();
 8005210:	f7ff fa1a 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 8005214:	61f8      	str	r0, [r7, #28]
          break;
 8005216:	e01d      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8005218:	f7ff f97e 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 800521c:	61f8      	str	r0, [r7, #28]
          break;
 800521e:	e019      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005220:	4b2b      	ldr	r3, [pc, #172]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800522c:	d10f      	bne.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 800522e:	4b2a      	ldr	r3, [pc, #168]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005230:	61fb      	str	r3, [r7, #28]
          break;
 8005232:	e00c      	b.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005234:	4b26      	ldr	r3, [pc, #152]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b02      	cmp	r3, #2
 8005240:	d107      	bne.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8005242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005246:	61fb      	str	r3, [r7, #28]
          break;
 8005248:	e003      	b.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 800524a:	bf00      	nop
 800524c:	e2d6      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800524e:	bf00      	nop
 8005250:	e2d4      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005252:	bf00      	nop
        break;
 8005254:	e2d2      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005256:	4b1e      	ldr	r3, [pc, #120]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b30      	cmp	r3, #48	; 0x30
 8005266:	d021      	beq.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2b30      	cmp	r3, #48	; 0x30
 800526c:	d829      	bhi.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	2b20      	cmp	r3, #32
 8005272:	d011      	beq.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	2b20      	cmp	r3, #32
 8005278:	d823      	bhi.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	2b10      	cmp	r3, #16
 8005284:	d004      	beq.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8005286:	e01c      	b.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005288:	f7ff f9de 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 800528c:	61f8      	str	r0, [r7, #28]
          break;
 800528e:	e01d      	b.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8005290:	f7ff f942 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 8005294:	61f8      	str	r0, [r7, #28]
          break;
 8005296:	e019      	b.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005298:	4b0d      	ldr	r3, [pc, #52]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a4:	d10f      	bne.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 80052a6:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80052a8:	61fb      	str	r3, [r7, #28]
          break;
 80052aa:	e00c      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80052ac:	4b08      	ldr	r3, [pc, #32]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80052ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d107      	bne.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 80052ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052be:	61fb      	str	r3, [r7, #28]
          break;
 80052c0:	e003      	b.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 80052c2:	bf00      	nop
 80052c4:	e29a      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80052c6:	bf00      	nop
 80052c8:	e298      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80052ca:	bf00      	nop
        break;
 80052cc:	e296      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80052ce:	bf00      	nop
 80052d0:	40021000 	.word	0x40021000
 80052d4:	08009ff8 	.word	0x08009ff8
 80052d8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80052dc:	4b9b      	ldr	r3, [pc, #620]	; (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80052de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052e6:	613b      	str	r3, [r7, #16]
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2bc0      	cmp	r3, #192	; 0xc0
 80052ec:	d021      	beq.n	8005332 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	2bc0      	cmp	r3, #192	; 0xc0
 80052f2:	d829      	bhi.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	2b80      	cmp	r3, #128	; 0x80
 80052f8:	d011      	beq.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	2b80      	cmp	r3, #128	; 0x80
 80052fe:	d823      	bhi.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	2b40      	cmp	r3, #64	; 0x40
 800530a:	d004      	beq.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 800530c:	e01c      	b.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 800530e:	f7ff f99b 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 8005312:	61f8      	str	r0, [r7, #28]
          break;
 8005314:	e01d      	b.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005316:	f7ff f8ff 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 800531a:	61f8      	str	r0, [r7, #28]
          break;
 800531c:	e019      	b.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800531e:	4b8b      	ldr	r3, [pc, #556]	; (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800532a:	d10f      	bne.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 800532c:	4b88      	ldr	r3, [pc, #544]	; (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800532e:	61fb      	str	r3, [r7, #28]
          break;
 8005330:	e00c      	b.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005332:	4b86      	ldr	r3, [pc, #536]	; (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b02      	cmp	r3, #2
 800533e:	d107      	bne.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8005340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005344:	61fb      	str	r3, [r7, #28]
          break;
 8005346:	e003      	b.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8005348:	bf00      	nop
 800534a:	e257      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800534c:	bf00      	nop
 800534e:	e255      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005350:	bf00      	nop
        break;
 8005352:	e253      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005354:	4b7d      	ldr	r3, [pc, #500]	; (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535e:	613b      	str	r3, [r7, #16]
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005366:	d025      	beq.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800536e:	d82c      	bhi.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005376:	d013      	beq.n	80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800537e:	d824      	bhi.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d004      	beq.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800538c:	d004      	beq.n	8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 800538e:	e01c      	b.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005390:	f7ff f95a 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 8005394:	61f8      	str	r0, [r7, #28]
          break;
 8005396:	e01d      	b.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005398:	f7ff f8be 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 800539c:	61f8      	str	r0, [r7, #28]
          break;
 800539e:	e019      	b.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053a0:	4b6a      	ldr	r3, [pc, #424]	; (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ac:	d10f      	bne.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 80053ae:	4b68      	ldr	r3, [pc, #416]	; (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80053b0:	61fb      	str	r3, [r7, #28]
          break;
 80053b2:	e00c      	b.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80053b4:	4b65      	ldr	r3, [pc, #404]	; (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80053b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d107      	bne.n	80053d2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 80053c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053c6:	61fb      	str	r3, [r7, #28]
          break;
 80053c8:	e003      	b.n	80053d2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 80053ca:	bf00      	nop
 80053cc:	e216      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80053ce:	bf00      	nop
 80053d0:	e214      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80053d2:	bf00      	nop
        break;
 80053d4:	e212      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80053d6:	4b5d      	ldr	r3, [pc, #372]	; (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80053d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053e0:	613b      	str	r3, [r7, #16]
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053e8:	d025      	beq.n	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053f0:	d82c      	bhi.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f8:	d013      	beq.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005400:	d824      	bhi.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d004      	beq.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540e:	d004      	beq.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8005410:	e01c      	b.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005412:	f7ff f919 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 8005416:	61f8      	str	r0, [r7, #28]
          break;
 8005418:	e01d      	b.n	8005456 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 800541a:	f7ff f87d 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 800541e:	61f8      	str	r0, [r7, #28]
          break;
 8005420:	e019      	b.n	8005456 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005422:	4b4a      	ldr	r3, [pc, #296]	; (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800542a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800542e:	d10f      	bne.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8005430:	4b47      	ldr	r3, [pc, #284]	; (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8005432:	61fb      	str	r3, [r7, #28]
          break;
 8005434:	e00c      	b.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005436:	4b45      	ldr	r3, [pc, #276]	; (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b02      	cmp	r3, #2
 8005442:	d107      	bne.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8005444:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005448:	61fb      	str	r3, [r7, #28]
          break;
 800544a:	e003      	b.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 800544c:	bf00      	nop
 800544e:	e1d5      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005450:	bf00      	nop
 8005452:	e1d3      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005454:	bf00      	nop
        break;
 8005456:	e1d1      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005458:	4b3c      	ldr	r3, [pc, #240]	; (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005462:	613b      	str	r3, [r7, #16]
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800546a:	d00c      	beq.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005472:	d864      	bhi.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800547a:	d008      	beq.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005482:	d030      	beq.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8005484:	e05b      	b.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005486:	f7ff f847 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 800548a:	61f8      	str	r0, [r7, #28]
          break;
 800548c:	e05c      	b.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800548e:	4b2f      	ldr	r3, [pc, #188]	; (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800549a:	d152      	bne.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 800549c:	4b2b      	ldr	r3, [pc, #172]	; (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d04c      	beq.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80054a8:	4b28      	ldr	r3, [pc, #160]	; (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	0a1b      	lsrs	r3, r3, #8
 80054ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054b2:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	fb03 f202 	mul.w	r2, r3, r2
 80054bc:	4b23      	ldr	r3, [pc, #140]	; (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	091b      	lsrs	r3, r3, #4
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	3301      	adds	r3, #1
 80054c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054cc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80054ce:	4b1f      	ldr	r3, [pc, #124]	; (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	0e5b      	lsrs	r3, r3, #25
 80054d4:	f003 0303 	and.w	r3, r3, #3
 80054d8:	3301      	adds	r3, #1
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e2:	61fb      	str	r3, [r7, #28]
          break;
 80054e4:	e02d      	b.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80054e6:	4b19      	ldr	r3, [pc, #100]	; (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054f2:	d128      	bne.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80054f4:	4b15      	ldr	r3, [pc, #84]	; (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d022      	beq.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005500:	4b12      	ldr	r3, [pc, #72]	; (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	0a1b      	lsrs	r3, r3, #8
 8005506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800550a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	fb03 f202 	mul.w	r2, r3, r2
 8005514:	4b0d      	ldr	r3, [pc, #52]	; (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	091b      	lsrs	r3, r3, #4
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	3301      	adds	r3, #1
 8005520:	fbb2 f3f3 	udiv	r3, r2, r3
 8005524:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8005526:	4b09      	ldr	r3, [pc, #36]	; (800554c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	0e5b      	lsrs	r3, r3, #25
 800552c:	f003 0303 	and.w	r3, r3, #3
 8005530:	3301      	adds	r3, #1
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	fbb2 f3f3 	udiv	r3, r2, r3
 800553a:	61fb      	str	r3, [r7, #28]
          break;
 800553c:	e003      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 800553e:	bf00      	nop
 8005540:	e15c      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005542:	bf00      	nop
 8005544:	e15a      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005546:	bf00      	nop
        break;
 8005548:	e158      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800554a:	bf00      	nop
 800554c:	40021000 	.word	0x40021000
 8005550:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005554:	4b9d      	ldr	r3, [pc, #628]	; (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800555e:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d103      	bne.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005566:	f7ff f885 	bl	8004674 <HAL_RCC_GetPCLK2Freq>
 800556a:	61f8      	str	r0, [r7, #28]
        break;
 800556c:	e146      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 800556e:	f7fe ffd3 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 8005572:	61f8      	str	r0, [r7, #28]
        break;
 8005574:	e142      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005576:	4b95      	ldr	r3, [pc, #596]	; (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005588:	d013      	beq.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005590:	d819      	bhi.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d004      	beq.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559e:	d004      	beq.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 80055a0:	e011      	b.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 80055a2:	f7ff f851 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 80055a6:	61f8      	str	r0, [r7, #28]
          break;
 80055a8:	e010      	b.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 80055aa:	f7fe ffb5 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 80055ae:	61f8      	str	r0, [r7, #28]
          break;
 80055b0:	e00c      	b.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055b2:	4b86      	ldr	r3, [pc, #536]	; (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055be:	d104      	bne.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 80055c0:	4b83      	ldr	r3, [pc, #524]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80055c2:	61fb      	str	r3, [r7, #28]
          break;
 80055c4:	e001      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 80055c6:	bf00      	nop
 80055c8:	e118      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80055ca:	bf00      	nop
        break;
 80055cc:	e116      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80055ce:	4b7f      	ldr	r3, [pc, #508]	; (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80055d8:	613b      	str	r3, [r7, #16]
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e0:	d013      	beq.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e8:	d819      	bhi.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d004      	beq.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055f6:	d004      	beq.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 80055f8:	e011      	b.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 80055fa:	f7ff f825 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 80055fe:	61f8      	str	r0, [r7, #28]
          break;
 8005600:	e010      	b.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005602:	f7fe ff89 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 8005606:	61f8      	str	r0, [r7, #28]
          break;
 8005608:	e00c      	b.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800560a:	4b70      	ldr	r3, [pc, #448]	; (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005616:	d104      	bne.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8005618:	4b6d      	ldr	r3, [pc, #436]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800561a:	61fb      	str	r3, [r7, #28]
          break;
 800561c:	e001      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 800561e:	bf00      	nop
 8005620:	e0ec      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005622:	bf00      	nop
        break;
 8005624:	e0ea      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005626:	4b69      	ldr	r3, [pc, #420]	; (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800562c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005630:	613b      	str	r3, [r7, #16]
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005638:	d013      	beq.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005640:	d819      	bhi.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d004      	beq.n	8005652 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800564e:	d004      	beq.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8005650:	e011      	b.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005652:	f7fe fff9 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 8005656:	61f8      	str	r0, [r7, #28]
          break;
 8005658:	e010      	b.n	800567c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 800565a:	f7fe ff5d 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 800565e:	61f8      	str	r0, [r7, #28]
          break;
 8005660:	e00c      	b.n	800567c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005662:	4b5a      	ldr	r3, [pc, #360]	; (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800566a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800566e:	d104      	bne.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8005670:	4b57      	ldr	r3, [pc, #348]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005672:	61fb      	str	r3, [r7, #28]
          break;
 8005674:	e001      	b.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8005676:	bf00      	nop
 8005678:	e0c0      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800567a:	bf00      	nop
        break;
 800567c:	e0be      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800567e:	4b53      	ldr	r3, [pc, #332]	; (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005684:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005688:	613b      	str	r3, [r7, #16]
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005690:	d02c      	beq.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005698:	d833      	bhi.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056a0:	d01a      	beq.n	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056a8:	d82b      	bhi.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d004      	beq.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056b6:	d004      	beq.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 80056b8:	e023      	b.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 80056ba:	f7fe ffc5 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 80056be:	61f8      	str	r0, [r7, #28]
          break;
 80056c0:	e026      	b.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80056c2:	4b42      	ldr	r3, [pc, #264]	; (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80056c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d11a      	bne.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 80056d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80056d4:	61fb      	str	r3, [r7, #28]
          break;
 80056d6:	e016      	b.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056d8:	4b3c      	ldr	r3, [pc, #240]	; (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e4:	d111      	bne.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 80056e6:	4b3a      	ldr	r3, [pc, #232]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80056e8:	61fb      	str	r3, [r7, #28]
          break;
 80056ea:	e00e      	b.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80056ec:	4b37      	ldr	r3, [pc, #220]	; (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80056ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d109      	bne.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 80056fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056fe:	61fb      	str	r3, [r7, #28]
          break;
 8005700:	e005      	b.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8005702:	bf00      	nop
 8005704:	e07a      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005706:	bf00      	nop
 8005708:	e078      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800570a:	bf00      	nop
 800570c:	e076      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800570e:	bf00      	nop
        break;
 8005710:	e074      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005712:	4b2e      	ldr	r3, [pc, #184]	; (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005718:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800571c:	613b      	str	r3, [r7, #16]
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005724:	d02c      	beq.n	8005780 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800572c:	d833      	bhi.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005734:	d01a      	beq.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800573c:	d82b      	bhi.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d004      	beq.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800574a:	d004      	beq.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 800574c:	e023      	b.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 800574e:	f7fe ff7b 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 8005752:	61f8      	str	r0, [r7, #28]
          break;
 8005754:	e026      	b.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005756:	4b1d      	ldr	r3, [pc, #116]	; (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b02      	cmp	r3, #2
 8005762:	d11a      	bne.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8005764:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005768:	61fb      	str	r3, [r7, #28]
          break;
 800576a:	e016      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800576c:	4b17      	ldr	r3, [pc, #92]	; (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005778:	d111      	bne.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 800577a:	4b15      	ldr	r3, [pc, #84]	; (80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800577c:	61fb      	str	r3, [r7, #28]
          break;
 800577e:	e00e      	b.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005780:	4b12      	ldr	r3, [pc, #72]	; (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b02      	cmp	r3, #2
 800578c:	d109      	bne.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800578e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005792:	61fb      	str	r3, [r7, #28]
          break;
 8005794:	e005      	b.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8005796:	bf00      	nop
 8005798:	e030      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800579a:	bf00      	nop
 800579c:	e02e      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800579e:	bf00      	nop
 80057a0:	e02c      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80057a2:	bf00      	nop
        break;
 80057a4:	e02a      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80057a6:	4b09      	ldr	r3, [pc, #36]	; (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80057a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057b0:	613b      	str	r3, [r7, #16]
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057be:	d009      	beq.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 80057c0:	e012      	b.n	80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80057c2:	f7fe ff41 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 80057c6:	61f8      	str	r0, [r7, #28]
          break;
 80057c8:	e00e      	b.n	80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 80057ca:	bf00      	nop
 80057cc:	40021000 	.word	0x40021000
 80057d0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057d4:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e0:	d101      	bne.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 80057e2:	4b0a      	ldr	r3, [pc, #40]	; (800580c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80057e4:	61fb      	str	r3, [r7, #28]
          break;
 80057e6:	bf00      	nop
        break;
 80057e8:	e008      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80057ea:	bf00      	nop
 80057ec:	e006      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80057ee:	bf00      	nop
 80057f0:	e004      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80057f2:	bf00      	nop
 80057f4:	e002      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80057f6:	bf00      	nop
 80057f8:	e000      	b.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80057fa:	bf00      	nop
    }
  }

  return(frequency);
 80057fc:	69fb      	ldr	r3, [r7, #28]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3720      	adds	r7, #32
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	40021000 	.word	0x40021000
 800580c:	00f42400 	.word	0x00f42400

08005810 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800581e:	4b75      	ldr	r3, [pc, #468]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d018      	beq.n	800585c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800582a:	4b72      	ldr	r3, [pc, #456]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f003 0203 	and.w	r2, r3, #3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d10d      	bne.n	8005856 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
       ||
 800583e:	2b00      	cmp	r3, #0
 8005840:	d009      	beq.n	8005856 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005842:	4b6c      	ldr	r3, [pc, #432]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	091b      	lsrs	r3, r3, #4
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
       ||
 8005852:	429a      	cmp	r2, r3
 8005854:	d047      	beq.n	80058e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	73fb      	strb	r3, [r7, #15]
 800585a:	e044      	b.n	80058e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b03      	cmp	r3, #3
 8005862:	d018      	beq.n	8005896 <RCCEx_PLLSAI1_Config+0x86>
 8005864:	2b03      	cmp	r3, #3
 8005866:	d825      	bhi.n	80058b4 <RCCEx_PLLSAI1_Config+0xa4>
 8005868:	2b01      	cmp	r3, #1
 800586a:	d002      	beq.n	8005872 <RCCEx_PLLSAI1_Config+0x62>
 800586c:	2b02      	cmp	r3, #2
 800586e:	d009      	beq.n	8005884 <RCCEx_PLLSAI1_Config+0x74>
 8005870:	e020      	b.n	80058b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005872:	4b60      	ldr	r3, [pc, #384]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d11d      	bne.n	80058ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005882:	e01a      	b.n	80058ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005884:	4b5b      	ldr	r3, [pc, #364]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800588c:	2b00      	cmp	r3, #0
 800588e:	d116      	bne.n	80058be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005894:	e013      	b.n	80058be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005896:	4b57      	ldr	r3, [pc, #348]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10f      	bne.n	80058c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058a2:	4b54      	ldr	r3, [pc, #336]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d109      	bne.n	80058c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058b2:	e006      	b.n	80058c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	73fb      	strb	r3, [r7, #15]
      break;
 80058b8:	e004      	b.n	80058c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058ba:	bf00      	nop
 80058bc:	e002      	b.n	80058c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058be:	bf00      	nop
 80058c0:	e000      	b.n	80058c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10d      	bne.n	80058e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058ca:	4b4a      	ldr	r3, [pc, #296]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6819      	ldr	r1, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	3b01      	subs	r3, #1
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	430b      	orrs	r3, r1
 80058e0:	4944      	ldr	r1, [pc, #272]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d17d      	bne.n	80059e8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80058ec:	4b41      	ldr	r3, [pc, #260]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a40      	ldr	r2, [pc, #256]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058f8:	f7fc f81a 	bl	8001930 <HAL_GetTick>
 80058fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058fe:	e009      	b.n	8005914 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005900:	f7fc f816 	bl	8001930 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d902      	bls.n	8005914 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	73fb      	strb	r3, [r7, #15]
        break;
 8005912:	e005      	b.n	8005920 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005914:	4b37      	ldr	r3, [pc, #220]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1ef      	bne.n	8005900 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d160      	bne.n	80059e8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d111      	bne.n	8005950 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800592c:	4b31      	ldr	r3, [pc, #196]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6892      	ldr	r2, [r2, #8]
 800593c:	0211      	lsls	r1, r2, #8
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	68d2      	ldr	r2, [r2, #12]
 8005942:	0912      	lsrs	r2, r2, #4
 8005944:	0452      	lsls	r2, r2, #17
 8005946:	430a      	orrs	r2, r1
 8005948:	492a      	ldr	r1, [pc, #168]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800594a:	4313      	orrs	r3, r2
 800594c:	610b      	str	r3, [r1, #16]
 800594e:	e027      	b.n	80059a0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d112      	bne.n	800597c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005956:	4b27      	ldr	r3, [pc, #156]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800595e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6892      	ldr	r2, [r2, #8]
 8005966:	0211      	lsls	r1, r2, #8
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6912      	ldr	r2, [r2, #16]
 800596c:	0852      	lsrs	r2, r2, #1
 800596e:	3a01      	subs	r2, #1
 8005970:	0552      	lsls	r2, r2, #21
 8005972:	430a      	orrs	r2, r1
 8005974:	491f      	ldr	r1, [pc, #124]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005976:	4313      	orrs	r3, r2
 8005978:	610b      	str	r3, [r1, #16]
 800597a:	e011      	b.n	80059a0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800597c:	4b1d      	ldr	r3, [pc, #116]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005984:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6892      	ldr	r2, [r2, #8]
 800598c:	0211      	lsls	r1, r2, #8
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	6952      	ldr	r2, [r2, #20]
 8005992:	0852      	lsrs	r2, r2, #1
 8005994:	3a01      	subs	r2, #1
 8005996:	0652      	lsls	r2, r2, #25
 8005998:	430a      	orrs	r2, r1
 800599a:	4916      	ldr	r1, [pc, #88]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800599c:	4313      	orrs	r3, r2
 800599e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80059a0:	4b14      	ldr	r3, [pc, #80]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a13      	ldr	r2, [pc, #76]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ac:	f7fb ffc0 	bl	8001930 <HAL_GetTick>
 80059b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059b2:	e009      	b.n	80059c8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059b4:	f7fb ffbc 	bl	8001930 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d902      	bls.n	80059c8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	73fb      	strb	r3, [r7, #15]
          break;
 80059c6:	e005      	b.n	80059d4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059c8:	4b0a      	ldr	r3, [pc, #40]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0ef      	beq.n	80059b4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d106      	bne.n	80059e8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80059da:	4b06      	ldr	r3, [pc, #24]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	4904      	ldr	r1, [pc, #16]	; (80059f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	40021000 	.word	0x40021000

080059f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a06:	4b6a      	ldr	r3, [pc, #424]	; (8005bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d018      	beq.n	8005a44 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a12:	4b67      	ldr	r3, [pc, #412]	; (8005bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f003 0203 	and.w	r2, r3, #3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d10d      	bne.n	8005a3e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
       ||
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d009      	beq.n	8005a3e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005a2a:	4b61      	ldr	r3, [pc, #388]	; (8005bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	091b      	lsrs	r3, r3, #4
 8005a30:	f003 0307 	and.w	r3, r3, #7
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
       ||
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d047      	beq.n	8005ace <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	73fb      	strb	r3, [r7, #15]
 8005a42:	e044      	b.n	8005ace <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d018      	beq.n	8005a7e <RCCEx_PLLSAI2_Config+0x86>
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d825      	bhi.n	8005a9c <RCCEx_PLLSAI2_Config+0xa4>
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d002      	beq.n	8005a5a <RCCEx_PLLSAI2_Config+0x62>
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d009      	beq.n	8005a6c <RCCEx_PLLSAI2_Config+0x74>
 8005a58:	e020      	b.n	8005a9c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a5a:	4b55      	ldr	r3, [pc, #340]	; (8005bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d11d      	bne.n	8005aa2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a6a:	e01a      	b.n	8005aa2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a6c:	4b50      	ldr	r3, [pc, #320]	; (8005bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d116      	bne.n	8005aa6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a7c:	e013      	b.n	8005aa6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a7e:	4b4c      	ldr	r3, [pc, #304]	; (8005bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10f      	bne.n	8005aaa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a8a:	4b49      	ldr	r3, [pc, #292]	; (8005bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d109      	bne.n	8005aaa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a9a:	e006      	b.n	8005aaa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005aa0:	e004      	b.n	8005aac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005aa2:	bf00      	nop
 8005aa4:	e002      	b.n	8005aac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005aa6:	bf00      	nop
 8005aa8:	e000      	b.n	8005aac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005aaa:	bf00      	nop
    }

    if(status == HAL_OK)
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10d      	bne.n	8005ace <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ab2:	4b3f      	ldr	r3, [pc, #252]	; (8005bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6819      	ldr	r1, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	430b      	orrs	r3, r1
 8005ac8:	4939      	ldr	r1, [pc, #228]	; (8005bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d167      	bne.n	8005ba4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005ad4:	4b36      	ldr	r3, [pc, #216]	; (8005bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a35      	ldr	r2, [pc, #212]	; (8005bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae0:	f7fb ff26 	bl	8001930 <HAL_GetTick>
 8005ae4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ae6:	e009      	b.n	8005afc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ae8:	f7fb ff22 	bl	8001930 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d902      	bls.n	8005afc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	73fb      	strb	r3, [r7, #15]
        break;
 8005afa:	e005      	b.n	8005b08 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005afc:	4b2c      	ldr	r3, [pc, #176]	; (8005bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1ef      	bne.n	8005ae8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d14a      	bne.n	8005ba4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d111      	bne.n	8005b38 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b14:	4b26      	ldr	r3, [pc, #152]	; (8005bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6892      	ldr	r2, [r2, #8]
 8005b24:	0211      	lsls	r1, r2, #8
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	68d2      	ldr	r2, [r2, #12]
 8005b2a:	0912      	lsrs	r2, r2, #4
 8005b2c:	0452      	lsls	r2, r2, #17
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	491f      	ldr	r1, [pc, #124]	; (8005bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	614b      	str	r3, [r1, #20]
 8005b36:	e011      	b.n	8005b5c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b38:	4b1d      	ldr	r3, [pc, #116]	; (8005bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005b40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6892      	ldr	r2, [r2, #8]
 8005b48:	0211      	lsls	r1, r2, #8
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	6912      	ldr	r2, [r2, #16]
 8005b4e:	0852      	lsrs	r2, r2, #1
 8005b50:	3a01      	subs	r2, #1
 8005b52:	0652      	lsls	r2, r2, #25
 8005b54:	430a      	orrs	r2, r1
 8005b56:	4916      	ldr	r1, [pc, #88]	; (8005bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005b5c:	4b14      	ldr	r3, [pc, #80]	; (8005bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a13      	ldr	r2, [pc, #76]	; (8005bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b68:	f7fb fee2 	bl	8001930 <HAL_GetTick>
 8005b6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b6e:	e009      	b.n	8005b84 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b70:	f7fb fede 	bl	8001930 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d902      	bls.n	8005b84 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	73fb      	strb	r3, [r7, #15]
          break;
 8005b82:	e005      	b.n	8005b90 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b84:	4b0a      	ldr	r3, [pc, #40]	; (8005bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0ef      	beq.n	8005b70 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005b96:	4b06      	ldr	r3, [pc, #24]	; (8005bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b98:	695a      	ldr	r2, [r3, #20]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	4904      	ldr	r1, [pc, #16]	; (8005bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	40021000 	.word	0x40021000

08005bb4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b089      	sub	sp, #36	; 0x24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd0:	d10c      	bne.n	8005bec <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005bd2:	4b6e      	ldr	r3, [pc, #440]	; (8005d8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005bdc:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005be4:	d112      	bne.n	8005c0c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005be6:	4b6a      	ldr	r3, [pc, #424]	; (8005d90 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005be8:	61fb      	str	r3, [r7, #28]
 8005bea:	e00f      	b.n	8005c0c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf2:	d10b      	bne.n	8005c0c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005bf4:	4b65      	ldr	r3, [pc, #404]	; (8005d8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfa:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005bfe:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c06:	d101      	bne.n	8005c0c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005c08:	4b61      	ldr	r3, [pc, #388]	; (8005d90 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005c0a:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f040 80b4 	bne.w	8005d7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c1e:	d003      	beq.n	8005c28 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c26:	d135      	bne.n	8005c94 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005c28:	4b58      	ldr	r3, [pc, #352]	; (8005d8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c34:	f040 80a1 	bne.w	8005d7a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8005c38:	4b54      	ldr	r3, [pc, #336]	; (8005d8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f000 809a 	beq.w	8005d7a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005c46:	4b51      	ldr	r3, [pc, #324]	; (8005d8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	091b      	lsrs	r3, r3, #4
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	3301      	adds	r3, #1
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c58:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005c5a:	4b4c      	ldr	r3, [pc, #304]	; (8005d8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	0a1b      	lsrs	r3, r3, #8
 8005c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c64:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10a      	bne.n	8005c82 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005c6c:	4b47      	ldr	r3, [pc, #284]	; (8005d8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8005c78:	2311      	movs	r3, #17
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	e001      	b.n	8005c82 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8005c7e:	2307      	movs	r3, #7
 8005c80:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	fb03 f202 	mul.w	r2, r3, r2
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c90:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005c92:	e072      	b.n	8005d7a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d133      	bne.n	8005d02 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005c9a:	4b3c      	ldr	r3, [pc, #240]	; (8005d8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ca2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ca6:	d169      	bne.n	8005d7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005ca8:	4b38      	ldr	r3, [pc, #224]	; (8005d8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d063      	beq.n	8005d7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005cb4:	4b35      	ldr	r3, [pc, #212]	; (8005d8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	091b      	lsrs	r3, r3, #4
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005cc8:	4b30      	ldr	r3, [pc, #192]	; (8005d8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	0a1b      	lsrs	r3, r3, #8
 8005cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cd2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005cda:	4b2c      	ldr	r3, [pc, #176]	; (8005d8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d002      	beq.n	8005cec <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8005ce6:	2311      	movs	r3, #17
 8005ce8:	617b      	str	r3, [r7, #20]
 8005cea:	e001      	b.n	8005cf0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8005cec:	2307      	movs	r3, #7
 8005cee:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	fb03 f202 	mul.w	r2, r3, r2
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfe:	61fb      	str	r3, [r7, #28]
 8005d00:	e03c      	b.n	8005d7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d08:	d003      	beq.n	8005d12 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d10:	d134      	bne.n	8005d7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005d12:	4b1e      	ldr	r3, [pc, #120]	; (8005d8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d1e:	d12d      	bne.n	8005d7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005d20:	4b1a      	ldr	r3, [pc, #104]	; (8005d8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d027      	beq.n	8005d7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005d2c:	4b17      	ldr	r3, [pc, #92]	; (8005d8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	091b      	lsrs	r3, r3, #4
 8005d32:	f003 0307 	and.w	r3, r3, #7
 8005d36:	3301      	adds	r3, #1
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005d40:	4b12      	ldr	r3, [pc, #72]	; (8005d8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	0a1b      	lsrs	r3, r3, #8
 8005d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d4a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10a      	bne.n	8005d68 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005d52:	4b0e      	ldr	r3, [pc, #56]	; (8005d8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8005d5e:	2311      	movs	r3, #17
 8005d60:	617b      	str	r3, [r7, #20]
 8005d62:	e001      	b.n	8005d68 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8005d64:	2307      	movs	r3, #7
 8005d66:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	fb03 f202 	mul.w	r2, r3, r2
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d76:	61fb      	str	r3, [r7, #28]
 8005d78:	e000      	b.n	8005d7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005d7a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005d7c:	69fb      	ldr	r3, [r7, #28]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3724      	adds	r7, #36	; 0x24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	001fff68 	.word	0x001fff68

08005d94 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e155      	b.n	8006052 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d106      	bne.n	8005dc0 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7fb fc2a 	bl	8001614 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f959 	bl	8006078 <SAI_Disable>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e140      	b.n	8006052 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d00c      	beq.n	8005dfa <HAL_SAI_Init+0x66>
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d80d      	bhi.n	8005e00 <HAL_SAI_Init+0x6c>
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <HAL_SAI_Init+0x5a>
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d003      	beq.n	8005df4 <HAL_SAI_Init+0x60>
 8005dec:	e008      	b.n	8005e00 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61fb      	str	r3, [r7, #28]
      break;
 8005df2:	e008      	b.n	8005e06 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005df4:	2310      	movs	r3, #16
 8005df6:	61fb      	str	r3, [r7, #28]
      break;
 8005df8:	e005      	b.n	8005e06 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005dfa:	2320      	movs	r3, #32
 8005dfc:	61fb      	str	r3, [r7, #28]
      break;
 8005dfe:	e002      	b.n	8005e06 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8005e00:	2300      	movs	r3, #0
 8005e02:	61fb      	str	r3, [r7, #28]
      break;
 8005e04:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d81d      	bhi.n	8005e4a <HAL_SAI_Init+0xb6>
 8005e0e:	a201      	add	r2, pc, #4	; (adr r2, 8005e14 <HAL_SAI_Init+0x80>)
 8005e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e14:	08005e25 	.word	0x08005e25
 8005e18:	08005e2b 	.word	0x08005e2b
 8005e1c:	08005e33 	.word	0x08005e33
 8005e20:	08005e3b 	.word	0x08005e3b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
      break;
 8005e28:	e012      	b.n	8005e50 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e2e:	617b      	str	r3, [r7, #20]
      break;
 8005e30:	e00e      	b.n	8005e50 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005e32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e36:	617b      	str	r3, [r7, #20]
      break;
 8005e38:	e00a      	b.n	8005e50 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005e3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e3e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f043 0301 	orr.w	r3, r3, #1
 8005e46:	61fb      	str	r3, [r7, #28]
      break;
 8005e48:	e002      	b.n	8005e50 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	617b      	str	r3, [r7, #20]
      break;
 8005e4e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a81      	ldr	r2, [pc, #516]	; (800605c <HAL_SAI_Init+0x2c8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d004      	beq.n	8005e64 <HAL_SAI_Init+0xd0>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a80      	ldr	r2, [pc, #512]	; (8006060 <HAL_SAI_Init+0x2cc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d103      	bne.n	8005e6c <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8005e64:	4a7f      	ldr	r2, [pc, #508]	; (8006064 <HAL_SAI_Init+0x2d0>)
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	e002      	b.n	8005e72 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005e6c:	4a7e      	ldr	r2, [pc, #504]	; (8006068 <HAL_SAI_Init+0x2d4>)
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d041      	beq.n	8005efe <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a77      	ldr	r2, [pc, #476]	; (800605c <HAL_SAI_Init+0x2c8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d004      	beq.n	8005e8e <HAL_SAI_Init+0xfa>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a75      	ldr	r2, [pc, #468]	; (8006060 <HAL_SAI_Init+0x2cc>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d105      	bne.n	8005e9a <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005e8e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005e92:	f7fe ff4f 	bl	8004d34 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e96:	6138      	str	r0, [r7, #16]
 8005e98:	e004      	b.n	8005ea4 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005e9a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005e9e:	f7fe ff49 	bl	8004d34 <HAL_RCCEx_GetPeriphCLKFreq>
 8005ea2:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	461a      	mov	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	025b      	lsls	r3, r3, #9
 8005eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eba:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4a6b      	ldr	r2, [pc, #428]	; (800606c <HAL_SAI_Init+0x2d8>)
 8005ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec4:	08da      	lsrs	r2, r3, #3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005eca:	68f9      	ldr	r1, [r7, #12]
 8005ecc:	4b67      	ldr	r3, [pc, #412]	; (800606c <HAL_SAI_Init+0x2d8>)
 8005ece:	fba3 2301 	umull	r2, r3, r3, r1
 8005ed2:	08da      	lsrs	r2, r3, #3
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	1aca      	subs	r2, r1, r3
 8005ede:	2a08      	cmp	r2, #8
 8005ee0:	d904      	bls.n	8005eec <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d104      	bne.n	8005efe <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	085a      	lsrs	r2, r3, #1
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_SAI_Init+0x17a>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d109      	bne.n	8005f22 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d101      	bne.n	8005f1a <HAL_SAI_Init+0x186>
 8005f16:	2300      	movs	r3, #0
 8005f18:	e001      	b.n	8005f1e <HAL_SAI_Init+0x18a>
 8005f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f1e:	61bb      	str	r3, [r7, #24]
 8005f20:	e008      	b.n	8005f34 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d102      	bne.n	8005f30 <HAL_SAI_Init+0x19c>
 8005f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f2e:	e000      	b.n	8005f32 <HAL_SAI_Init+0x19e>
 8005f30:	2300      	movs	r3, #0
 8005f32:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6819      	ldr	r1, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	4b4c      	ldr	r3, [pc, #304]	; (8006070 <HAL_SAI_Init+0x2dc>)
 8005f40:	400b      	ands	r3, r1
 8005f42:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6819      	ldr	r1, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f58:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8005f6c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005f78:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	051b      	lsls	r3, r3, #20
 8005f80:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	6812      	ldr	r2, [r2, #0]
 8005f94:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005f98:	f023 030f 	bic.w	r3, r3, #15
 8005f9c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6859      	ldr	r1, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	699a      	ldr	r2, [r3, #24]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fac:	431a      	orrs	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6899      	ldr	r1, [r3, #8]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	4b2b      	ldr	r3, [pc, #172]	; (8006074 <HAL_SAI_Init+0x2e0>)
 8005fc8:	400b      	ands	r3, r1
 8005fca:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6899      	ldr	r1, [r3, #8]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005fdc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8005fe2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005fe8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005ff2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68d9      	ldr	r1, [r3, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	f24f 0320 	movw	r3, #61472	; 0xf020
 800600a:	400b      	ands	r3, r1
 800600c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68d9      	ldr	r1, [r3, #12]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006022:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006024:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800602a:	3b01      	subs	r3, #1
 800602c:	021b      	lsls	r3, r3, #8
 800602e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3720      	adds	r7, #32
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	40015404 	.word	0x40015404
 8006060:	40015424 	.word	0x40015424
 8006064:	40015400 	.word	0x40015400
 8006068:	40015800 	.word	0x40015800
 800606c:	cccccccd 	.word	0xcccccccd
 8006070:	ff05c010 	.word	0xff05c010
 8006074:	fff88000 	.word	0xfff88000

08006078 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006080:	4b18      	ldr	r3, [pc, #96]	; (80060e4 <SAI_Disable+0x6c>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a18      	ldr	r2, [pc, #96]	; (80060e8 <SAI_Disable+0x70>)
 8006086:	fba2 2303 	umull	r2, r3, r2, r3
 800608a:	0b1b      	lsrs	r3, r3, #12
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006090:	2300      	movs	r3, #0
 8006092:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80060a2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10a      	bne.n	80060c0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	72fb      	strb	r3, [r7, #11]
      break;
 80060be:	e009      	b.n	80060d4 <SAI_Disable+0x5c>
    }
    count--;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1e7      	bne.n	80060a4 <SAI_Disable+0x2c>

  return status;
 80060d4:	7afb      	ldrb	r3, [r7, #11]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	20000000 	.word	0x20000000
 80060e8:	95cbec1b 	.word	0x95cbec1b

080060ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e095      	b.n	800622a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006102:	2b00      	cmp	r3, #0
 8006104:	d108      	bne.n	8006118 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800610e:	d009      	beq.n	8006124 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	61da      	str	r2, [r3, #28]
 8006116:	e005      	b.n	8006124 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7fb f9c6 	bl	80014d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800615a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006164:	d902      	bls.n	800616c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006166:	2300      	movs	r3, #0
 8006168:	60fb      	str	r3, [r7, #12]
 800616a:	e002      	b.n	8006172 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800616c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006170:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800617a:	d007      	beq.n	800618c <HAL_SPI_Init+0xa0>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006184:	d002      	beq.n	800618c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800619c:	431a      	orrs	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	431a      	orrs	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	431a      	orrs	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061ba:	431a      	orrs	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061c4:	431a      	orrs	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ce:	ea42 0103 	orr.w	r1, r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	0c1b      	lsrs	r3, r3, #16
 80061e8:	f003 0204 	and.w	r2, r3, #4
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	f003 0310 	and.w	r3, r3, #16
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fa:	f003 0308 	and.w	r3, r3, #8
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006208:	ea42 0103 	orr.w	r1, r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b082      	sub	sp, #8
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e040      	b.n	80062c6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006248:	2b00      	cmp	r3, #0
 800624a:	d106      	bne.n	800625a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7fb f97f 	bl	8001558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2224      	movs	r2, #36	; 0x24
 800625e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0201 	bic.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f82d 	bl	80062d0 <UART_SetConfig>
 8006276:	4603      	mov	r3, r0
 8006278:	2b01      	cmp	r3, #1
 800627a:	d101      	bne.n	8006280 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e022      	b.n	80062c6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fad9 	bl	8006840 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800629c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0201 	orr.w	r2, r2, #1
 80062bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fb60 	bl	8006984 <UART_CheckIdleState>
 80062c4:	4603      	mov	r3, r0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062d4:	b08a      	sub	sp, #40	; 0x28
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	431a      	orrs	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	431a      	orrs	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	4ba4      	ldr	r3, [pc, #656]	; (8006590 <UART_SetConfig+0x2c0>)
 8006300:	4013      	ands	r3, r2
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	6812      	ldr	r2, [r2, #0]
 8006306:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006308:	430b      	orrs	r3, r1
 800630a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	68da      	ldr	r2, [r3, #12]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a99      	ldr	r2, [pc, #612]	; (8006594 <UART_SetConfig+0x2c4>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d004      	beq.n	800633c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006338:	4313      	orrs	r3, r2
 800633a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634c:	430a      	orrs	r2, r1
 800634e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a90      	ldr	r2, [pc, #576]	; (8006598 <UART_SetConfig+0x2c8>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d126      	bne.n	80063a8 <UART_SetConfig+0xd8>
 800635a:	4b90      	ldr	r3, [pc, #576]	; (800659c <UART_SetConfig+0x2cc>)
 800635c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006360:	f003 0303 	and.w	r3, r3, #3
 8006364:	2b03      	cmp	r3, #3
 8006366:	d81b      	bhi.n	80063a0 <UART_SetConfig+0xd0>
 8006368:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <UART_SetConfig+0xa0>)
 800636a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636e:	bf00      	nop
 8006370:	08006381 	.word	0x08006381
 8006374:	08006391 	.word	0x08006391
 8006378:	08006389 	.word	0x08006389
 800637c:	08006399 	.word	0x08006399
 8006380:	2301      	movs	r3, #1
 8006382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006386:	e116      	b.n	80065b6 <UART_SetConfig+0x2e6>
 8006388:	2302      	movs	r3, #2
 800638a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800638e:	e112      	b.n	80065b6 <UART_SetConfig+0x2e6>
 8006390:	2304      	movs	r3, #4
 8006392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006396:	e10e      	b.n	80065b6 <UART_SetConfig+0x2e6>
 8006398:	2308      	movs	r3, #8
 800639a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800639e:	e10a      	b.n	80065b6 <UART_SetConfig+0x2e6>
 80063a0:	2310      	movs	r3, #16
 80063a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063a6:	e106      	b.n	80065b6 <UART_SetConfig+0x2e6>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a7c      	ldr	r2, [pc, #496]	; (80065a0 <UART_SetConfig+0x2d0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d138      	bne.n	8006424 <UART_SetConfig+0x154>
 80063b2:	4b7a      	ldr	r3, [pc, #488]	; (800659c <UART_SetConfig+0x2cc>)
 80063b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b8:	f003 030c 	and.w	r3, r3, #12
 80063bc:	2b0c      	cmp	r3, #12
 80063be:	d82d      	bhi.n	800641c <UART_SetConfig+0x14c>
 80063c0:	a201      	add	r2, pc, #4	; (adr r2, 80063c8 <UART_SetConfig+0xf8>)
 80063c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c6:	bf00      	nop
 80063c8:	080063fd 	.word	0x080063fd
 80063cc:	0800641d 	.word	0x0800641d
 80063d0:	0800641d 	.word	0x0800641d
 80063d4:	0800641d 	.word	0x0800641d
 80063d8:	0800640d 	.word	0x0800640d
 80063dc:	0800641d 	.word	0x0800641d
 80063e0:	0800641d 	.word	0x0800641d
 80063e4:	0800641d 	.word	0x0800641d
 80063e8:	08006405 	.word	0x08006405
 80063ec:	0800641d 	.word	0x0800641d
 80063f0:	0800641d 	.word	0x0800641d
 80063f4:	0800641d 	.word	0x0800641d
 80063f8:	08006415 	.word	0x08006415
 80063fc:	2300      	movs	r3, #0
 80063fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006402:	e0d8      	b.n	80065b6 <UART_SetConfig+0x2e6>
 8006404:	2302      	movs	r3, #2
 8006406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800640a:	e0d4      	b.n	80065b6 <UART_SetConfig+0x2e6>
 800640c:	2304      	movs	r3, #4
 800640e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006412:	e0d0      	b.n	80065b6 <UART_SetConfig+0x2e6>
 8006414:	2308      	movs	r3, #8
 8006416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800641a:	e0cc      	b.n	80065b6 <UART_SetConfig+0x2e6>
 800641c:	2310      	movs	r3, #16
 800641e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006422:	e0c8      	b.n	80065b6 <UART_SetConfig+0x2e6>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a5e      	ldr	r2, [pc, #376]	; (80065a4 <UART_SetConfig+0x2d4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d125      	bne.n	800647a <UART_SetConfig+0x1aa>
 800642e:	4b5b      	ldr	r3, [pc, #364]	; (800659c <UART_SetConfig+0x2cc>)
 8006430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006434:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006438:	2b30      	cmp	r3, #48	; 0x30
 800643a:	d016      	beq.n	800646a <UART_SetConfig+0x19a>
 800643c:	2b30      	cmp	r3, #48	; 0x30
 800643e:	d818      	bhi.n	8006472 <UART_SetConfig+0x1a2>
 8006440:	2b20      	cmp	r3, #32
 8006442:	d00a      	beq.n	800645a <UART_SetConfig+0x18a>
 8006444:	2b20      	cmp	r3, #32
 8006446:	d814      	bhi.n	8006472 <UART_SetConfig+0x1a2>
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <UART_SetConfig+0x182>
 800644c:	2b10      	cmp	r3, #16
 800644e:	d008      	beq.n	8006462 <UART_SetConfig+0x192>
 8006450:	e00f      	b.n	8006472 <UART_SetConfig+0x1a2>
 8006452:	2300      	movs	r3, #0
 8006454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006458:	e0ad      	b.n	80065b6 <UART_SetConfig+0x2e6>
 800645a:	2302      	movs	r3, #2
 800645c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006460:	e0a9      	b.n	80065b6 <UART_SetConfig+0x2e6>
 8006462:	2304      	movs	r3, #4
 8006464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006468:	e0a5      	b.n	80065b6 <UART_SetConfig+0x2e6>
 800646a:	2308      	movs	r3, #8
 800646c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006470:	e0a1      	b.n	80065b6 <UART_SetConfig+0x2e6>
 8006472:	2310      	movs	r3, #16
 8006474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006478:	e09d      	b.n	80065b6 <UART_SetConfig+0x2e6>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a4a      	ldr	r2, [pc, #296]	; (80065a8 <UART_SetConfig+0x2d8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d125      	bne.n	80064d0 <UART_SetConfig+0x200>
 8006484:	4b45      	ldr	r3, [pc, #276]	; (800659c <UART_SetConfig+0x2cc>)
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800648e:	2bc0      	cmp	r3, #192	; 0xc0
 8006490:	d016      	beq.n	80064c0 <UART_SetConfig+0x1f0>
 8006492:	2bc0      	cmp	r3, #192	; 0xc0
 8006494:	d818      	bhi.n	80064c8 <UART_SetConfig+0x1f8>
 8006496:	2b80      	cmp	r3, #128	; 0x80
 8006498:	d00a      	beq.n	80064b0 <UART_SetConfig+0x1e0>
 800649a:	2b80      	cmp	r3, #128	; 0x80
 800649c:	d814      	bhi.n	80064c8 <UART_SetConfig+0x1f8>
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <UART_SetConfig+0x1d8>
 80064a2:	2b40      	cmp	r3, #64	; 0x40
 80064a4:	d008      	beq.n	80064b8 <UART_SetConfig+0x1e8>
 80064a6:	e00f      	b.n	80064c8 <UART_SetConfig+0x1f8>
 80064a8:	2300      	movs	r3, #0
 80064aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ae:	e082      	b.n	80065b6 <UART_SetConfig+0x2e6>
 80064b0:	2302      	movs	r3, #2
 80064b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064b6:	e07e      	b.n	80065b6 <UART_SetConfig+0x2e6>
 80064b8:	2304      	movs	r3, #4
 80064ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064be:	e07a      	b.n	80065b6 <UART_SetConfig+0x2e6>
 80064c0:	2308      	movs	r3, #8
 80064c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064c6:	e076      	b.n	80065b6 <UART_SetConfig+0x2e6>
 80064c8:	2310      	movs	r3, #16
 80064ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ce:	e072      	b.n	80065b6 <UART_SetConfig+0x2e6>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a35      	ldr	r2, [pc, #212]	; (80065ac <UART_SetConfig+0x2dc>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d12a      	bne.n	8006530 <UART_SetConfig+0x260>
 80064da:	4b30      	ldr	r3, [pc, #192]	; (800659c <UART_SetConfig+0x2cc>)
 80064dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064e8:	d01a      	beq.n	8006520 <UART_SetConfig+0x250>
 80064ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064ee:	d81b      	bhi.n	8006528 <UART_SetConfig+0x258>
 80064f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064f4:	d00c      	beq.n	8006510 <UART_SetConfig+0x240>
 80064f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064fa:	d815      	bhi.n	8006528 <UART_SetConfig+0x258>
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <UART_SetConfig+0x238>
 8006500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006504:	d008      	beq.n	8006518 <UART_SetConfig+0x248>
 8006506:	e00f      	b.n	8006528 <UART_SetConfig+0x258>
 8006508:	2300      	movs	r3, #0
 800650a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800650e:	e052      	b.n	80065b6 <UART_SetConfig+0x2e6>
 8006510:	2302      	movs	r3, #2
 8006512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006516:	e04e      	b.n	80065b6 <UART_SetConfig+0x2e6>
 8006518:	2304      	movs	r3, #4
 800651a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800651e:	e04a      	b.n	80065b6 <UART_SetConfig+0x2e6>
 8006520:	2308      	movs	r3, #8
 8006522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006526:	e046      	b.n	80065b6 <UART_SetConfig+0x2e6>
 8006528:	2310      	movs	r3, #16
 800652a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800652e:	e042      	b.n	80065b6 <UART_SetConfig+0x2e6>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a17      	ldr	r2, [pc, #92]	; (8006594 <UART_SetConfig+0x2c4>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d13a      	bne.n	80065b0 <UART_SetConfig+0x2e0>
 800653a:	4b18      	ldr	r3, [pc, #96]	; (800659c <UART_SetConfig+0x2cc>)
 800653c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006540:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006544:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006548:	d01a      	beq.n	8006580 <UART_SetConfig+0x2b0>
 800654a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800654e:	d81b      	bhi.n	8006588 <UART_SetConfig+0x2b8>
 8006550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006554:	d00c      	beq.n	8006570 <UART_SetConfig+0x2a0>
 8006556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800655a:	d815      	bhi.n	8006588 <UART_SetConfig+0x2b8>
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <UART_SetConfig+0x298>
 8006560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006564:	d008      	beq.n	8006578 <UART_SetConfig+0x2a8>
 8006566:	e00f      	b.n	8006588 <UART_SetConfig+0x2b8>
 8006568:	2300      	movs	r3, #0
 800656a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800656e:	e022      	b.n	80065b6 <UART_SetConfig+0x2e6>
 8006570:	2302      	movs	r3, #2
 8006572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006576:	e01e      	b.n	80065b6 <UART_SetConfig+0x2e6>
 8006578:	2304      	movs	r3, #4
 800657a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800657e:	e01a      	b.n	80065b6 <UART_SetConfig+0x2e6>
 8006580:	2308      	movs	r3, #8
 8006582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006586:	e016      	b.n	80065b6 <UART_SetConfig+0x2e6>
 8006588:	2310      	movs	r3, #16
 800658a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800658e:	e012      	b.n	80065b6 <UART_SetConfig+0x2e6>
 8006590:	efff69f3 	.word	0xefff69f3
 8006594:	40008000 	.word	0x40008000
 8006598:	40013800 	.word	0x40013800
 800659c:	40021000 	.word	0x40021000
 80065a0:	40004400 	.word	0x40004400
 80065a4:	40004800 	.word	0x40004800
 80065a8:	40004c00 	.word	0x40004c00
 80065ac:	40005000 	.word	0x40005000
 80065b0:	2310      	movs	r3, #16
 80065b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a9f      	ldr	r2, [pc, #636]	; (8006838 <UART_SetConfig+0x568>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d17a      	bne.n	80066b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d824      	bhi.n	8006612 <UART_SetConfig+0x342>
 80065c8:	a201      	add	r2, pc, #4	; (adr r2, 80065d0 <UART_SetConfig+0x300>)
 80065ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ce:	bf00      	nop
 80065d0:	080065f5 	.word	0x080065f5
 80065d4:	08006613 	.word	0x08006613
 80065d8:	080065fd 	.word	0x080065fd
 80065dc:	08006613 	.word	0x08006613
 80065e0:	08006603 	.word	0x08006603
 80065e4:	08006613 	.word	0x08006613
 80065e8:	08006613 	.word	0x08006613
 80065ec:	08006613 	.word	0x08006613
 80065f0:	0800660b 	.word	0x0800660b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065f4:	f7fe f828 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 80065f8:	61f8      	str	r0, [r7, #28]
        break;
 80065fa:	e010      	b.n	800661e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065fc:	4b8f      	ldr	r3, [pc, #572]	; (800683c <UART_SetConfig+0x56c>)
 80065fe:	61fb      	str	r3, [r7, #28]
        break;
 8006600:	e00d      	b.n	800661e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006602:	f7fd ff89 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 8006606:	61f8      	str	r0, [r7, #28]
        break;
 8006608:	e009      	b.n	800661e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800660a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800660e:	61fb      	str	r3, [r7, #28]
        break;
 8006610:	e005      	b.n	800661e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006612:	2300      	movs	r3, #0
 8006614:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800661c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 80fb 	beq.w	800681c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	4613      	mov	r3, r2
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	4413      	add	r3, r2
 8006630:	69fa      	ldr	r2, [r7, #28]
 8006632:	429a      	cmp	r2, r3
 8006634:	d305      	bcc.n	8006642 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	429a      	cmp	r2, r3
 8006640:	d903      	bls.n	800664a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006648:	e0e8      	b.n	800681c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	2200      	movs	r2, #0
 800664e:	461c      	mov	r4, r3
 8006650:	4615      	mov	r5, r2
 8006652:	f04f 0200 	mov.w	r2, #0
 8006656:	f04f 0300 	mov.w	r3, #0
 800665a:	022b      	lsls	r3, r5, #8
 800665c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006660:	0222      	lsls	r2, r4, #8
 8006662:	68f9      	ldr	r1, [r7, #12]
 8006664:	6849      	ldr	r1, [r1, #4]
 8006666:	0849      	lsrs	r1, r1, #1
 8006668:	2000      	movs	r0, #0
 800666a:	4688      	mov	r8, r1
 800666c:	4681      	mov	r9, r0
 800666e:	eb12 0a08 	adds.w	sl, r2, r8
 8006672:	eb43 0b09 	adc.w	fp, r3, r9
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	603b      	str	r3, [r7, #0]
 800667e:	607a      	str	r2, [r7, #4]
 8006680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006684:	4650      	mov	r0, sl
 8006686:	4659      	mov	r1, fp
 8006688:	f7f9 fd9e 	bl	80001c8 <__aeabi_uldivmod>
 800668c:	4602      	mov	r2, r0
 800668e:	460b      	mov	r3, r1
 8006690:	4613      	mov	r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800669a:	d308      	bcc.n	80066ae <UART_SetConfig+0x3de>
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066a2:	d204      	bcs.n	80066ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	60da      	str	r2, [r3, #12]
 80066ac:	e0b6      	b.n	800681c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80066b4:	e0b2      	b.n	800681c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066be:	d15e      	bne.n	800677e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80066c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	d828      	bhi.n	800671a <UART_SetConfig+0x44a>
 80066c8:	a201      	add	r2, pc, #4	; (adr r2, 80066d0 <UART_SetConfig+0x400>)
 80066ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ce:	bf00      	nop
 80066d0:	080066f5 	.word	0x080066f5
 80066d4:	080066fd 	.word	0x080066fd
 80066d8:	08006705 	.word	0x08006705
 80066dc:	0800671b 	.word	0x0800671b
 80066e0:	0800670b 	.word	0x0800670b
 80066e4:	0800671b 	.word	0x0800671b
 80066e8:	0800671b 	.word	0x0800671b
 80066ec:	0800671b 	.word	0x0800671b
 80066f0:	08006713 	.word	0x08006713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066f4:	f7fd ffa8 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 80066f8:	61f8      	str	r0, [r7, #28]
        break;
 80066fa:	e014      	b.n	8006726 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066fc:	f7fd ffba 	bl	8004674 <HAL_RCC_GetPCLK2Freq>
 8006700:	61f8      	str	r0, [r7, #28]
        break;
 8006702:	e010      	b.n	8006726 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006704:	4b4d      	ldr	r3, [pc, #308]	; (800683c <UART_SetConfig+0x56c>)
 8006706:	61fb      	str	r3, [r7, #28]
        break;
 8006708:	e00d      	b.n	8006726 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800670a:	f7fd ff05 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 800670e:	61f8      	str	r0, [r7, #28]
        break;
 8006710:	e009      	b.n	8006726 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006716:	61fb      	str	r3, [r7, #28]
        break;
 8006718:	e005      	b.n	8006726 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800671a:	2300      	movs	r3, #0
 800671c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006724:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d077      	beq.n	800681c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	005a      	lsls	r2, r3, #1
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	085b      	lsrs	r3, r3, #1
 8006736:	441a      	add	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006740:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	2b0f      	cmp	r3, #15
 8006746:	d916      	bls.n	8006776 <UART_SetConfig+0x4a6>
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800674e:	d212      	bcs.n	8006776 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	b29b      	uxth	r3, r3
 8006754:	f023 030f 	bic.w	r3, r3, #15
 8006758:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	085b      	lsrs	r3, r3, #1
 800675e:	b29b      	uxth	r3, r3
 8006760:	f003 0307 	and.w	r3, r3, #7
 8006764:	b29a      	uxth	r2, r3
 8006766:	8afb      	ldrh	r3, [r7, #22]
 8006768:	4313      	orrs	r3, r2
 800676a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	8afa      	ldrh	r2, [r7, #22]
 8006772:	60da      	str	r2, [r3, #12]
 8006774:	e052      	b.n	800681c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800677c:	e04e      	b.n	800681c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800677e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006782:	2b08      	cmp	r3, #8
 8006784:	d827      	bhi.n	80067d6 <UART_SetConfig+0x506>
 8006786:	a201      	add	r2, pc, #4	; (adr r2, 800678c <UART_SetConfig+0x4bc>)
 8006788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678c:	080067b1 	.word	0x080067b1
 8006790:	080067b9 	.word	0x080067b9
 8006794:	080067c1 	.word	0x080067c1
 8006798:	080067d7 	.word	0x080067d7
 800679c:	080067c7 	.word	0x080067c7
 80067a0:	080067d7 	.word	0x080067d7
 80067a4:	080067d7 	.word	0x080067d7
 80067a8:	080067d7 	.word	0x080067d7
 80067ac:	080067cf 	.word	0x080067cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067b0:	f7fd ff4a 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 80067b4:	61f8      	str	r0, [r7, #28]
        break;
 80067b6:	e014      	b.n	80067e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067b8:	f7fd ff5c 	bl	8004674 <HAL_RCC_GetPCLK2Freq>
 80067bc:	61f8      	str	r0, [r7, #28]
        break;
 80067be:	e010      	b.n	80067e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067c0:	4b1e      	ldr	r3, [pc, #120]	; (800683c <UART_SetConfig+0x56c>)
 80067c2:	61fb      	str	r3, [r7, #28]
        break;
 80067c4:	e00d      	b.n	80067e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067c6:	f7fd fea7 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 80067ca:	61f8      	str	r0, [r7, #28]
        break;
 80067cc:	e009      	b.n	80067e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067d2:	61fb      	str	r3, [r7, #28]
        break;
 80067d4:	e005      	b.n	80067e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80067e0:	bf00      	nop
    }

    if (pclk != 0U)
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d019      	beq.n	800681c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	085a      	lsrs	r2, r3, #1
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	441a      	add	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	2b0f      	cmp	r3, #15
 8006800:	d909      	bls.n	8006816 <UART_SetConfig+0x546>
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006808:	d205      	bcs.n	8006816 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	b29a      	uxth	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	60da      	str	r2, [r3, #12]
 8006814:	e002      	b.n	800681c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006828:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800682c:	4618      	mov	r0, r3
 800682e:	3728      	adds	r7, #40	; 0x28
 8006830:	46bd      	mov	sp, r7
 8006832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006836:	bf00      	nop
 8006838:	40008000 	.word	0x40008000
 800683c:	00f42400 	.word	0x00f42400

08006840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00a      	beq.n	800686a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00a      	beq.n	800688c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	430a      	orrs	r2, r1
 800688a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00a      	beq.n	80068ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	f003 0308 	and.w	r3, r3, #8
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d4:	f003 0310 	and.w	r3, r3, #16
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00a      	beq.n	80068f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01a      	beq.n	8006956 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800693e:	d10a      	bne.n	8006956 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00a      	beq.n	8006978 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	605a      	str	r2, [r3, #4]
  }
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af02      	add	r7, sp, #8
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006994:	f7fa ffcc 	bl	8001930 <HAL_GetTick>
 8006998:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0308 	and.w	r3, r3, #8
 80069a4:	2b08      	cmp	r3, #8
 80069a6:	d10e      	bne.n	80069c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f82d 	bl	8006a16 <UART_WaitOnFlagUntilTimeout>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e023      	b.n	8006a0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b04      	cmp	r3, #4
 80069d2:	d10e      	bne.n	80069f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f817 	bl	8006a16 <UART_WaitOnFlagUntilTimeout>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e00d      	b.n	8006a0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2220      	movs	r2, #32
 80069f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2220      	movs	r2, #32
 80069fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b09c      	sub	sp, #112	; 0x70
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	603b      	str	r3, [r7, #0]
 8006a22:	4613      	mov	r3, r2
 8006a24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a26:	e0a5      	b.n	8006b74 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2e:	f000 80a1 	beq.w	8006b74 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a32:	f7fa ff7d 	bl	8001930 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d302      	bcc.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x32>
 8006a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d13e      	bne.n	8006ac6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a5c:	667b      	str	r3, [r7, #100]	; 0x64
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a68:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e6      	bne.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3308      	adds	r3, #8
 8006a80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	f023 0301 	bic.w	r3, r3, #1
 8006a90:	663b      	str	r3, [r7, #96]	; 0x60
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3308      	adds	r3, #8
 8006a98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006aa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e5      	bne.n	8006a7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e067      	b.n	8006b96 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d04f      	beq.n	8006b74 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ae2:	d147      	bne.n	8006b74 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006aec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af6:	e853 3f00 	ldrex	r3, [r3]
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b14:	e841 2300 	strex	r3, r2, [r1]
 8006b18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1e6      	bne.n	8006aee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3308      	adds	r3, #8
 8006b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	e853 3f00 	ldrex	r3, [r3]
 8006b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f023 0301 	bic.w	r3, r3, #1
 8006b36:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b40:	623a      	str	r2, [r7, #32]
 8006b42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b44:	69f9      	ldr	r1, [r7, #28]
 8006b46:	6a3a      	ldr	r2, [r7, #32]
 8006b48:	e841 2300 	strex	r3, r2, [r1]
 8006b4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1e5      	bne.n	8006b20 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2220      	movs	r2, #32
 8006b58:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e010      	b.n	8006b96 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	69da      	ldr	r2, [r3, #28]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	bf0c      	ite	eq
 8006b84:	2301      	moveq	r3, #1
 8006b86:	2300      	movne	r3, #0
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	f43f af4a 	beq.w	8006a28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3770      	adds	r7, #112	; 0x70
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	f107 001c 	add.w	r0, r7, #28
 8006bac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f9a1 	bl	8006f04 <USB_CoreReset>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d106      	bne.n	8006bda <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	639a      	str	r2, [r3, #56]	; 0x38
 8006bd8:	e005      	b.n	8006be6 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bf2:	b004      	add	sp, #16
 8006bf4:	4770      	bx	lr

08006bf6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f043 0201 	orr.w	r2, r3, #1
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f023 0201 	bic.w	r2, r3, #1
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b084      	sub	sp, #16
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	460b      	mov	r3, r1
 8006c44:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c56:	78fb      	ldrb	r3, [r7, #3]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d115      	bne.n	8006c88 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c68:	2001      	movs	r0, #1
 8006c6a:	f7fa fe6d 	bl	8001948 <HAL_Delay>
      ms++;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3301      	adds	r3, #1
 8006c72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f936 	bl	8006ee6 <USB_GetMode>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d01e      	beq.n	8006cbe <USB_SetCurrentMode+0x84>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2b31      	cmp	r3, #49	; 0x31
 8006c84:	d9f0      	bls.n	8006c68 <USB_SetCurrentMode+0x2e>
 8006c86:	e01a      	b.n	8006cbe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c88:	78fb      	ldrb	r3, [r7, #3]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d115      	bne.n	8006cba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c9a:	2001      	movs	r0, #1
 8006c9c:	f7fa fe54 	bl	8001948 <HAL_Delay>
      ms++;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f91d 	bl	8006ee6 <USB_GetMode>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <USB_SetCurrentMode+0x84>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b31      	cmp	r3, #49	; 0x31
 8006cb6:	d9f0      	bls.n	8006c9a <USB_SetCurrentMode+0x60>
 8006cb8:	e001      	b.n	8006cbe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e005      	b.n	8006cca <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b32      	cmp	r3, #50	; 0x32
 8006cc2:	d101      	bne.n	8006cc8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e000      	b.n	8006cca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
	...

08006cd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4a13      	ldr	r2, [pc, #76]	; (8006d38 <USB_FlushTxFifo+0x64>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d901      	bls.n	8006cf4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e01b      	b.n	8006d2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	daf2      	bge.n	8006ce2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	019b      	lsls	r3, r3, #6
 8006d04:	f043 0220 	orr.w	r2, r3, #32
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4a08      	ldr	r2, [pc, #32]	; (8006d38 <USB_FlushTxFifo+0x64>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d901      	bls.n	8006d1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e006      	b.n	8006d2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	f003 0320 	and.w	r3, r3, #32
 8006d26:	2b20      	cmp	r3, #32
 8006d28:	d0f0      	beq.n	8006d0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	00030d40 	.word	0x00030d40

08006d3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	4a11      	ldr	r2, [pc, #68]	; (8006d98 <USB_FlushRxFifo+0x5c>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d901      	bls.n	8006d5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e018      	b.n	8006d8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	daf2      	bge.n	8006d48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2210      	movs	r2, #16
 8006d6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4a08      	ldr	r2, [pc, #32]	; (8006d98 <USB_FlushRxFifo+0x5c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d901      	bls.n	8006d7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e006      	b.n	8006d8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f003 0310 	and.w	r3, r3, #16
 8006d86:	2b10      	cmp	r3, #16
 8006d88:	d0f0      	beq.n	8006d6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	00030d40 	.word	0x00030d40

08006d9c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b089      	sub	sp, #36	; 0x24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	4611      	mov	r1, r2
 8006da8:	461a      	mov	r2, r3
 8006daa:	460b      	mov	r3, r1
 8006dac:	71fb      	strb	r3, [r7, #7]
 8006dae:	4613      	mov	r3, r2
 8006db0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006dba:	88bb      	ldrh	r3, [r7, #4]
 8006dbc:	3303      	adds	r3, #3
 8006dbe:	089b      	lsrs	r3, r3, #2
 8006dc0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61bb      	str	r3, [r7, #24]
 8006dc6:	e018      	b.n	8006dfa <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006dc8:	79fb      	ldrb	r3, [r7, #7]
 8006dca:	031a      	lsls	r2, r3, #12
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	3301      	adds	r3, #1
 8006de0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	3301      	adds	r3, #1
 8006de6:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	3301      	adds	r3, #1
 8006dec:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	3301      	adds	r3, #1
 8006df2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	3301      	adds	r3, #1
 8006df8:	61bb      	str	r3, [r7, #24]
 8006dfa:	69ba      	ldr	r2, [r7, #24]
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d3e2      	bcc.n	8006dc8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3724      	adds	r7, #36	; 0x24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b08b      	sub	sp, #44	; 0x2c
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e26:	88fb      	ldrh	r3, [r7, #6]
 8006e28:	089b      	lsrs	r3, r3, #2
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e2e:	88fb      	ldrh	r3, [r7, #6]
 8006e30:	f003 0303 	and.w	r3, r3, #3
 8006e34:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e36:	2300      	movs	r3, #0
 8006e38:	623b      	str	r3, [r7, #32]
 8006e3a:	e014      	b.n	8006e66 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e50:	3301      	adds	r3, #1
 8006e52:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	3301      	adds	r3, #1
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	3301      	adds	r3, #1
 8006e64:	623b      	str	r3, [r7, #32]
 8006e66:	6a3a      	ldr	r2, [r7, #32]
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d3e6      	bcc.n	8006e3c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e6e:	8bfb      	ldrh	r3, [r7, #30]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d01e      	beq.n	8006eb2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f107 0310 	add.w	r3, r7, #16
 8006e84:	6812      	ldr	r2, [r2, #0]
 8006e86:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	fa22 f303 	lsr.w	r3, r2, r3
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e98:	701a      	strb	r2, [r3, #0]
      i++;
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006ea6:	8bfb      	ldrh	r3, [r7, #30]
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006eac:	8bfb      	ldrh	r3, [r7, #30]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1ea      	bne.n	8006e88 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	372c      	adds	r7, #44	; 0x2c
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3714      	adds	r7, #20
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b083      	sub	sp, #12
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	f003 0301 	and.w	r3, r3, #1
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
	...

08006f04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3301      	adds	r3, #1
 8006f14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4a13      	ldr	r2, [pc, #76]	; (8006f68 <USB_CoreReset+0x64>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d901      	bls.n	8006f22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e01b      	b.n	8006f5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	daf2      	bge.n	8006f10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	f043 0201 	orr.w	r2, r3, #1
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4a09      	ldr	r2, [pc, #36]	; (8006f68 <USB_CoreReset+0x64>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d901      	bls.n	8006f4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e006      	b.n	8006f5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d0f0      	beq.n	8006f3a <USB_CoreReset+0x36>

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	00030d40 	.word	0x00030d40

08006f6c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f6c:	b084      	sub	sp, #16
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b086      	sub	sp, #24
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	2300      	movs	r3, #0
 8006f90:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f96:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fb8:	f023 0304 	bic.w	r3, r3, #4
 8006fbc:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fbe:	2110      	movs	r1, #16
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff fe87 	bl	8006cd4 <USB_FlushTxFifo>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f7ff feb3 	bl	8006d3c <USB_FlushRxFifo>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	613b      	str	r3, [r7, #16]
 8006fe4:	e015      	b.n	8007012 <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4413      	add	r3, r2
 8007002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007006:	461a      	mov	r2, r3
 8007008:	2300      	movs	r3, #0
 800700a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	3301      	adds	r3, #1
 8007010:	613b      	str	r3, [r7, #16]
 8007012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	429a      	cmp	r2, r3
 8007018:	d3e5      	bcc.n	8006fe6 <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f04f 32ff 	mov.w	r2, #4294967295
 8007026:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2280      	movs	r2, #128	; 0x80
 800702c:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a0c      	ldr	r2, [pc, #48]	; (8007064 <USB_HostInit+0xf8>)
 8007032:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a0c      	ldr	r2, [pc, #48]	; (8007068 <USB_HostInit+0xfc>)
 8007038:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	f043 0210 	orr.w	r2, r3, #16
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	699a      	ldr	r2, [r3, #24]
 800704c:	4b07      	ldr	r3, [pc, #28]	; (800706c <USB_HostInit+0x100>)
 800704e:	4313      	orrs	r3, r2
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007054:	7dfb      	ldrb	r3, [r7, #23]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007060:	b004      	add	sp, #16
 8007062:	4770      	bx	lr
 8007064:	00600080 	.word	0x00600080
 8007068:	004000e0 	.word	0x004000e0
 800706c:	a3200008 	.word	0xa3200008

08007070 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	460b      	mov	r3, r1
 800707a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800708e:	f023 0303 	bic.w	r3, r3, #3
 8007092:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	78fb      	ldrb	r3, [r7, #3]
 800709e:	f003 0303 	and.w	r3, r3, #3
 80070a2:	68f9      	ldr	r1, [r7, #12]
 80070a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80070a8:	4313      	orrs	r3, r2
 80070aa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80070ac:	78fb      	ldrb	r3, [r7, #3]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d107      	bne.n	80070c2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070b8:	461a      	mov	r2, r3
 80070ba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80070be:	6053      	str	r3, [r2, #4]
 80070c0:	e009      	b.n	80070d6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80070c2:	78fb      	ldrb	r3, [r7, #3]
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d106      	bne.n	80070d6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070ce:	461a      	mov	r2, r3
 80070d0:	f241 7370 	movw	r3, #6000	; 0x1770
 80070d4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007104:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800710e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007112:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007114:	2064      	movs	r0, #100	; 0x64
 8007116:	f7fa fc17 	bl	8001948 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007122:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007126:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007128:	200a      	movs	r0, #10
 800712a:	f7fa fc0d 	bl	8001948 <HAL_Delay>

  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	460b      	mov	r3, r1
 8007142:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007148:	2300      	movs	r3, #0
 800714a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800715c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d109      	bne.n	800717c <USB_DriveVbus+0x44>
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d106      	bne.n	800717c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007176:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800717a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007186:	d109      	bne.n	800719c <USB_DriveVbus+0x64>
 8007188:	78fb      	ldrb	r3, [r7, #3]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d106      	bne.n	800719c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007196:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800719a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b085      	sub	sp, #20
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	0c5b      	lsrs	r3, r3, #17
 80071c8:	f003 0303 	and.w	r3, r3, #3
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	b29b      	uxth	r3, r3
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3714      	adds	r7, #20
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
	...

080071fc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b088      	sub	sp, #32
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	4608      	mov	r0, r1
 8007206:	4611      	mov	r1, r2
 8007208:	461a      	mov	r2, r3
 800720a:	4603      	mov	r3, r0
 800720c:	70fb      	strb	r3, [r7, #3]
 800720e:	460b      	mov	r3, r1
 8007210:	70bb      	strb	r3, [r7, #2]
 8007212:	4613      	mov	r3, r2
 8007214:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800721e:	78fb      	ldrb	r3, [r7, #3]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	4413      	add	r3, r2
 8007226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800722a:	461a      	mov	r2, r3
 800722c:	f04f 33ff 	mov.w	r3, #4294967295
 8007230:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007232:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007236:	2b03      	cmp	r3, #3
 8007238:	d867      	bhi.n	800730a <USB_HC_Init+0x10e>
 800723a:	a201      	add	r2, pc, #4	; (adr r2, 8007240 <USB_HC_Init+0x44>)
 800723c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007240:	08007251 	.word	0x08007251
 8007244:	080072cd 	.word	0x080072cd
 8007248:	08007251 	.word	0x08007251
 800724c:	0800728f 	.word	0x0800728f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007250:	78fb      	ldrb	r3, [r7, #3]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	4413      	add	r3, r2
 8007258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800725c:	461a      	mov	r2, r3
 800725e:	f240 439d 	movw	r3, #1181	; 0x49d
 8007262:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007264:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007268:	2b00      	cmp	r3, #0
 800726a:	da51      	bge.n	8007310 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800726c:	78fb      	ldrb	r3, [r7, #3]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	4413      	add	r3, r2
 8007274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	78fa      	ldrb	r2, [r7, #3]
 800727c:	0151      	lsls	r1, r2, #5
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	440a      	add	r2, r1
 8007282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800728a:	60d3      	str	r3, [r2, #12]
      }
      break;
 800728c:	e040      	b.n	8007310 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	4413      	add	r3, r2
 8007296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800729a:	461a      	mov	r2, r3
 800729c:	f240 639d 	movw	r3, #1693	; 0x69d
 80072a0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80072a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	da34      	bge.n	8007314 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80072aa:	78fb      	ldrb	r3, [r7, #3]
 80072ac:	015a      	lsls	r2, r3, #5
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	78fa      	ldrb	r2, [r7, #3]
 80072ba:	0151      	lsls	r1, r2, #5
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	440a      	add	r2, r1
 80072c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072c8:	60d3      	str	r3, [r2, #12]
      }

      break;
 80072ca:	e023      	b.n	8007314 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80072cc:	78fb      	ldrb	r3, [r7, #3]
 80072ce:	015a      	lsls	r2, r3, #5
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	4413      	add	r3, r2
 80072d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d8:	461a      	mov	r2, r3
 80072da:	f240 2325 	movw	r3, #549	; 0x225
 80072de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80072e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	da17      	bge.n	8007318 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80072e8:	78fb      	ldrb	r3, [r7, #3]
 80072ea:	015a      	lsls	r2, r3, #5
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	78fa      	ldrb	r2, [r7, #3]
 80072f8:	0151      	lsls	r1, r2, #5
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	440a      	add	r2, r1
 80072fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007302:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007306:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007308:	e006      	b.n	8007318 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	77fb      	strb	r3, [r7, #31]
      break;
 800730e:	e004      	b.n	800731a <USB_HC_Init+0x11e>
      break;
 8007310:	bf00      	nop
 8007312:	e002      	b.n	800731a <USB_HC_Init+0x11e>
      break;
 8007314:	bf00      	nop
 8007316:	e000      	b.n	800731a <USB_HC_Init+0x11e>
      break;
 8007318:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800731a:	78fb      	ldrb	r3, [r7, #3]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	4413      	add	r3, r2
 8007322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	78fa      	ldrb	r2, [r7, #3]
 800732a:	0151      	lsls	r1, r2, #5
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	440a      	add	r2, r1
 8007330:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007334:	f043 0302 	orr.w	r3, r3, #2
 8007338:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007340:	699a      	ldr	r2, [r3, #24]
 8007342:	78fb      	ldrb	r3, [r7, #3]
 8007344:	f003 030f 	and.w	r3, r3, #15
 8007348:	2101      	movs	r1, #1
 800734a:	fa01 f303 	lsl.w	r3, r1, r3
 800734e:	6939      	ldr	r1, [r7, #16]
 8007350:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007354:	4313      	orrs	r3, r2
 8007356:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007364:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007368:	2b00      	cmp	r3, #0
 800736a:	da03      	bge.n	8007374 <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800736c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007370:	61bb      	str	r3, [r7, #24]
 8007372:	e001      	b.n	8007378 <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7ff ff16 	bl	80071aa <USB_GetHostSpeed>
 800737e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007380:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007384:	2b02      	cmp	r3, #2
 8007386:	d106      	bne.n	8007396 <USB_HC_Init+0x19a>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b02      	cmp	r3, #2
 800738c:	d003      	beq.n	8007396 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800738e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007392:	617b      	str	r3, [r7, #20]
 8007394:	e001      	b.n	800739a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800739a:	787b      	ldrb	r3, [r7, #1]
 800739c:	059b      	lsls	r3, r3, #22
 800739e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80073a2:	78bb      	ldrb	r3, [r7, #2]
 80073a4:	02db      	lsls	r3, r3, #11
 80073a6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80073aa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80073ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80073b0:	049b      	lsls	r3, r3, #18
 80073b2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80073b6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80073b8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80073ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80073be:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80073c4:	78fb      	ldrb	r3, [r7, #3]
 80073c6:	0159      	lsls	r1, r3, #5
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	440b      	add	r3, r1
 80073cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073d0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80073d6:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80073d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80073dc:	2b03      	cmp	r3, #3
 80073de:	d003      	beq.n	80073e8 <USB_HC_Init+0x1ec>
 80073e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d10f      	bne.n	8007408 <USB_HC_Init+0x20c>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80073e8:	78fb      	ldrb	r3, [r7, #3]
 80073ea:	015a      	lsls	r2, r3, #5
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	4413      	add	r3, r2
 80073f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	78fa      	ldrb	r2, [r7, #3]
 80073f8:	0151      	lsls	r1, r2, #5
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	440a      	add	r2, r1
 80073fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007402:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007406:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007408:	7ffb      	ldrb	r3, [r7, #31]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3720      	adds	r7, #32
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop

08007414 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b088      	sub	sp, #32
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	785b      	ldrb	r3, [r3, #1]
 8007426:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800742c:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d018      	beq.n	8007468 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	8912      	ldrh	r2, [r2, #8]
 800743e:	4413      	add	r3, r2
 8007440:	3b01      	subs	r3, #1
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	8912      	ldrh	r2, [r2, #8]
 8007446:	fbb3 f3f2 	udiv	r3, r3, r2
 800744a:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 800744c:	8bfa      	ldrh	r2, [r7, #30]
 800744e:	8a7b      	ldrh	r3, [r7, #18]
 8007450:	429a      	cmp	r2, r3
 8007452:	d90b      	bls.n	800746c <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8007454:	8a7b      	ldrh	r3, [r7, #18]
 8007456:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007458:	8bfb      	ldrh	r3, [r7, #30]
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	8912      	ldrh	r2, [r2, #8]
 800745e:	fb03 f202 	mul.w	r2, r3, r2
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	611a      	str	r2, [r3, #16]
 8007466:	e001      	b.n	800746c <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8007468:	2301      	movs	r3, #1
 800746a:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	78db      	ldrb	r3, [r3, #3]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d007      	beq.n	8007484 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007474:	8bfb      	ldrh	r3, [r7, #30]
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	8912      	ldrh	r2, [r2, #8]
 800747a:	fb03 f202 	mul.w	r2, r3, r2
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	611a      	str	r2, [r3, #16]
 8007482:	e003      	b.n	800748c <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	695a      	ldr	r2, [r3, #20]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007494:	8bfb      	ldrh	r3, [r7, #30]
 8007496:	04d9      	lsls	r1, r3, #19
 8007498:	4b59      	ldr	r3, [pc, #356]	; (8007600 <USB_HC_StartXfer+0x1ec>)
 800749a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800749c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	7a9b      	ldrb	r3, [r3, #10]
 80074a2:	075b      	lsls	r3, r3, #29
 80074a4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074a8:	6979      	ldr	r1, [r7, #20]
 80074aa:	0148      	lsls	r0, r1, #5
 80074ac:	69b9      	ldr	r1, [r7, #24]
 80074ae:	4401      	add	r1, r0
 80074b0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80074b4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074b6:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	bf0c      	ite	eq
 80074c8:	2301      	moveq	r3, #1
 80074ca:	2300      	movne	r3, #0
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	0151      	lsls	r1, r2, #5
 80074e2:	69ba      	ldr	r2, [r7, #24]
 80074e4:	440a      	add	r2, r1
 80074e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80074ee:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	7c7b      	ldrb	r3, [r7, #17]
 8007500:	075b      	lsls	r3, r3, #29
 8007502:	6979      	ldr	r1, [r7, #20]
 8007504:	0148      	lsls	r0, r1, #5
 8007506:	69b9      	ldr	r1, [r7, #24]
 8007508:	4401      	add	r1, r0
 800750a:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800750e:	4313      	orrs	r3, r2
 8007510:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	4413      	add	r3, r2
 800751a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007528:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	78db      	ldrb	r3, [r3, #3]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d004      	beq.n	800753c <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007538:	60bb      	str	r3, [r7, #8]
 800753a:	e003      	b.n	8007544 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007542:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800754a:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	4413      	add	r3, r2
 8007554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007558:	461a      	mov	r2, r3
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	78db      	ldrb	r3, [r3, #3]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d147      	bne.n	80075f6 <USB_HC_StartXfer+0x1e2>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d043      	beq.n	80075f6 <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	79db      	ldrb	r3, [r3, #7]
 8007572:	2b03      	cmp	r3, #3
 8007574:	d830      	bhi.n	80075d8 <USB_HC_StartXfer+0x1c4>
 8007576:	a201      	add	r2, pc, #4	; (adr r2, 800757c <USB_HC_StartXfer+0x168>)
 8007578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757c:	0800758d 	.word	0x0800758d
 8007580:	080075b1 	.word	0x080075b1
 8007584:	0800758d 	.word	0x0800758d
 8007588:	080075b1 	.word	0x080075b1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	3303      	adds	r3, #3
 8007592:	089b      	lsrs	r3, r3, #2
 8007594:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007596:	89fa      	ldrh	r2, [r7, #14]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759c:	b29b      	uxth	r3, r3
 800759e:	429a      	cmp	r2, r3
 80075a0:	d91c      	bls.n	80075dc <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	f043 0220 	orr.w	r2, r3, #32
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80075ae:	e015      	b.n	80075dc <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	3303      	adds	r3, #3
 80075b6:	089b      	lsrs	r3, r3, #2
 80075b8:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80075ba:	89fa      	ldrh	r2, [r7, #14]
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d90a      	bls.n	80075e0 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	619a      	str	r2, [r3, #24]
        }
        break;
 80075d6:	e003      	b.n	80075e0 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 80075d8:	bf00      	nop
 80075da:	e002      	b.n	80075e2 <USB_HC_StartXfer+0x1ce>
        break;
 80075dc:	bf00      	nop
 80075de:	e000      	b.n	80075e2 <USB_HC_StartXfer+0x1ce>
        break;
 80075e0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	68d9      	ldr	r1, [r3, #12]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	785a      	ldrb	r2, [r3, #1]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f7ff fbd3 	bl	8006d9c <USB_WritePacket>
  }

  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3720      	adds	r7, #32
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	1ff80000 	.word	0x1ff80000

08007604 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	b29b      	uxth	r3, r3
}
 800761a:	4618      	mov	r0, r3
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007626:	b480      	push	{r7}
 8007628:	b089      	sub	sp, #36	; 0x24
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	460b      	mov	r3, r1
 8007630:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007636:	78fb      	ldrb	r3, [r7, #3]
 8007638:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	4413      	add	r3, r2
 8007646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	0c9b      	lsrs	r3, r3, #18
 800764e:	f003 0303 	and.w	r3, r3, #3
 8007652:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	4413      	add	r3, r2
 800765c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	0fdb      	lsrs	r3, r3, #31
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f003 0320 	and.w	r3, r3, #32
 8007672:	2b20      	cmp	r3, #32
 8007674:	d104      	bne.n	8007680 <USB_HC_Halt+0x5a>
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	e0c8      	b.n	8007812 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d002      	beq.n	800768c <USB_HC_Halt+0x66>
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	2b02      	cmp	r3, #2
 800768a:	d163      	bne.n	8007754 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	015a      	lsls	r2, r3, #5
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	4413      	add	r3, r2
 8007694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	69ba      	ldr	r2, [r7, #24]
 800769c:	0151      	lsls	r1, r2, #5
 800769e:	69fa      	ldr	r2, [r7, #28]
 80076a0:	440a      	add	r2, r1
 80076a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076aa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f003 0320 	and.w	r3, r3, #32
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f040 80ab 	bne.w	8007810 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d133      	bne.n	800772e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	69ba      	ldr	r2, [r7, #24]
 80076d6:	0151      	lsls	r1, r2, #5
 80076d8:	69fa      	ldr	r2, [r7, #28]
 80076da:	440a      	add	r2, r1
 80076dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076e4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	0151      	lsls	r1, r2, #5
 80076f8:	69fa      	ldr	r2, [r7, #28]
 80076fa:	440a      	add	r2, r1
 80076fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007700:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007704:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	3301      	adds	r3, #1
 800770a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007712:	d81d      	bhi.n	8007750 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	4413      	add	r3, r2
 800771c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007726:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800772a:	d0ec      	beq.n	8007706 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800772c:	e070      	b.n	8007810 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	4413      	add	r3, r2
 8007736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	0151      	lsls	r1, r2, #5
 8007740:	69fa      	ldr	r2, [r7, #28]
 8007742:	440a      	add	r2, r1
 8007744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007748:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800774c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800774e:	e05f      	b.n	8007810 <USB_HC_Halt+0x1ea>
            break;
 8007750:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007752:	e05d      	b.n	8007810 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	4413      	add	r3, r2
 800775c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	0151      	lsls	r1, r2, #5
 8007766:	69fa      	ldr	r2, [r7, #28]
 8007768:	440a      	add	r2, r1
 800776a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800776e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007772:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d133      	bne.n	80077ec <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	4413      	add	r3, r2
 800778c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	69ba      	ldr	r2, [r7, #24]
 8007794:	0151      	lsls	r1, r2, #5
 8007796:	69fa      	ldr	r2, [r7, #28]
 8007798:	440a      	add	r2, r1
 800779a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800779e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077a2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	015a      	lsls	r2, r3, #5
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	4413      	add	r3, r2
 80077ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	69ba      	ldr	r2, [r7, #24]
 80077b4:	0151      	lsls	r1, r2, #5
 80077b6:	69fa      	ldr	r2, [r7, #28]
 80077b8:	440a      	add	r2, r1
 80077ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077c2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3301      	adds	r3, #1
 80077c8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077d0:	d81d      	bhi.n	800780e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077e8:	d0ec      	beq.n	80077c4 <USB_HC_Halt+0x19e>
 80077ea:	e011      	b.n	8007810 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	69ba      	ldr	r2, [r7, #24]
 80077fc:	0151      	lsls	r1, r2, #5
 80077fe:	69fa      	ldr	r2, [r7, #28]
 8007800:	440a      	add	r2, r1
 8007802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007806:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	e000      	b.n	8007810 <USB_HC_Halt+0x1ea>
          break;
 800780e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3724      	adds	r7, #36	; 0x24
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b088      	sub	sp, #32
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800782e:	2300      	movs	r3, #0
 8007830:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7ff f9f0 	bl	8006c18 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007838:	2110      	movs	r1, #16
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff fa4a 	bl	8006cd4 <USB_FlushTxFifo>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7ff fa76 	bl	8006d3c <USB_FlushRxFifo>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800785a:	2300      	movs	r3, #0
 800785c:	61bb      	str	r3, [r7, #24]
 800785e:	e01f      	b.n	80078a0 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	4413      	add	r3, r2
 8007868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007876:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800787e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007886:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	4413      	add	r3, r2
 8007890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007894:	461a      	mov	r2, r3
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	3301      	adds	r3, #1
 800789e:	61bb      	str	r3, [r7, #24]
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	2b0f      	cmp	r3, #15
 80078a4:	d9dc      	bls.n	8007860 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80078a6:	2300      	movs	r3, #0
 80078a8:	61bb      	str	r3, [r7, #24]
 80078aa:	e034      	b.n	8007916 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078c2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078ca:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078d2:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078e0:	461a      	mov	r2, r3
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	3301      	adds	r3, #1
 80078ea:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078f2:	d80c      	bhi.n	800790e <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800790a:	d0ec      	beq.n	80078e6 <USB_StopHost+0xc8>
 800790c:	e000      	b.n	8007910 <USB_StopHost+0xf2>
        break;
 800790e:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	3301      	adds	r3, #1
 8007914:	61bb      	str	r3, [r7, #24]
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	2b0f      	cmp	r3, #15
 800791a:	d9c7      	bls.n	80078ac <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007922:	461a      	mov	r2, r3
 8007924:	f04f 33ff 	mov.w	r3, #4294967295
 8007928:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f04f 32ff 	mov.w	r2, #4294967295
 8007930:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7ff f95f 	bl	8006bf6 <USB_EnableGlobalInt>

  return ret;
 8007938:	7ffb      	ldrb	r3, [r7, #31]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3720      	adds	r7, #32
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007942:	b590      	push	{r4, r7, lr}
 8007944:	b089      	sub	sp, #36	; 0x24
 8007946:	af04      	add	r7, sp, #16
 8007948:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800794a:	2301      	movs	r3, #1
 800794c:	2202      	movs	r2, #2
 800794e:	2102      	movs	r1, #2
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fc67 	bl	8008224 <USBH_FindInterface>
 8007956:	4603      	mov	r3, r0
 8007958:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800795a:	7bfb      	ldrb	r3, [r7, #15]
 800795c:	2bff      	cmp	r3, #255	; 0xff
 800795e:	d002      	beq.n	8007966 <USBH_CDC_InterfaceInit+0x24>
 8007960:	7bfb      	ldrb	r3, [r7, #15]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d901      	bls.n	800796a <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007966:	2302      	movs	r3, #2
 8007968:	e13d      	b.n	8007be6 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	4619      	mov	r1, r3
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fc3c 	bl	80081ec <USBH_SelectInterface>
 8007974:	4603      	mov	r3, r0
 8007976:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800797e:	2302      	movs	r3, #2
 8007980:	e131      	b.n	8007be6 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007988:	2050      	movs	r0, #80	; 0x50
 800798a:	f002 fa05 	bl	8009d98 <malloc>
 800798e:	4603      	mov	r3, r0
 8007990:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80079a2:	2302      	movs	r3, #2
 80079a4:	e11f      	b.n	8007be6 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80079a6:	2250      	movs	r2, #80	; 0x50
 80079a8:	2100      	movs	r1, #0
 80079aa:	68b8      	ldr	r0, [r7, #8]
 80079ac:	f002 fa04 	bl	8009db8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	211a      	movs	r1, #26
 80079b6:	fb01 f303 	mul.w	r3, r1, r3
 80079ba:	4413      	add	r3, r2
 80079bc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	b25b      	sxtb	r3, r3
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	da15      	bge.n	80079f4 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	211a      	movs	r1, #26
 80079ce:	fb01 f303 	mul.w	r3, r1, r3
 80079d2:	4413      	add	r3, r2
 80079d4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80079d8:	781a      	ldrb	r2, [r3, #0]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	211a      	movs	r1, #26
 80079e4:	fb01 f303 	mul.w	r3, r1, r3
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80079ee:	881a      	ldrh	r2, [r3, #0]
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	785b      	ldrb	r3, [r3, #1]
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f001 fe33 	bl	8009666 <USBH_AllocPipe>
 8007a00:	4603      	mov	r3, r0
 8007a02:	461a      	mov	r2, r3
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	7819      	ldrb	r1, [r3, #0]
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	7858      	ldrb	r0, [r3, #1]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	8952      	ldrh	r2, [r2, #10]
 8007a20:	9202      	str	r2, [sp, #8]
 8007a22:	2203      	movs	r2, #3
 8007a24:	9201      	str	r2, [sp, #4]
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	4623      	mov	r3, r4
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 fdeb 	bl	8009608 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	2200      	movs	r2, #0
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f002 f8fe 	bl	8009c3c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007a40:	2300      	movs	r3, #0
 8007a42:	2200      	movs	r2, #0
 8007a44:	210a      	movs	r1, #10
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fbec 	bl	8008224 <USBH_FindInterface>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
 8007a52:	2bff      	cmp	r3, #255	; 0xff
 8007a54:	d002      	beq.n	8007a5c <USBH_CDC_InterfaceInit+0x11a>
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d901      	bls.n	8007a60 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	e0c2      	b.n	8007be6 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	211a      	movs	r1, #26
 8007a66:	fb01 f303 	mul.w	r3, r1, r3
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	b25b      	sxtb	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	da16      	bge.n	8007aa6 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	211a      	movs	r1, #26
 8007a7e:	fb01 f303 	mul.w	r3, r1, r3
 8007a82:	4413      	add	r3, r2
 8007a84:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007a88:	781a      	ldrb	r2, [r3, #0]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	211a      	movs	r1, #26
 8007a94:	fb01 f303 	mul.w	r3, r1, r3
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007a9e:	881a      	ldrh	r2, [r3, #0]
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	835a      	strh	r2, [r3, #26]
 8007aa4:	e015      	b.n	8007ad2 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	211a      	movs	r1, #26
 8007aac:	fb01 f303 	mul.w	r3, r1, r3
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ab6:	781a      	ldrb	r2, [r3, #0]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	211a      	movs	r1, #26
 8007ac2:	fb01 f303 	mul.w	r3, r1, r3
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007acc:	881a      	ldrh	r2, [r3, #0]
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	211a      	movs	r1, #26
 8007ad8:	fb01 f303 	mul.w	r3, r1, r3
 8007adc:	4413      	add	r3, r2
 8007ade:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	b25b      	sxtb	r3, r3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	da16      	bge.n	8007b18 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	211a      	movs	r1, #26
 8007af0:	fb01 f303 	mul.w	r3, r1, r3
 8007af4:	4413      	add	r3, r2
 8007af6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007afa:	781a      	ldrb	r2, [r3, #0]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	211a      	movs	r1, #26
 8007b06:	fb01 f303 	mul.w	r3, r1, r3
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007b10:	881a      	ldrh	r2, [r3, #0]
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	835a      	strh	r2, [r3, #26]
 8007b16:	e015      	b.n	8007b44 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	211a      	movs	r1, #26
 8007b1e:	fb01 f303 	mul.w	r3, r1, r3
 8007b22:	4413      	add	r3, r2
 8007b24:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007b28:	781a      	ldrb	r2, [r3, #0]
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	211a      	movs	r1, #26
 8007b34:	fb01 f303 	mul.w	r3, r1, r3
 8007b38:	4413      	add	r3, r2
 8007b3a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007b3e:	881a      	ldrh	r2, [r3, #0]
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	7b9b      	ldrb	r3, [r3, #14]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f001 fd8b 	bl	8009666 <USBH_AllocPipe>
 8007b50:	4603      	mov	r3, r0
 8007b52:	461a      	mov	r2, r3
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	7bdb      	ldrb	r3, [r3, #15]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f001 fd81 	bl	8009666 <USBH_AllocPipe>
 8007b64:	4603      	mov	r3, r0
 8007b66:	461a      	mov	r2, r3
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	7b59      	ldrb	r1, [r3, #13]
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	7b98      	ldrb	r0, [r3, #14]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	8b12      	ldrh	r2, [r2, #24]
 8007b84:	9202      	str	r2, [sp, #8]
 8007b86:	2202      	movs	r2, #2
 8007b88:	9201      	str	r2, [sp, #4]
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	4623      	mov	r3, r4
 8007b8e:	4602      	mov	r2, r0
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f001 fd39 	bl	8009608 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	7b19      	ldrb	r1, [r3, #12]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	7bd8      	ldrb	r0, [r3, #15]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	8b52      	ldrh	r2, [r2, #26]
 8007bae:	9202      	str	r2, [sp, #8]
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	9201      	str	r2, [sp, #4]
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	4623      	mov	r3, r4
 8007bb8:	4602      	mov	r2, r0
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f001 fd24 	bl	8009608 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	7b5b      	ldrb	r3, [r3, #13]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	4619      	mov	r1, r3
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f002 f833 	bl	8009c3c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	7b1b      	ldrb	r3, [r3, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	4619      	mov	r1, r3
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f002 f82c 	bl	8009c3c <USBH_LL_SetToggle>

  return USBH_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd90      	pop	{r4, r7, pc}

08007bee <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bfc:	69db      	ldr	r3, [r3, #28]
 8007bfe:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00e      	beq.n	8007c26 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f001 fd19 	bl	8009646 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f001 fd44 	bl	80096a8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	7b1b      	ldrb	r3, [r3, #12]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00e      	beq.n	8007c4c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	7b1b      	ldrb	r3, [r3, #12]
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f001 fd06 	bl	8009646 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	7b1b      	ldrb	r3, [r3, #12]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f001 fd31 	bl	80096a8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	7b5b      	ldrb	r3, [r3, #13]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00e      	beq.n	8007c72 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	7b5b      	ldrb	r3, [r3, #13]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f001 fcf3 	bl	8009646 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	7b5b      	ldrb	r3, [r3, #13]
 8007c64:	4619      	mov	r1, r3
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f001 fd1e 	bl	80096a8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00b      	beq.n	8007c96 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f002 f88e 	bl	8009da8 <free>
    phost->pActiveClass->pData = 0U;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c92:	2200      	movs	r2, #0
 8007c94:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cae:	69db      	ldr	r3, [r3, #28]
 8007cb0:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	3340      	adds	r3, #64	; 0x40
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f8b2 	bl	8007e22 <GetLineCoding>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007cc2:	7afb      	ldrb	r3, [r7, #11]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d105      	bne.n	8007cd4 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007cce:	2102      	movs	r1, #2
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007cd4:	7afb      	ldrb	r3, [r7, #11]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007d00:	2b04      	cmp	r3, #4
 8007d02:	d877      	bhi.n	8007df4 <USBH_CDC_Process+0x114>
 8007d04:	a201      	add	r2, pc, #4	; (adr r2, 8007d0c <USBH_CDC_Process+0x2c>)
 8007d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0a:	bf00      	nop
 8007d0c:	08007d21 	.word	0x08007d21
 8007d10:	08007d27 	.word	0x08007d27
 8007d14:	08007d57 	.word	0x08007d57
 8007d18:	08007dcb 	.word	0x08007dcb
 8007d1c:	08007dd9 	.word	0x08007dd9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	73fb      	strb	r3, [r7, #15]
      break;
 8007d24:	e06d      	b.n	8007e02 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f897 	bl	8007e60 <SetLineCoding>
 8007d32:	4603      	mov	r3, r0
 8007d34:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007d36:	7bbb      	ldrb	r3, [r7, #14]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d104      	bne.n	8007d46 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007d44:	e058      	b.n	8007df8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007d46:	7bbb      	ldrb	r3, [r7, #14]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d055      	beq.n	8007df8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2204      	movs	r2, #4
 8007d50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007d54:	e050      	b.n	8007df8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	3340      	adds	r3, #64	; 0x40
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f860 	bl	8007e22 <GetLineCoding>
 8007d62:	4603      	mov	r3, r0
 8007d64:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007d66:	7bbb      	ldrb	r3, [r7, #14]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d126      	bne.n	8007dba <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d7e:	791b      	ldrb	r3, [r3, #4]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d13b      	bne.n	8007dfc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d8e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d133      	bne.n	8007dfc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d9e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d12b      	bne.n	8007dfc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dac:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d124      	bne.n	8007dfc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f958 	bl	8008068 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007db8:	e020      	b.n	8007dfc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007dba:	7bbb      	ldrb	r3, [r7, #14]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d01d      	beq.n	8007dfc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2204      	movs	r2, #4
 8007dc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007dc8:	e018      	b.n	8007dfc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f867 	bl	8007e9e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f8da 	bl	8007f8a <CDC_ProcessReception>
      break;
 8007dd6:	e014      	b.n	8007e02 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007dd8:	2100      	movs	r1, #0
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 ffe3 	bl	8008da6 <USBH_ClrFeature>
 8007de0:	4603      	mov	r3, r0
 8007de2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007de4:	7bbb      	ldrb	r3, [r7, #14]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10a      	bne.n	8007e00 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007df2:	e005      	b.n	8007e00 <USBH_CDC_Process+0x120>

    default:
      break;
 8007df4:	bf00      	nop
 8007df6:	e004      	b.n	8007e02 <USBH_CDC_Process+0x122>
      break;
 8007df8:	bf00      	nop
 8007dfa:	e002      	b.n	8007e02 <USBH_CDC_Process+0x122>
      break;
 8007dfc:	bf00      	nop
 8007dfe:	e000      	b.n	8007e02 <USBH_CDC_Process+0x122>
      break;
 8007e00:	bf00      	nop

  }

  return status;
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b082      	sub	sp, #8
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	22a1      	movs	r2, #161	; 0xa1
 8007e30:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2221      	movs	r2, #33	; 0x21
 8007e36:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2207      	movs	r2, #7
 8007e48:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	2207      	movs	r2, #7
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f001 f988 	bl	8009166 <USBH_CtlReq>
 8007e56:	4603      	mov	r3, r0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2221      	movs	r2, #33	; 0x21
 8007e6e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2220      	movs	r2, #32
 8007e74:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2207      	movs	r2, #7
 8007e86:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	2207      	movs	r2, #7
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f001 f969 	bl	8009166 <USBH_CtlReq>
 8007e94:	4603      	mov	r3, r0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b086      	sub	sp, #24
 8007ea2:	af02      	add	r7, sp, #8
 8007ea4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d002      	beq.n	8007ec4 <CDC_ProcessTransmission+0x26>
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d023      	beq.n	8007f0a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007ec2:	e05e      	b.n	8007f82 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	8b12      	ldrh	r2, [r2, #24]
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d90b      	bls.n	8007ee8 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	69d9      	ldr	r1, [r3, #28]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	8b1a      	ldrh	r2, [r3, #24]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	7b5b      	ldrb	r3, [r3, #13]
 8007edc:	2001      	movs	r0, #1
 8007ede:	9000      	str	r0, [sp, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f001 fb4e 	bl	8009582 <USBH_BulkSendData>
 8007ee6:	e00b      	b.n	8007f00 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	7b5b      	ldrb	r3, [r3, #13]
 8007ef6:	2001      	movs	r0, #1
 8007ef8:	9000      	str	r0, [sp, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f001 fb41 	bl	8009582 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2202      	movs	r2, #2
 8007f04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007f08:	e03b      	b.n	8007f82 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	7b5b      	ldrb	r3, [r3, #13]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f001 fe69 	bl	8009be8 <USBH_LL_GetURBState>
 8007f16:	4603      	mov	r3, r0
 8007f18:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007f1a:	7afb      	ldrb	r3, [r7, #11]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d128      	bne.n	8007f72 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	8b12      	ldrh	r2, [r2, #24]
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d90e      	bls.n	8007f4a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	8b12      	ldrh	r2, [r2, #24]
 8007f34:	1a9a      	subs	r2, r3, r2
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	69db      	ldr	r3, [r3, #28]
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	8b12      	ldrh	r2, [r2, #24]
 8007f42:	441a      	add	r2, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	61da      	str	r2, [r3, #28]
 8007f48:	e002      	b.n	8007f50 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d004      	beq.n	8007f62 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007f60:	e00e      	b.n	8007f80 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f868 	bl	8008040 <USBH_CDC_TransmitCallback>
      break;
 8007f70:	e006      	b.n	8007f80 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007f72:	7afb      	ldrb	r3, [r7, #11]
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d103      	bne.n	8007f80 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007f80:	bf00      	nop
  }
}
 8007f82:	bf00      	nop
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b086      	sub	sp, #24
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d002      	beq.n	8007fb0 <CDC_ProcessReception+0x26>
 8007faa:	2b04      	cmp	r3, #4
 8007fac:	d00e      	beq.n	8007fcc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007fae:	e043      	b.n	8008038 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	6a19      	ldr	r1, [r3, #32]
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	8b5a      	ldrh	r2, [r3, #26]
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	7b1b      	ldrb	r3, [r3, #12]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f001 fb05 	bl	80095cc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	2204      	movs	r2, #4
 8007fc6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007fca:	e035      	b.n	8008038 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	7b1b      	ldrb	r3, [r3, #12]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f001 fe08 	bl	8009be8 <USBH_LL_GetURBState>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007fdc:	7cfb      	ldrb	r3, [r7, #19]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d129      	bne.n	8008036 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	7b1b      	ldrb	r3, [r3, #12]
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f001 fd6b 	bl	8009ac4 <USBH_LL_GetLastXferSize>
 8007fee:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d016      	beq.n	8008028 <CDC_ProcessReception+0x9e>
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	8b5b      	ldrh	r3, [r3, #26]
 8007ffe:	461a      	mov	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4293      	cmp	r3, r2
 8008004:	d910      	bls.n	8008028 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	1ad2      	subs	r2, r2, r3
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	6a1a      	ldr	r2, [r3, #32]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	441a      	add	r2, r3
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	2203      	movs	r2, #3
 8008022:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008026:	e006      	b.n	8008036 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f80f 	bl	8008054 <USBH_CDC_ReceiveCallback>
      break;
 8008036:	bf00      	nop
  }
}
 8008038:	bf00      	nop
 800803a:	3718      	adds	r7, #24
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	4613      	mov	r3, r2
 8008088:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008090:	2302      	movs	r3, #2
 8008092:	e029      	b.n	80080e8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	79fa      	ldrb	r2, [r7, #7]
 8008098:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2200      	movs	r2, #0
 80080a0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f000 f81f 	bl	80080f0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d003      	beq.n	80080e0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f001 fc3b 	bl	800995c <USBH_LL_Init>

  return USBH_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80080f8:	2300      	movs	r3, #0
 80080fa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80080fc:	2300      	movs	r3, #0
 80080fe:	60fb      	str	r3, [r7, #12]
 8008100:	e009      	b.n	8008116 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	33e0      	adds	r3, #224	; 0xe0
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	4413      	add	r3, r2
 800810c:	2200      	movs	r2, #0
 800810e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	3301      	adds	r3, #1
 8008114:	60fb      	str	r3, [r7, #12]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2b0e      	cmp	r3, #14
 800811a:	d9f2      	bls.n	8008102 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800811c:	2300      	movs	r3, #0
 800811e:	60fb      	str	r3, [r7, #12]
 8008120:	e009      	b.n	8008136 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	4413      	add	r3, r2
 8008128:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800812c:	2200      	movs	r2, #0
 800812e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	3301      	adds	r3, #1
 8008134:	60fb      	str	r3, [r7, #12]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800813c:	d3f1      	bcc.n	8008122 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2240      	movs	r2, #64	; 0x40
 8008162:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d016      	beq.n	80081da <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10e      	bne.n	80081d4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80081bc:	1c59      	adds	r1, r3, #1
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	33de      	adds	r3, #222	; 0xde
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80081ce:	2300      	movs	r3, #0
 80081d0:	73fb      	strb	r3, [r7, #15]
 80081d2:	e004      	b.n	80081de <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80081d4:	2302      	movs	r3, #2
 80081d6:	73fb      	strb	r3, [r7, #15]
 80081d8:	e001      	b.n	80081de <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80081da:	2302      	movs	r3, #2
 80081dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80081de:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	460b      	mov	r3, r1
 80081f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008202:	78fa      	ldrb	r2, [r7, #3]
 8008204:	429a      	cmp	r2, r3
 8008206:	d204      	bcs.n	8008212 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	78fa      	ldrb	r2, [r7, #3]
 800820c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008210:	e001      	b.n	8008216 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008212:	2302      	movs	r3, #2
 8008214:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008216:	7bfb      	ldrb	r3, [r7, #15]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008224:	b480      	push	{r7}
 8008226:	b087      	sub	sp, #28
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	4608      	mov	r0, r1
 800822e:	4611      	mov	r1, r2
 8008230:	461a      	mov	r2, r3
 8008232:	4603      	mov	r3, r0
 8008234:	70fb      	strb	r3, [r7, #3]
 8008236:	460b      	mov	r3, r1
 8008238:	70bb      	strb	r3, [r7, #2]
 800823a:	4613      	mov	r3, r2
 800823c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008242:	2300      	movs	r3, #0
 8008244:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800824c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800824e:	e025      	b.n	800829c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008250:	7dfb      	ldrb	r3, [r7, #23]
 8008252:	221a      	movs	r2, #26
 8008254:	fb02 f303 	mul.w	r3, r2, r3
 8008258:	3308      	adds	r3, #8
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	4413      	add	r3, r2
 800825e:	3302      	adds	r3, #2
 8008260:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	795b      	ldrb	r3, [r3, #5]
 8008266:	78fa      	ldrb	r2, [r7, #3]
 8008268:	429a      	cmp	r2, r3
 800826a:	d002      	beq.n	8008272 <USBH_FindInterface+0x4e>
 800826c:	78fb      	ldrb	r3, [r7, #3]
 800826e:	2bff      	cmp	r3, #255	; 0xff
 8008270:	d111      	bne.n	8008296 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008276:	78ba      	ldrb	r2, [r7, #2]
 8008278:	429a      	cmp	r2, r3
 800827a:	d002      	beq.n	8008282 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800827c:	78bb      	ldrb	r3, [r7, #2]
 800827e:	2bff      	cmp	r3, #255	; 0xff
 8008280:	d109      	bne.n	8008296 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008286:	787a      	ldrb	r2, [r7, #1]
 8008288:	429a      	cmp	r2, r3
 800828a:	d002      	beq.n	8008292 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800828c:	787b      	ldrb	r3, [r7, #1]
 800828e:	2bff      	cmp	r3, #255	; 0xff
 8008290:	d101      	bne.n	8008296 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008292:	7dfb      	ldrb	r3, [r7, #23]
 8008294:	e006      	b.n	80082a4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008296:	7dfb      	ldrb	r3, [r7, #23]
 8008298:	3301      	adds	r3, #1
 800829a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800829c:	7dfb      	ldrb	r3, [r7, #23]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d9d6      	bls.n	8008250 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80082a2:	23ff      	movs	r3, #255	; 0xff
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	371c      	adds	r7, #28
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f001 fb8b 	bl	80099d4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80082be:	2101      	movs	r1, #1
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f001 fca4 	bl	8009c0e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b088      	sub	sp, #32
 80082d4:	af04      	add	r7, sp, #16
 80082d6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80082d8:	2302      	movs	r3, #2
 80082da:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80082dc:	2300      	movs	r3, #0
 80082de:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d102      	bne.n	80082f2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2203      	movs	r2, #3
 80082f0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	2b0b      	cmp	r3, #11
 80082fa:	f200 81b3 	bhi.w	8008664 <USBH_Process+0x394>
 80082fe:	a201      	add	r2, pc, #4	; (adr r2, 8008304 <USBH_Process+0x34>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	08008335 	.word	0x08008335
 8008308:	08008367 	.word	0x08008367
 800830c:	080083cf 	.word	0x080083cf
 8008310:	080085ff 	.word	0x080085ff
 8008314:	08008665 	.word	0x08008665
 8008318:	08008473 	.word	0x08008473
 800831c:	080085a5 	.word	0x080085a5
 8008320:	080084a9 	.word	0x080084a9
 8008324:	080084c9 	.word	0x080084c9
 8008328:	080084e9 	.word	0x080084e9
 800832c:	08008517 	.word	0x08008517
 8008330:	080085e7 	.word	0x080085e7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 8193 	beq.w	8008668 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008348:	20c8      	movs	r0, #200	; 0xc8
 800834a:	f001 fca7 	bl	8009c9c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f001 fb9d 	bl	8009a8e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008364:	e180      	b.n	8008668 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800836c:	2b01      	cmp	r3, #1
 800836e:	d107      	bne.n	8008380 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2202      	movs	r2, #2
 800837c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800837e:	e182      	b.n	8008686 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008386:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800838a:	d914      	bls.n	80083b6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008392:	3301      	adds	r3, #1
 8008394:	b2da      	uxtb	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	d903      	bls.n	80083ae <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	220d      	movs	r2, #13
 80083aa:	701a      	strb	r2, [r3, #0]
      break;
 80083ac:	e16b      	b.n	8008686 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	701a      	strb	r2, [r3, #0]
      break;
 80083b4:	e167      	b.n	8008686 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80083bc:	f103 020a 	add.w	r2, r3, #10
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80083c6:	200a      	movs	r0, #10
 80083c8:	f001 fc68 	bl	8009c9c <USBH_Delay>
      break;
 80083cc:	e15b      	b.n	8008686 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d005      	beq.n	80083e4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80083de:	2104      	movs	r1, #4
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80083e4:	2064      	movs	r0, #100	; 0x64
 80083e6:	f001 fc59 	bl	8009c9c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f001 fb28 	bl	8009a40 <USBH_LL_GetSpeed>
 80083f0:	4603      	mov	r3, r0
 80083f2:	461a      	mov	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2205      	movs	r2, #5
 80083fe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008400:	2100      	movs	r1, #0
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f001 f92f 	bl	8009666 <USBH_AllocPipe>
 8008408:	4603      	mov	r3, r0
 800840a:	461a      	mov	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008410:	2180      	movs	r1, #128	; 0x80
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f001 f927 	bl	8009666 <USBH_AllocPipe>
 8008418:	4603      	mov	r3, r0
 800841a:	461a      	mov	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	7919      	ldrb	r1, [r3, #4]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008434:	b292      	uxth	r2, r2
 8008436:	9202      	str	r2, [sp, #8]
 8008438:	2200      	movs	r2, #0
 800843a:	9201      	str	r2, [sp, #4]
 800843c:	9300      	str	r3, [sp, #0]
 800843e:	4603      	mov	r3, r0
 8008440:	2280      	movs	r2, #128	; 0x80
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f001 f8e0 	bl	8009608 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	7959      	ldrb	r1, [r3, #5]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800845c:	b292      	uxth	r2, r2
 800845e:	9202      	str	r2, [sp, #8]
 8008460:	2200      	movs	r2, #0
 8008462:	9201      	str	r2, [sp, #4]
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	4603      	mov	r3, r0
 8008468:	2200      	movs	r2, #0
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f001 f8cc 	bl	8009608 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008470:	e109      	b.n	8008686 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f90c 	bl	8008690 <USBH_HandleEnum>
 8008478:	4603      	mov	r3, r0
 800847a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800847c:	7bbb      	ldrb	r3, [r7, #14]
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b00      	cmp	r3, #0
 8008482:	f040 80f3 	bne.w	800866c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008494:	2b01      	cmp	r3, #1
 8008496:	d103      	bne.n	80084a0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2208      	movs	r2, #8
 800849c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800849e:	e0e5      	b.n	800866c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2207      	movs	r2, #7
 80084a4:	701a      	strb	r2, [r3, #0]
      break;
 80084a6:	e0e1      	b.n	800866c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f000 80de 	beq.w	8008670 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084ba:	2101      	movs	r1, #1
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2208      	movs	r2, #8
 80084c4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80084c6:	e0d3      	b.n	8008670 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fc20 	bl	8008d18 <USBH_SetCfg>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f040 80ca 	bne.w	8008674 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2209      	movs	r2, #9
 80084e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80084e6:	e0c5      	b.n	8008674 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80084ee:	f003 0320 	and.w	r3, r3, #32
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00b      	beq.n	800850e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80084f6:	2101      	movs	r1, #1
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fc30 	bl	8008d5e <USBH_SetFeature>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	f040 80b9 	bne.w	8008678 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	220a      	movs	r2, #10
 800850a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800850c:	e0b4      	b.n	8008678 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	220a      	movs	r2, #10
 8008512:	701a      	strb	r2, [r3, #0]
      break;
 8008514:	e0b0      	b.n	8008678 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 80ad 	beq.w	800867c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800852a:	2300      	movs	r3, #0
 800852c:	73fb      	strb	r3, [r7, #15]
 800852e:	e016      	b.n	800855e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008530:	7bfa      	ldrb	r2, [r7, #15]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	32de      	adds	r2, #222	; 0xde
 8008536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800853a:	791a      	ldrb	r2, [r3, #4]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008542:	429a      	cmp	r2, r3
 8008544:	d108      	bne.n	8008558 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008546:	7bfa      	ldrb	r2, [r7, #15]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	32de      	adds	r2, #222	; 0xde
 800854c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008556:	e005      	b.n	8008564 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008558:	7bfb      	ldrb	r3, [r7, #15]
 800855a:	3301      	adds	r3, #1
 800855c:	73fb      	strb	r3, [r7, #15]
 800855e:	7bfb      	ldrb	r3, [r7, #15]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d0e5      	beq.n	8008530 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800856a:	2b00      	cmp	r3, #0
 800856c:	d016      	beq.n	800859c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	4798      	blx	r3
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d109      	bne.n	8008594 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2206      	movs	r2, #6
 8008584:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800858c:	2103      	movs	r1, #3
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008592:	e073      	b.n	800867c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	220d      	movs	r2, #13
 8008598:	701a      	strb	r2, [r3, #0]
      break;
 800859a:	e06f      	b.n	800867c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	220d      	movs	r2, #13
 80085a0:	701a      	strb	r2, [r3, #0]
      break;
 80085a2:	e06b      	b.n	800867c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d017      	beq.n	80085de <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	4798      	blx	r3
 80085ba:	4603      	mov	r3, r0
 80085bc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80085be:	7bbb      	ldrb	r3, [r7, #14]
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d103      	bne.n	80085ce <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	220b      	movs	r2, #11
 80085ca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80085cc:	e058      	b.n	8008680 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80085ce:	7bbb      	ldrb	r3, [r7, #14]
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d154      	bne.n	8008680 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	220d      	movs	r2, #13
 80085da:	701a      	strb	r2, [r3, #0]
      break;
 80085dc:	e050      	b.n	8008680 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	220d      	movs	r2, #13
 80085e2:	701a      	strb	r2, [r3, #0]
      break;
 80085e4:	e04c      	b.n	8008680 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d049      	beq.n	8008684 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	4798      	blx	r3
      }
      break;
 80085fc:	e042      	b.n	8008684 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7ff fd72 	bl	80080f0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008612:	2b00      	cmp	r3, #0
 8008614:	d009      	beq.n	800862a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008630:	2b00      	cmp	r3, #0
 8008632:	d005      	beq.n	8008640 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800863a:	2105      	movs	r1, #5
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b01      	cmp	r3, #1
 800864a:	d107      	bne.n	800865c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f7ff fe2b 	bl	80082b0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800865a:	e014      	b.n	8008686 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 f9b9 	bl	80099d4 <USBH_LL_Start>
      break;
 8008662:	e010      	b.n	8008686 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008664:	bf00      	nop
 8008666:	e00e      	b.n	8008686 <USBH_Process+0x3b6>
      break;
 8008668:	bf00      	nop
 800866a:	e00c      	b.n	8008686 <USBH_Process+0x3b6>
      break;
 800866c:	bf00      	nop
 800866e:	e00a      	b.n	8008686 <USBH_Process+0x3b6>
    break;
 8008670:	bf00      	nop
 8008672:	e008      	b.n	8008686 <USBH_Process+0x3b6>
      break;
 8008674:	bf00      	nop
 8008676:	e006      	b.n	8008686 <USBH_Process+0x3b6>
      break;
 8008678:	bf00      	nop
 800867a:	e004      	b.n	8008686 <USBH_Process+0x3b6>
      break;
 800867c:	bf00      	nop
 800867e:	e002      	b.n	8008686 <USBH_Process+0x3b6>
      break;
 8008680:	bf00      	nop
 8008682:	e000      	b.n	8008686 <USBH_Process+0x3b6>
      break;
 8008684:	bf00      	nop
  }
  return USBH_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af04      	add	r7, sp, #16
 8008696:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008698:	2301      	movs	r3, #1
 800869a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800869c:	2301      	movs	r3, #1
 800869e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	785b      	ldrb	r3, [r3, #1]
 80086a4:	2b07      	cmp	r3, #7
 80086a6:	f200 81c1 	bhi.w	8008a2c <USBH_HandleEnum+0x39c>
 80086aa:	a201      	add	r2, pc, #4	; (adr r2, 80086b0 <USBH_HandleEnum+0x20>)
 80086ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b0:	080086d1 	.word	0x080086d1
 80086b4:	0800878f 	.word	0x0800878f
 80086b8:	080087f9 	.word	0x080087f9
 80086bc:	08008887 	.word	0x08008887
 80086c0:	080088f1 	.word	0x080088f1
 80086c4:	08008961 	.word	0x08008961
 80086c8:	080089a7 	.word	0x080089a7
 80086cc:	080089ed 	.word	0x080089ed
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80086d0:	2108      	movs	r1, #8
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fa50 	bl	8008b78 <USBH_Get_DevDesc>
 80086d8:	4603      	mov	r3, r0
 80086da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d130      	bne.n	8008744 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	7919      	ldrb	r1, [r3, #4]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008706:	b292      	uxth	r2, r2
 8008708:	9202      	str	r2, [sp, #8]
 800870a:	2200      	movs	r2, #0
 800870c:	9201      	str	r2, [sp, #4]
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	4603      	mov	r3, r0
 8008712:	2280      	movs	r2, #128	; 0x80
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 ff77 	bl	8009608 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	7959      	ldrb	r1, [r3, #5]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800872e:	b292      	uxth	r2, r2
 8008730:	9202      	str	r2, [sp, #8]
 8008732:	2200      	movs	r2, #0
 8008734:	9201      	str	r2, [sp, #4]
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	4603      	mov	r3, r0
 800873a:	2200      	movs	r2, #0
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 ff63 	bl	8009608 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008742:	e175      	b.n	8008a30 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008744:	7bbb      	ldrb	r3, [r7, #14]
 8008746:	2b03      	cmp	r3, #3
 8008748:	f040 8172 	bne.w	8008a30 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008752:	3301      	adds	r3, #1
 8008754:	b2da      	uxtb	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008762:	2b03      	cmp	r3, #3
 8008764:	d903      	bls.n	800876e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	220d      	movs	r2, #13
 800876a:	701a      	strb	r2, [r3, #0]
      break;
 800876c:	e160      	b.n	8008a30 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	795b      	ldrb	r3, [r3, #5]
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 ff97 	bl	80096a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	791b      	ldrb	r3, [r3, #4]
 800877e:	4619      	mov	r1, r3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 ff91 	bl	80096a8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	701a      	strb	r2, [r3, #0]
      break;
 800878c:	e150      	b.n	8008a30 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800878e:	2112      	movs	r1, #18
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f9f1 	bl	8008b78 <USBH_Get_DevDesc>
 8008796:	4603      	mov	r3, r0
 8008798:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800879a:	7bbb      	ldrb	r3, [r7, #14]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d103      	bne.n	80087a8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2202      	movs	r2, #2
 80087a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80087a6:	e145      	b.n	8008a34 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	f040 8142 	bne.w	8008a34 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087b6:	3301      	adds	r3, #1
 80087b8:	b2da      	uxtb	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d903      	bls.n	80087d2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	220d      	movs	r2, #13
 80087ce:	701a      	strb	r2, [r3, #0]
      break;
 80087d0:	e130      	b.n	8008a34 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	795b      	ldrb	r3, [r3, #5]
 80087d6:	4619      	mov	r1, r3
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 ff65 	bl	80096a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	791b      	ldrb	r3, [r3, #4]
 80087e2:	4619      	mov	r1, r3
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 ff5f 	bl	80096a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	701a      	strb	r2, [r3, #0]
      break;
 80087f6:	e11d      	b.n	8008a34 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80087f8:	2101      	movs	r1, #1
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fa68 	bl	8008cd0 <USBH_SetAddress>
 8008800:	4603      	mov	r3, r0
 8008802:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008804:	7bbb      	ldrb	r3, [r7, #14]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d132      	bne.n	8008870 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800880a:	2002      	movs	r0, #2
 800880c:	f001 fa46 	bl	8009c9c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2203      	movs	r2, #3
 800881c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	7919      	ldrb	r1, [r3, #4]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008832:	b292      	uxth	r2, r2
 8008834:	9202      	str	r2, [sp, #8]
 8008836:	2200      	movs	r2, #0
 8008838:	9201      	str	r2, [sp, #4]
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	4603      	mov	r3, r0
 800883e:	2280      	movs	r2, #128	; 0x80
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fee1 	bl	8009608 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	7959      	ldrb	r1, [r3, #5]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800885a:	b292      	uxth	r2, r2
 800885c:	9202      	str	r2, [sp, #8]
 800885e:	2200      	movs	r2, #0
 8008860:	9201      	str	r2, [sp, #4]
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	4603      	mov	r3, r0
 8008866:	2200      	movs	r2, #0
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fecd 	bl	8009608 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800886e:	e0e3      	b.n	8008a38 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008870:	7bbb      	ldrb	r3, [r7, #14]
 8008872:	2b03      	cmp	r3, #3
 8008874:	f040 80e0 	bne.w	8008a38 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	220d      	movs	r2, #13
 800887c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	705a      	strb	r2, [r3, #1]
      break;
 8008884:	e0d8      	b.n	8008a38 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008886:	2109      	movs	r1, #9
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f99d 	bl	8008bc8 <USBH_Get_CfgDesc>
 800888e:	4603      	mov	r3, r0
 8008890:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008892:	7bbb      	ldrb	r3, [r7, #14]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d103      	bne.n	80088a0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2204      	movs	r2, #4
 800889c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800889e:	e0cd      	b.n	8008a3c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088a0:	7bbb      	ldrb	r3, [r7, #14]
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	f040 80ca 	bne.w	8008a3c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80088ae:	3301      	adds	r3, #1
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80088be:	2b03      	cmp	r3, #3
 80088c0:	d903      	bls.n	80088ca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	220d      	movs	r2, #13
 80088c6:	701a      	strb	r2, [r3, #0]
      break;
 80088c8:	e0b8      	b.n	8008a3c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	795b      	ldrb	r3, [r3, #5]
 80088ce:	4619      	mov	r1, r3
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fee9 	bl	80096a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	791b      	ldrb	r3, [r3, #4]
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fee3 	bl	80096a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	701a      	strb	r2, [r3, #0]
      break;
 80088ee:	e0a5      	b.n	8008a3c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f965 	bl	8008bc8 <USBH_Get_CfgDesc>
 80088fe:	4603      	mov	r3, r0
 8008900:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008902:	7bbb      	ldrb	r3, [r7, #14]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d103      	bne.n	8008910 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2205      	movs	r2, #5
 800890c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800890e:	e097      	b.n	8008a40 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	2b03      	cmp	r3, #3
 8008914:	f040 8094 	bne.w	8008a40 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800891e:	3301      	adds	r3, #1
 8008920:	b2da      	uxtb	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800892e:	2b03      	cmp	r3, #3
 8008930:	d903      	bls.n	800893a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	220d      	movs	r2, #13
 8008936:	701a      	strb	r2, [r3, #0]
      break;
 8008938:	e082      	b.n	8008a40 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	795b      	ldrb	r3, [r3, #5]
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 feb1 	bl	80096a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	791b      	ldrb	r3, [r3, #4]
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 feab 	bl	80096a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	701a      	strb	r2, [r3, #0]
      break;
 800895e:	e06f      	b.n	8008a40 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008966:	2b00      	cmp	r3, #0
 8008968:	d019      	beq.n	800899e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008976:	23ff      	movs	r3, #255	; 0xff
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f949 	bl	8008c10 <USBH_Get_StringDesc>
 800897e:	4603      	mov	r3, r0
 8008980:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008982:	7bbb      	ldrb	r3, [r7, #14]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d103      	bne.n	8008990 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2206      	movs	r2, #6
 800898c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800898e:	e059      	b.n	8008a44 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008990:	7bbb      	ldrb	r3, [r7, #14]
 8008992:	2b03      	cmp	r3, #3
 8008994:	d156      	bne.n	8008a44 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2206      	movs	r2, #6
 800899a:	705a      	strb	r2, [r3, #1]
      break;
 800899c:	e052      	b.n	8008a44 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2206      	movs	r2, #6
 80089a2:	705a      	strb	r2, [r3, #1]
      break;
 80089a4:	e04e      	b.n	8008a44 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d019      	beq.n	80089e4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80089bc:	23ff      	movs	r3, #255	; 0xff
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 f926 	bl	8008c10 <USBH_Get_StringDesc>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d103      	bne.n	80089d6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2207      	movs	r2, #7
 80089d2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80089d4:	e038      	b.n	8008a48 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089d6:	7bbb      	ldrb	r3, [r7, #14]
 80089d8:	2b03      	cmp	r3, #3
 80089da:	d135      	bne.n	8008a48 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2207      	movs	r2, #7
 80089e0:	705a      	strb	r2, [r3, #1]
      break;
 80089e2:	e031      	b.n	8008a48 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2207      	movs	r2, #7
 80089e8:	705a      	strb	r2, [r3, #1]
      break;
 80089ea:	e02d      	b.n	8008a48 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d017      	beq.n	8008a26 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008a02:	23ff      	movs	r3, #255	; 0xff
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f903 	bl	8008c10 <USBH_Get_StringDesc>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008a0e:	7bbb      	ldrb	r3, [r7, #14]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d102      	bne.n	8008a1a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008a18:	e018      	b.n	8008a4c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a1a:	7bbb      	ldrb	r3, [r7, #14]
 8008a1c:	2b03      	cmp	r3, #3
 8008a1e:	d115      	bne.n	8008a4c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	73fb      	strb	r3, [r7, #15]
      break;
 8008a24:	e012      	b.n	8008a4c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	73fb      	strb	r3, [r7, #15]
      break;
 8008a2a:	e00f      	b.n	8008a4c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008a2c:	bf00      	nop
 8008a2e:	e00e      	b.n	8008a4e <USBH_HandleEnum+0x3be>
      break;
 8008a30:	bf00      	nop
 8008a32:	e00c      	b.n	8008a4e <USBH_HandleEnum+0x3be>
      break;
 8008a34:	bf00      	nop
 8008a36:	e00a      	b.n	8008a4e <USBH_HandleEnum+0x3be>
      break;
 8008a38:	bf00      	nop
 8008a3a:	e008      	b.n	8008a4e <USBH_HandleEnum+0x3be>
      break;
 8008a3c:	bf00      	nop
 8008a3e:	e006      	b.n	8008a4e <USBH_HandleEnum+0x3be>
      break;
 8008a40:	bf00      	nop
 8008a42:	e004      	b.n	8008a4e <USBH_HandleEnum+0x3be>
      break;
 8008a44:	bf00      	nop
 8008a46:	e002      	b.n	8008a4e <USBH_HandleEnum+0x3be>
      break;
 8008a48:	bf00      	nop
 8008a4a:	e000      	b.n	8008a4e <USBH_HandleEnum+0x3be>
      break;
 8008a4c:	bf00      	nop
  }
  return Status;
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008a6a:	bf00      	nop
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b082      	sub	sp, #8
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a84:	1c5a      	adds	r2, r3, #1
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f804 	bl	8008a9a <USBH_HandleSof>
}
 8008a92:	bf00      	nop
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b082      	sub	sp, #8
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b0b      	cmp	r3, #11
 8008aaa:	d10a      	bne.n	8008ac2 <USBH_HandleSof+0x28>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d005      	beq.n	8008ac2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	4798      	blx	r3
  }
}
 8008ac2:	bf00      	nop
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b083      	sub	sp, #12
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008ada:	bf00      	nop
}
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr

08008ae6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b083      	sub	sp, #12
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008af6:	bf00      	nop
}
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b083      	sub	sp, #12
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 ff5a 	bl	8009a0a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	791b      	ldrb	r3, [r3, #4]
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fda3 	bl	80096a8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	795b      	ldrb	r3, [r3, #5]
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fd9d 	bl	80096a8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af02      	add	r7, sp, #8
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	460b      	mov	r3, r1
 8008b82:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008b8a:	78fb      	ldrb	r3, [r7, #3]
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	4613      	mov	r3, r2
 8008b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b96:	2100      	movs	r1, #0
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f864 	bl	8008c66 <USBH_GetDescriptor>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	73fb      	strb	r3, [r7, #15]
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10a      	bne.n	8008bbe <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008bb4:	78fa      	ldrb	r2, [r7, #3]
 8008bb6:	b292      	uxth	r2, r2
 8008bb8:	4619      	mov	r1, r3
 8008bba:	f000 f918 	bl	8008dee <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b086      	sub	sp, #24
 8008bcc:	af02      	add	r7, sp, #8
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	331c      	adds	r3, #28
 8008bd8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008bda:	887b      	ldrh	r3, [r7, #2]
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008be4:	2100      	movs	r1, #0
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f83d 	bl	8008c66 <USBH_GetDescriptor>
 8008bec:	4603      	mov	r3, r0
 8008bee:	72fb      	strb	r3, [r7, #11]
 8008bf0:	7afb      	ldrb	r3, [r7, #11]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d107      	bne.n	8008c06 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008bfc:	887a      	ldrh	r2, [r7, #2]
 8008bfe:	68f9      	ldr	r1, [r7, #12]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f000 f964 	bl	8008ece <USBH_ParseCfgDesc>
  }

  return status;
 8008c06:	7afb      	ldrb	r3, [r7, #11]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b088      	sub	sp, #32
 8008c14:	af02      	add	r7, sp, #8
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	607a      	str	r2, [r7, #4]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	72fb      	strb	r3, [r7, #11]
 8008c20:	4613      	mov	r3, r2
 8008c22:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008c24:	7afb      	ldrb	r3, [r7, #11]
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008c2c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008c34:	893b      	ldrh	r3, [r7, #8]
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f000 f812 	bl	8008c66 <USBH_GetDescriptor>
 8008c42:	4603      	mov	r3, r0
 8008c44:	75fb      	strb	r3, [r7, #23]
 8008c46:	7dfb      	ldrb	r3, [r7, #23]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d107      	bne.n	8008c5c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008c52:	893a      	ldrh	r2, [r7, #8]
 8008c54:	6879      	ldr	r1, [r7, #4]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 fa37 	bl	80090ca <USBH_ParseStringDesc>
  }

  return status;
 8008c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3718      	adds	r7, #24
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	60f8      	str	r0, [r7, #12]
 8008c6e:	607b      	str	r3, [r7, #4]
 8008c70:	460b      	mov	r3, r1
 8008c72:	72fb      	strb	r3, [r7, #11]
 8008c74:	4613      	mov	r3, r2
 8008c76:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	789b      	ldrb	r3, [r3, #2]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d11c      	bne.n	8008cba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008c80:	7afb      	ldrb	r3, [r7, #11]
 8008c82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2206      	movs	r2, #6
 8008c90:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	893a      	ldrh	r2, [r7, #8]
 8008c96:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008c98:	893b      	ldrh	r3, [r7, #8]
 8008c9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ca2:	d104      	bne.n	8008cae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f240 4209 	movw	r2, #1033	; 0x409
 8008caa:	829a      	strh	r2, [r3, #20]
 8008cac:	e002      	b.n	8008cb4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	8b3a      	ldrh	r2, [r7, #24]
 8008cb8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008cba:	8b3b      	ldrh	r3, [r7, #24]
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	6879      	ldr	r1, [r7, #4]
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f000 fa50 	bl	8009166 <USBH_CtlReq>
 8008cc6:	4603      	mov	r3, r0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	789b      	ldrb	r3, [r3, #2]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d10f      	bne.n	8008d04 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2205      	movs	r2, #5
 8008cee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008cf0:	78fb      	ldrb	r3, [r7, #3]
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008d04:	2200      	movs	r2, #0
 8008d06:	2100      	movs	r1, #0
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fa2c 	bl	8009166 <USBH_CtlReq>
 8008d0e:	4603      	mov	r3, r0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	460b      	mov	r3, r1
 8008d22:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	789b      	ldrb	r3, [r3, #2]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d10e      	bne.n	8008d4a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2209      	movs	r2, #9
 8008d36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	887a      	ldrh	r2, [r7, #2]
 8008d3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fa09 	bl	8009166 <USBH_CtlReq>
 8008d54:	4603      	mov	r3, r0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b082      	sub	sp, #8
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	460b      	mov	r3, r1
 8008d68:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	789b      	ldrb	r3, [r3, #2]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d10f      	bne.n	8008d92 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2203      	movs	r2, #3
 8008d7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008d7e:	78fb      	ldrb	r3, [r7, #3]
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008d92:	2200      	movs	r2, #0
 8008d94:	2100      	movs	r1, #0
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f9e5 	bl	8009166 <USBH_CtlReq>
 8008d9c:	4603      	mov	r3, r0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b082      	sub	sp, #8
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
 8008dae:	460b      	mov	r3, r1
 8008db0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	789b      	ldrb	r3, [r3, #2]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d10f      	bne.n	8008dda <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008dcc:	78fb      	ldrb	r3, [r7, #3]
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008dda:	2200      	movs	r2, #0
 8008ddc:	2100      	movs	r1, #0
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f9c1 	bl	8009166 <USBH_CtlReq>
 8008de4:	4603      	mov	r3, r0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008dee:	b480      	push	{r7}
 8008df0:	b085      	sub	sp, #20
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	60f8      	str	r0, [r7, #12]
 8008df6:	60b9      	str	r1, [r7, #8]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	781a      	ldrb	r2, [r3, #0]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	785a      	ldrb	r2, [r3, #1]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	3302      	adds	r3, #2
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	3303      	adds	r3, #3
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	021b      	lsls	r3, r3, #8
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	4313      	orrs	r3, r2
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	791a      	ldrb	r2, [r3, #4]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	795a      	ldrb	r2, [r3, #5]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	799a      	ldrb	r2, [r3, #6]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	79da      	ldrb	r2, [r3, #7]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008e48:	88fb      	ldrh	r3, [r7, #6]
 8008e4a:	2b08      	cmp	r3, #8
 8008e4c:	d939      	bls.n	8008ec2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	3308      	adds	r3, #8
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	3309      	adds	r3, #9
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	021b      	lsls	r3, r3, #8
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	4313      	orrs	r3, r2
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	330a      	adds	r3, #10
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	330b      	adds	r3, #11
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	021b      	lsls	r3, r3, #8
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	b29a      	uxth	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	330c      	adds	r3, #12
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	330d      	adds	r3, #13
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	021b      	lsls	r3, r3, #8
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	7b9a      	ldrb	r2, [r3, #14]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	7bda      	ldrb	r2, [r3, #15]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	7c1a      	ldrb	r2, [r3, #16]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	7c5a      	ldrb	r2, [r3, #17]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	745a      	strb	r2, [r3, #17]
  }
}
 8008ec2:	bf00      	nop
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr

08008ece <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b08a      	sub	sp, #40	; 0x28
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	60f8      	str	r0, [r7, #12]
 8008ed6:	60b9      	str	r1, [r7, #8]
 8008ed8:	4613      	mov	r3, r2
 8008eda:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	781a      	ldrb	r2, [r3, #0]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	785a      	ldrb	r2, [r3, #1]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	3302      	adds	r3, #2
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	3303      	adds	r3, #3
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	021b      	lsls	r3, r3, #8
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	4313      	orrs	r3, r2
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	791a      	ldrb	r2, [r3, #4]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	795a      	ldrb	r2, [r3, #5]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	799a      	ldrb	r2, [r3, #6]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	79da      	ldrb	r2, [r3, #7]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	7a1a      	ldrb	r2, [r3, #8]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008f44:	88fb      	ldrh	r3, [r7, #6]
 8008f46:	2b09      	cmp	r3, #9
 8008f48:	d95f      	bls.n	800900a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008f4a:	2309      	movs	r3, #9
 8008f4c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008f52:	e051      	b.n	8008ff8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008f54:	f107 0316 	add.w	r3, r7, #22
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f5c:	f000 f8e8 	bl	8009130 <USBH_GetNextDesc>
 8008f60:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f64:	785b      	ldrb	r3, [r3, #1]
 8008f66:	2b04      	cmp	r3, #4
 8008f68:	d146      	bne.n	8008ff8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008f6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f6e:	221a      	movs	r2, #26
 8008f70:	fb02 f303 	mul.w	r3, r2, r3
 8008f74:	3308      	adds	r3, #8
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	4413      	add	r3, r2
 8008f7a:	3302      	adds	r3, #2
 8008f7c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008f7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f80:	69f8      	ldr	r0, [r7, #28]
 8008f82:	f000 f846 	bl	8009012 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008f86:	2300      	movs	r3, #0
 8008f88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008f90:	e022      	b.n	8008fd8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008f92:	f107 0316 	add.w	r3, r7, #22
 8008f96:	4619      	mov	r1, r3
 8008f98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f9a:	f000 f8c9 	bl	8009130 <USBH_GetNextDesc>
 8008f9e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa2:	785b      	ldrb	r3, [r3, #1]
 8008fa4:	2b05      	cmp	r3, #5
 8008fa6:	d117      	bne.n	8008fd8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008fa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fac:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008fb0:	3201      	adds	r2, #1
 8008fb2:	00d2      	lsls	r2, r2, #3
 8008fb4:	211a      	movs	r1, #26
 8008fb6:	fb01 f303 	mul.w	r3, r1, r3
 8008fba:	4413      	add	r3, r2
 8008fbc:	3308      	adds	r3, #8
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008fc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fc8:	69b8      	ldr	r0, [r7, #24]
 8008fca:	f000 f851 	bl	8009070 <USBH_ParseEPDesc>
            ep_ix++;
 8008fce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	791b      	ldrb	r3, [r3, #4]
 8008fdc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d204      	bcs.n	8008fee <USBH_ParseCfgDesc+0x120>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	885a      	ldrh	r2, [r3, #2]
 8008fe8:	8afb      	ldrh	r3, [r7, #22]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d8d1      	bhi.n	8008f92 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d804      	bhi.n	800900a <USBH_ParseCfgDesc+0x13c>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	885a      	ldrh	r2, [r3, #2]
 8009004:	8afb      	ldrh	r3, [r7, #22]
 8009006:	429a      	cmp	r2, r3
 8009008:	d8a4      	bhi.n	8008f54 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800900a:	bf00      	nop
 800900c:	3728      	adds	r7, #40	; 0x28
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009012:	b480      	push	{r7}
 8009014:	b083      	sub	sp, #12
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	781a      	ldrb	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	785a      	ldrb	r2, [r3, #1]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	789a      	ldrb	r2, [r3, #2]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	78da      	ldrb	r2, [r3, #3]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	791a      	ldrb	r2, [r3, #4]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	795a      	ldrb	r2, [r3, #5]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	799a      	ldrb	r2, [r3, #6]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	79da      	ldrb	r2, [r3, #7]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	7a1a      	ldrb	r2, [r3, #8]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	721a      	strb	r2, [r3, #8]
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	781a      	ldrb	r2, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	785a      	ldrb	r2, [r3, #1]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	789a      	ldrb	r2, [r3, #2]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	78da      	ldrb	r2, [r3, #3]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	3304      	adds	r3, #4
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	3305      	adds	r3, #5
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	021b      	lsls	r3, r3, #8
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	4313      	orrs	r3, r2
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	799a      	ldrb	r2, [r3, #6]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	719a      	strb	r2, [r3, #6]
}
 80090be:	bf00      	nop
 80090c0:	370c      	adds	r7, #12
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr

080090ca <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80090ca:	b480      	push	{r7}
 80090cc:	b087      	sub	sp, #28
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	60f8      	str	r0, [r7, #12]
 80090d2:	60b9      	str	r1, [r7, #8]
 80090d4:	4613      	mov	r3, r2
 80090d6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	3301      	adds	r3, #1
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	2b03      	cmp	r3, #3
 80090e0:	d120      	bne.n	8009124 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	1e9a      	subs	r2, r3, #2
 80090e8:	88fb      	ldrh	r3, [r7, #6]
 80090ea:	4293      	cmp	r3, r2
 80090ec:	bf28      	it	cs
 80090ee:	4613      	movcs	r3, r2
 80090f0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	3302      	adds	r3, #2
 80090f6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80090f8:	2300      	movs	r3, #0
 80090fa:	82fb      	strh	r3, [r7, #22]
 80090fc:	e00b      	b.n	8009116 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80090fe:	8afb      	ldrh	r3, [r7, #22]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	4413      	add	r3, r2
 8009104:	781a      	ldrb	r2, [r3, #0]
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	701a      	strb	r2, [r3, #0]
      pdest++;
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	3301      	adds	r3, #1
 800910e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009110:	8afb      	ldrh	r3, [r7, #22]
 8009112:	3302      	adds	r3, #2
 8009114:	82fb      	strh	r3, [r7, #22]
 8009116:	8afa      	ldrh	r2, [r7, #22]
 8009118:	8abb      	ldrh	r3, [r7, #20]
 800911a:	429a      	cmp	r2, r3
 800911c:	d3ef      	bcc.n	80090fe <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	2200      	movs	r2, #0
 8009122:	701a      	strb	r2, [r3, #0]
  }
}
 8009124:	bf00      	nop
 8009126:	371c      	adds	r7, #28
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	881a      	ldrh	r2, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	b29b      	uxth	r3, r3
 8009144:	4413      	add	r3, r2
 8009146:	b29a      	uxth	r2, r3
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4413      	add	r3, r2
 8009156:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009158:	68fb      	ldr	r3, [r7, #12]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3714      	adds	r7, #20
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr

08009166 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b086      	sub	sp, #24
 800916a:	af00      	add	r7, sp, #0
 800916c:	60f8      	str	r0, [r7, #12]
 800916e:	60b9      	str	r1, [r7, #8]
 8009170:	4613      	mov	r3, r2
 8009172:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009174:	2301      	movs	r3, #1
 8009176:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	789b      	ldrb	r3, [r3, #2]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d002      	beq.n	8009186 <USBH_CtlReq+0x20>
 8009180:	2b02      	cmp	r3, #2
 8009182:	d00f      	beq.n	80091a4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009184:	e027      	b.n	80091d6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	88fa      	ldrh	r2, [r7, #6]
 8009190:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2201      	movs	r2, #1
 8009196:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2202      	movs	r2, #2
 800919c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800919e:	2301      	movs	r3, #1
 80091a0:	75fb      	strb	r3, [r7, #23]
      break;
 80091a2:	e018      	b.n	80091d6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f000 f81b 	bl	80091e0 <USBH_HandleControl>
 80091aa:	4603      	mov	r3, r0
 80091ac:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80091ae:	7dfb      	ldrb	r3, [r7, #23]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d002      	beq.n	80091ba <USBH_CtlReq+0x54>
 80091b4:	7dfb      	ldrb	r3, [r7, #23]
 80091b6:	2b03      	cmp	r3, #3
 80091b8:	d106      	bne.n	80091c8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2201      	movs	r2, #1
 80091be:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	761a      	strb	r2, [r3, #24]
      break;
 80091c6:	e005      	b.n	80091d4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80091c8:	7dfb      	ldrb	r3, [r7, #23]
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d102      	bne.n	80091d4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2201      	movs	r2, #1
 80091d2:	709a      	strb	r2, [r3, #2]
      break;
 80091d4:	bf00      	nop
  }
  return status;
 80091d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3718      	adds	r7, #24
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b086      	sub	sp, #24
 80091e4:	af02      	add	r7, sp, #8
 80091e6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80091e8:	2301      	movs	r3, #1
 80091ea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80091ec:	2300      	movs	r3, #0
 80091ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	7e1b      	ldrb	r3, [r3, #24]
 80091f4:	3b01      	subs	r3, #1
 80091f6:	2b0a      	cmp	r3, #10
 80091f8:	f200 8156 	bhi.w	80094a8 <USBH_HandleControl+0x2c8>
 80091fc:	a201      	add	r2, pc, #4	; (adr r2, 8009204 <USBH_HandleControl+0x24>)
 80091fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009202:	bf00      	nop
 8009204:	08009231 	.word	0x08009231
 8009208:	0800924b 	.word	0x0800924b
 800920c:	080092b5 	.word	0x080092b5
 8009210:	080092db 	.word	0x080092db
 8009214:	08009313 	.word	0x08009313
 8009218:	0800933d 	.word	0x0800933d
 800921c:	0800938f 	.word	0x0800938f
 8009220:	080093b1 	.word	0x080093b1
 8009224:	080093ed 	.word	0x080093ed
 8009228:	08009413 	.word	0x08009413
 800922c:	08009451 	.word	0x08009451
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f103 0110 	add.w	r1, r3, #16
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	795b      	ldrb	r3, [r3, #5]
 800923a:	461a      	mov	r2, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f943 	bl	80094c8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2202      	movs	r2, #2
 8009246:	761a      	strb	r2, [r3, #24]
      break;
 8009248:	e139      	b.n	80094be <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	795b      	ldrb	r3, [r3, #5]
 800924e:	4619      	mov	r1, r3
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fcc9 	bl	8009be8 <USBH_LL_GetURBState>
 8009256:	4603      	mov	r3, r0
 8009258:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800925a:	7bbb      	ldrb	r3, [r7, #14]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d11e      	bne.n	800929e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	7c1b      	ldrb	r3, [r3, #16]
 8009264:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009268:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	8adb      	ldrh	r3, [r3, #22]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00a      	beq.n	8009288 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009272:	7b7b      	ldrb	r3, [r7, #13]
 8009274:	2b80      	cmp	r3, #128	; 0x80
 8009276:	d103      	bne.n	8009280 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2203      	movs	r2, #3
 800927c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800927e:	e115      	b.n	80094ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2205      	movs	r2, #5
 8009284:	761a      	strb	r2, [r3, #24]
      break;
 8009286:	e111      	b.n	80094ac <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009288:	7b7b      	ldrb	r3, [r7, #13]
 800928a:	2b80      	cmp	r3, #128	; 0x80
 800928c:	d103      	bne.n	8009296 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2209      	movs	r2, #9
 8009292:	761a      	strb	r2, [r3, #24]
      break;
 8009294:	e10a      	b.n	80094ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2207      	movs	r2, #7
 800929a:	761a      	strb	r2, [r3, #24]
      break;
 800929c:	e106      	b.n	80094ac <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800929e:	7bbb      	ldrb	r3, [r7, #14]
 80092a0:	2b04      	cmp	r3, #4
 80092a2:	d003      	beq.n	80092ac <USBH_HandleControl+0xcc>
 80092a4:	7bbb      	ldrb	r3, [r7, #14]
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	f040 8100 	bne.w	80094ac <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	220b      	movs	r2, #11
 80092b0:	761a      	strb	r2, [r3, #24]
      break;
 80092b2:	e0fb      	b.n	80094ac <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6899      	ldr	r1, [r3, #8]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	899a      	ldrh	r2, [r3, #12]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	791b      	ldrb	r3, [r3, #4]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f93a 	bl	8009546 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2204      	movs	r2, #4
 80092d6:	761a      	strb	r2, [r3, #24]
      break;
 80092d8:	e0f1      	b.n	80094be <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	791b      	ldrb	r3, [r3, #4]
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 fc81 	bl	8009be8 <USBH_LL_GetURBState>
 80092e6:	4603      	mov	r3, r0
 80092e8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80092ea:	7bbb      	ldrb	r3, [r7, #14]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d102      	bne.n	80092f6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2209      	movs	r2, #9
 80092f4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80092f6:	7bbb      	ldrb	r3, [r7, #14]
 80092f8:	2b05      	cmp	r3, #5
 80092fa:	d102      	bne.n	8009302 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80092fc:	2303      	movs	r3, #3
 80092fe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009300:	e0d6      	b.n	80094b0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009302:	7bbb      	ldrb	r3, [r7, #14]
 8009304:	2b04      	cmp	r3, #4
 8009306:	f040 80d3 	bne.w	80094b0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	220b      	movs	r2, #11
 800930e:	761a      	strb	r2, [r3, #24]
      break;
 8009310:	e0ce      	b.n	80094b0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6899      	ldr	r1, [r3, #8]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	899a      	ldrh	r2, [r3, #12]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	795b      	ldrb	r3, [r3, #5]
 800931e:	2001      	movs	r0, #1
 8009320:	9000      	str	r0, [sp, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f8ea 	bl	80094fc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800932e:	b29a      	uxth	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2206      	movs	r2, #6
 8009338:	761a      	strb	r2, [r3, #24]
      break;
 800933a:	e0c0      	b.n	80094be <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	795b      	ldrb	r3, [r3, #5]
 8009340:	4619      	mov	r1, r3
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 fc50 	bl	8009be8 <USBH_LL_GetURBState>
 8009348:	4603      	mov	r3, r0
 800934a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800934c:	7bbb      	ldrb	r3, [r7, #14]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d103      	bne.n	800935a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2207      	movs	r2, #7
 8009356:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009358:	e0ac      	b.n	80094b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800935a:	7bbb      	ldrb	r3, [r7, #14]
 800935c:	2b05      	cmp	r3, #5
 800935e:	d105      	bne.n	800936c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	220c      	movs	r2, #12
 8009364:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009366:	2303      	movs	r3, #3
 8009368:	73fb      	strb	r3, [r7, #15]
      break;
 800936a:	e0a3      	b.n	80094b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800936c:	7bbb      	ldrb	r3, [r7, #14]
 800936e:	2b02      	cmp	r3, #2
 8009370:	d103      	bne.n	800937a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2205      	movs	r2, #5
 8009376:	761a      	strb	r2, [r3, #24]
      break;
 8009378:	e09c      	b.n	80094b4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800937a:	7bbb      	ldrb	r3, [r7, #14]
 800937c:	2b04      	cmp	r3, #4
 800937e:	f040 8099 	bne.w	80094b4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	220b      	movs	r2, #11
 8009386:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009388:	2302      	movs	r3, #2
 800938a:	73fb      	strb	r3, [r7, #15]
      break;
 800938c:	e092      	b.n	80094b4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	791b      	ldrb	r3, [r3, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	2100      	movs	r1, #0
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f8d5 	bl	8009546 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2208      	movs	r2, #8
 80093ac:	761a      	strb	r2, [r3, #24]

      break;
 80093ae:	e086      	b.n	80094be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	791b      	ldrb	r3, [r3, #4]
 80093b4:	4619      	mov	r1, r3
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fc16 	bl	8009be8 <USBH_LL_GetURBState>
 80093bc:	4603      	mov	r3, r0
 80093be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80093c0:	7bbb      	ldrb	r3, [r7, #14]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d105      	bne.n	80093d2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	220d      	movs	r2, #13
 80093ca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80093cc:	2300      	movs	r3, #0
 80093ce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80093d0:	e072      	b.n	80094b8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80093d2:	7bbb      	ldrb	r3, [r7, #14]
 80093d4:	2b04      	cmp	r3, #4
 80093d6:	d103      	bne.n	80093e0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	220b      	movs	r2, #11
 80093dc:	761a      	strb	r2, [r3, #24]
      break;
 80093de:	e06b      	b.n	80094b8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80093e0:	7bbb      	ldrb	r3, [r7, #14]
 80093e2:	2b05      	cmp	r3, #5
 80093e4:	d168      	bne.n	80094b8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80093e6:	2303      	movs	r3, #3
 80093e8:	73fb      	strb	r3, [r7, #15]
      break;
 80093ea:	e065      	b.n	80094b8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	795b      	ldrb	r3, [r3, #5]
 80093f0:	2201      	movs	r2, #1
 80093f2:	9200      	str	r2, [sp, #0]
 80093f4:	2200      	movs	r2, #0
 80093f6:	2100      	movs	r1, #0
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f87f 	bl	80094fc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009404:	b29a      	uxth	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	220a      	movs	r2, #10
 800940e:	761a      	strb	r2, [r3, #24]
      break;
 8009410:	e055      	b.n	80094be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	795b      	ldrb	r3, [r3, #5]
 8009416:	4619      	mov	r1, r3
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fbe5 	bl	8009be8 <USBH_LL_GetURBState>
 800941e:	4603      	mov	r3, r0
 8009420:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009422:	7bbb      	ldrb	r3, [r7, #14]
 8009424:	2b01      	cmp	r3, #1
 8009426:	d105      	bne.n	8009434 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	220d      	movs	r2, #13
 8009430:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009432:	e043      	b.n	80094bc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009434:	7bbb      	ldrb	r3, [r7, #14]
 8009436:	2b02      	cmp	r3, #2
 8009438:	d103      	bne.n	8009442 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2209      	movs	r2, #9
 800943e:	761a      	strb	r2, [r3, #24]
      break;
 8009440:	e03c      	b.n	80094bc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009442:	7bbb      	ldrb	r3, [r7, #14]
 8009444:	2b04      	cmp	r3, #4
 8009446:	d139      	bne.n	80094bc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	220b      	movs	r2, #11
 800944c:	761a      	strb	r2, [r3, #24]
      break;
 800944e:	e035      	b.n	80094bc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	7e5b      	ldrb	r3, [r3, #25]
 8009454:	3301      	adds	r3, #1
 8009456:	b2da      	uxtb	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	765a      	strb	r2, [r3, #25]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	7e5b      	ldrb	r3, [r3, #25]
 8009460:	2b02      	cmp	r3, #2
 8009462:	d806      	bhi.n	8009472 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2201      	movs	r2, #1
 800946e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009470:	e025      	b.n	80094be <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009478:	2106      	movs	r1, #6
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	795b      	ldrb	r3, [r3, #5]
 8009488:	4619      	mov	r1, r3
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f90c 	bl	80096a8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	791b      	ldrb	r3, [r3, #4]
 8009494:	4619      	mov	r1, r3
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f906 	bl	80096a8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80094a2:	2302      	movs	r3, #2
 80094a4:	73fb      	strb	r3, [r7, #15]
      break;
 80094a6:	e00a      	b.n	80094be <USBH_HandleControl+0x2de>

    default:
      break;
 80094a8:	bf00      	nop
 80094aa:	e008      	b.n	80094be <USBH_HandleControl+0x2de>
      break;
 80094ac:	bf00      	nop
 80094ae:	e006      	b.n	80094be <USBH_HandleControl+0x2de>
      break;
 80094b0:	bf00      	nop
 80094b2:	e004      	b.n	80094be <USBH_HandleControl+0x2de>
      break;
 80094b4:	bf00      	nop
 80094b6:	e002      	b.n	80094be <USBH_HandleControl+0x2de>
      break;
 80094b8:	bf00      	nop
 80094ba:	e000      	b.n	80094be <USBH_HandleControl+0x2de>
      break;
 80094bc:	bf00      	nop
  }

  return status;
 80094be:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b088      	sub	sp, #32
 80094cc:	af04      	add	r7, sp, #16
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	4613      	mov	r3, r2
 80094d4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80094d6:	79f9      	ldrb	r1, [r7, #7]
 80094d8:	2300      	movs	r3, #0
 80094da:	9303      	str	r3, [sp, #12]
 80094dc:	2308      	movs	r3, #8
 80094de:	9302      	str	r3, [sp, #8]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	9301      	str	r3, [sp, #4]
 80094e4:	2300      	movs	r3, #0
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	2300      	movs	r3, #0
 80094ea:	2200      	movs	r2, #0
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 fb4a 	bl	8009b86 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b088      	sub	sp, #32
 8009500:	af04      	add	r7, sp, #16
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	4611      	mov	r1, r2
 8009508:	461a      	mov	r2, r3
 800950a:	460b      	mov	r3, r1
 800950c:	80fb      	strh	r3, [r7, #6]
 800950e:	4613      	mov	r3, r2
 8009510:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009518:	2b00      	cmp	r3, #0
 800951a:	d001      	beq.n	8009520 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800951c:	2300      	movs	r3, #0
 800951e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009520:	7979      	ldrb	r1, [r7, #5]
 8009522:	7e3b      	ldrb	r3, [r7, #24]
 8009524:	9303      	str	r3, [sp, #12]
 8009526:	88fb      	ldrh	r3, [r7, #6]
 8009528:	9302      	str	r3, [sp, #8]
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	9301      	str	r3, [sp, #4]
 800952e:	2301      	movs	r3, #1
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	2300      	movs	r3, #0
 8009534:	2200      	movs	r2, #0
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f000 fb25 	bl	8009b86 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b088      	sub	sp, #32
 800954a:	af04      	add	r7, sp, #16
 800954c:	60f8      	str	r0, [r7, #12]
 800954e:	60b9      	str	r1, [r7, #8]
 8009550:	4611      	mov	r1, r2
 8009552:	461a      	mov	r2, r3
 8009554:	460b      	mov	r3, r1
 8009556:	80fb      	strh	r3, [r7, #6]
 8009558:	4613      	mov	r3, r2
 800955a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800955c:	7979      	ldrb	r1, [r7, #5]
 800955e:	2300      	movs	r3, #0
 8009560:	9303      	str	r3, [sp, #12]
 8009562:	88fb      	ldrh	r3, [r7, #6]
 8009564:	9302      	str	r3, [sp, #8]
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	9301      	str	r3, [sp, #4]
 800956a:	2301      	movs	r3, #1
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	2300      	movs	r3, #0
 8009570:	2201      	movs	r2, #1
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f000 fb07 	bl	8009b86 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009578:	2300      	movs	r3, #0

}
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b088      	sub	sp, #32
 8009586:	af04      	add	r7, sp, #16
 8009588:	60f8      	str	r0, [r7, #12]
 800958a:	60b9      	str	r1, [r7, #8]
 800958c:	4611      	mov	r1, r2
 800958e:	461a      	mov	r2, r3
 8009590:	460b      	mov	r3, r1
 8009592:	80fb      	strh	r3, [r7, #6]
 8009594:	4613      	mov	r3, r2
 8009596:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80095a2:	2300      	movs	r3, #0
 80095a4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80095a6:	7979      	ldrb	r1, [r7, #5]
 80095a8:	7e3b      	ldrb	r3, [r7, #24]
 80095aa:	9303      	str	r3, [sp, #12]
 80095ac:	88fb      	ldrh	r3, [r7, #6]
 80095ae:	9302      	str	r3, [sp, #8]
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	9301      	str	r3, [sp, #4]
 80095b4:	2301      	movs	r3, #1
 80095b6:	9300      	str	r3, [sp, #0]
 80095b8:	2302      	movs	r3, #2
 80095ba:	2200      	movs	r2, #0
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f000 fae2 	bl	8009b86 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b088      	sub	sp, #32
 80095d0:	af04      	add	r7, sp, #16
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	4611      	mov	r1, r2
 80095d8:	461a      	mov	r2, r3
 80095da:	460b      	mov	r3, r1
 80095dc:	80fb      	strh	r3, [r7, #6]
 80095de:	4613      	mov	r3, r2
 80095e0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80095e2:	7979      	ldrb	r1, [r7, #5]
 80095e4:	2300      	movs	r3, #0
 80095e6:	9303      	str	r3, [sp, #12]
 80095e8:	88fb      	ldrh	r3, [r7, #6]
 80095ea:	9302      	str	r3, [sp, #8]
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	9301      	str	r3, [sp, #4]
 80095f0:	2301      	movs	r3, #1
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	2302      	movs	r3, #2
 80095f6:	2201      	movs	r2, #1
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f000 fac4 	bl	8009b86 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af04      	add	r7, sp, #16
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	4608      	mov	r0, r1
 8009612:	4611      	mov	r1, r2
 8009614:	461a      	mov	r2, r3
 8009616:	4603      	mov	r3, r0
 8009618:	70fb      	strb	r3, [r7, #3]
 800961a:	460b      	mov	r3, r1
 800961c:	70bb      	strb	r3, [r7, #2]
 800961e:	4613      	mov	r3, r2
 8009620:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009622:	7878      	ldrb	r0, [r7, #1]
 8009624:	78ba      	ldrb	r2, [r7, #2]
 8009626:	78f9      	ldrb	r1, [r7, #3]
 8009628:	8b3b      	ldrh	r3, [r7, #24]
 800962a:	9302      	str	r3, [sp, #8]
 800962c:	7d3b      	ldrb	r3, [r7, #20]
 800962e:	9301      	str	r3, [sp, #4]
 8009630:	7c3b      	ldrb	r3, [r7, #16]
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	4603      	mov	r3, r0
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fa57 	bl	8009aea <USBH_LL_OpenPipe>

  return USBH_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b082      	sub	sp, #8
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	460b      	mov	r3, r1
 8009650:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009652:	78fb      	ldrb	r3, [r7, #3]
 8009654:	4619      	mov	r1, r3
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 fa76 	bl	8009b48 <USBH_LL_ClosePipe>

  return USBH_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b084      	sub	sp, #16
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	460b      	mov	r3, r1
 8009670:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f836 	bl	80096e4 <USBH_GetFreePipe>
 8009678:	4603      	mov	r3, r0
 800967a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800967c:	89fb      	ldrh	r3, [r7, #14]
 800967e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009682:	4293      	cmp	r3, r2
 8009684:	d00a      	beq.n	800969c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009686:	78fa      	ldrb	r2, [r7, #3]
 8009688:	89fb      	ldrh	r3, [r7, #14]
 800968a:	f003 030f 	and.w	r3, r3, #15
 800968e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009692:	6879      	ldr	r1, [r7, #4]
 8009694:	33e0      	adds	r3, #224	; 0xe0
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	440b      	add	r3, r1
 800969a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800969c:	89fb      	ldrh	r3, [r7, #14]
 800969e:	b2db      	uxtb	r3, r3
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3710      	adds	r7, #16
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	460b      	mov	r3, r1
 80096b2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80096b4:	78fb      	ldrb	r3, [r7, #3]
 80096b6:	2b0a      	cmp	r3, #10
 80096b8:	d80d      	bhi.n	80096d6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80096ba:	78fb      	ldrb	r3, [r7, #3]
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	33e0      	adds	r3, #224	; 0xe0
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	4413      	add	r3, r2
 80096c4:	685a      	ldr	r2, [r3, #4]
 80096c6:	78fb      	ldrb	r3, [r7, #3]
 80096c8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80096cc:	6879      	ldr	r1, [r7, #4]
 80096ce:	33e0      	adds	r3, #224	; 0xe0
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	440b      	add	r3, r1
 80096d4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80096ec:	2300      	movs	r3, #0
 80096ee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80096f0:	2300      	movs	r3, #0
 80096f2:	73fb      	strb	r3, [r7, #15]
 80096f4:	e00f      	b.n	8009716 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	33e0      	adds	r3, #224	; 0xe0
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4413      	add	r3, r2
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009706:	2b00      	cmp	r3, #0
 8009708:	d102      	bne.n	8009710 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800970a:	7bfb      	ldrb	r3, [r7, #15]
 800970c:	b29b      	uxth	r3, r3
 800970e:	e007      	b.n	8009720 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009710:	7bfb      	ldrb	r3, [r7, #15]
 8009712:	3301      	adds	r3, #1
 8009714:	73fb      	strb	r3, [r7, #15]
 8009716:	7bfb      	ldrb	r3, [r7, #15]
 8009718:	2b0a      	cmp	r3, #10
 800971a:	d9ec      	bls.n	80096f6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800971c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009720:	4618      	mov	r0, r3
 8009722:	3714      	adds	r7, #20
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009730:	2201      	movs	r2, #1
 8009732:	490e      	ldr	r1, [pc, #56]	; (800976c <MX_USB_HOST_Init+0x40>)
 8009734:	480e      	ldr	r0, [pc, #56]	; (8009770 <MX_USB_HOST_Init+0x44>)
 8009736:	f7fe fca1 	bl	800807c <USBH_Init>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d001      	beq.n	8009744 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009740:	f7f7 fd70 	bl	8001224 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009744:	490b      	ldr	r1, [pc, #44]	; (8009774 <MX_USB_HOST_Init+0x48>)
 8009746:	480a      	ldr	r0, [pc, #40]	; (8009770 <MX_USB_HOST_Init+0x44>)
 8009748:	f7fe fd26 	bl	8008198 <USBH_RegisterClass>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d001      	beq.n	8009756 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009752:	f7f7 fd67 	bl	8001224 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009756:	4806      	ldr	r0, [pc, #24]	; (8009770 <MX_USB_HOST_Init+0x44>)
 8009758:	f7fe fdaa 	bl	80082b0 <USBH_Start>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009762:	f7f7 fd5f 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009766:	bf00      	nop
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	0800978d 	.word	0x0800978d
 8009770:	20000338 	.word	0x20000338
 8009774:	2000000c 	.word	0x2000000c

08009778 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800977c:	4802      	ldr	r0, [pc, #8]	; (8009788 <MX_USB_HOST_Process+0x10>)
 800977e:	f7fe fda7 	bl	80082d0 <USBH_Process>
}
 8009782:	bf00      	nop
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	20000338 	.word	0x20000338

0800978c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	460b      	mov	r3, r1
 8009796:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009798:	78fb      	ldrb	r3, [r7, #3]
 800979a:	3b01      	subs	r3, #1
 800979c:	2b04      	cmp	r3, #4
 800979e:	d819      	bhi.n	80097d4 <USBH_UserProcess+0x48>
 80097a0:	a201      	add	r2, pc, #4	; (adr r2, 80097a8 <USBH_UserProcess+0x1c>)
 80097a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a6:	bf00      	nop
 80097a8:	080097d5 	.word	0x080097d5
 80097ac:	080097c5 	.word	0x080097c5
 80097b0:	080097d5 	.word	0x080097d5
 80097b4:	080097cd 	.word	0x080097cd
 80097b8:	080097bd 	.word	0x080097bd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80097bc:	4b09      	ldr	r3, [pc, #36]	; (80097e4 <USBH_UserProcess+0x58>)
 80097be:	2203      	movs	r2, #3
 80097c0:	701a      	strb	r2, [r3, #0]
  break;
 80097c2:	e008      	b.n	80097d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80097c4:	4b07      	ldr	r3, [pc, #28]	; (80097e4 <USBH_UserProcess+0x58>)
 80097c6:	2202      	movs	r2, #2
 80097c8:	701a      	strb	r2, [r3, #0]
  break;
 80097ca:	e004      	b.n	80097d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80097cc:	4b05      	ldr	r3, [pc, #20]	; (80097e4 <USBH_UserProcess+0x58>)
 80097ce:	2201      	movs	r2, #1
 80097d0:	701a      	strb	r2, [r3, #0]
  break;
 80097d2:	e000      	b.n	80097d6 <USBH_UserProcess+0x4a>

  default:
  break;
 80097d4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80097d6:	bf00      	nop
 80097d8:	370c      	adds	r7, #12
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	20000710 	.word	0x20000710

080097e8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08a      	sub	sp, #40	; 0x28
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097f0:	f107 0314 	add.w	r3, r7, #20
 80097f4:	2200      	movs	r2, #0
 80097f6:	601a      	str	r2, [r3, #0]
 80097f8:	605a      	str	r2, [r3, #4]
 80097fa:	609a      	str	r2, [r3, #8]
 80097fc:	60da      	str	r2, [r3, #12]
 80097fe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009808:	d14e      	bne.n	80098a8 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800980a:	4b29      	ldr	r3, [pc, #164]	; (80098b0 <HAL_HCD_MspInit+0xc8>)
 800980c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800980e:	4a28      	ldr	r2, [pc, #160]	; (80098b0 <HAL_HCD_MspInit+0xc8>)
 8009810:	f043 0301 	orr.w	r3, r3, #1
 8009814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009816:	4b26      	ldr	r3, [pc, #152]	; (80098b0 <HAL_HCD_MspInit+0xc8>)
 8009818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800981a:	f003 0301 	and.w	r3, r3, #1
 800981e:	613b      	str	r3, [r7, #16]
 8009820:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009822:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009828:	2302      	movs	r3, #2
 800982a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800982c:	2300      	movs	r3, #0
 800982e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009830:	2303      	movs	r3, #3
 8009832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009834:	230a      	movs	r3, #10
 8009836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009838:	f107 0314 	add.w	r3, r7, #20
 800983c:	4619      	mov	r1, r3
 800983e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009842:	f7f8 f9b7 	bl	8001bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009846:	4b1a      	ldr	r3, [pc, #104]	; (80098b0 <HAL_HCD_MspInit+0xc8>)
 8009848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800984a:	4a19      	ldr	r2, [pc, #100]	; (80098b0 <HAL_HCD_MspInit+0xc8>)
 800984c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009852:	4b17      	ldr	r3, [pc, #92]	; (80098b0 <HAL_HCD_MspInit+0xc8>)
 8009854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800985a:	60fb      	str	r3, [r7, #12]
 800985c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800985e:	4b14      	ldr	r3, [pc, #80]	; (80098b0 <HAL_HCD_MspInit+0xc8>)
 8009860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009866:	2b00      	cmp	r3, #0
 8009868:	d114      	bne.n	8009894 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800986a:	4b11      	ldr	r3, [pc, #68]	; (80098b0 <HAL_HCD_MspInit+0xc8>)
 800986c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800986e:	4a10      	ldr	r2, [pc, #64]	; (80098b0 <HAL_HCD_MspInit+0xc8>)
 8009870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009874:	6593      	str	r3, [r2, #88]	; 0x58
 8009876:	4b0e      	ldr	r3, [pc, #56]	; (80098b0 <HAL_HCD_MspInit+0xc8>)
 8009878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800987a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800987e:	60bb      	str	r3, [r7, #8]
 8009880:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8009882:	f7fa f95d 	bl	8003b40 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009886:	4b0a      	ldr	r3, [pc, #40]	; (80098b0 <HAL_HCD_MspInit+0xc8>)
 8009888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800988a:	4a09      	ldr	r2, [pc, #36]	; (80098b0 <HAL_HCD_MspInit+0xc8>)
 800988c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009890:	6593      	str	r3, [r2, #88]	; 0x58
 8009892:	e001      	b.n	8009898 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8009894:	f7fa f954 	bl	8003b40 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009898:	2200      	movs	r2, #0
 800989a:	2100      	movs	r1, #0
 800989c:	2043      	movs	r0, #67	; 0x43
 800989e:	f7f8 f952 	bl	8001b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80098a2:	2043      	movs	r0, #67	; 0x43
 80098a4:	f7f8 f96b 	bl	8001b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80098a8:	bf00      	nop
 80098aa:	3728      	adds	r7, #40	; 0x28
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	40021000 	.word	0x40021000

080098b4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7ff f8d7 	bl	8008a76 <USBH_LL_IncTimer>
}
 80098c8:	bf00      	nop
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80098de:	4618      	mov	r0, r3
 80098e0:	f7ff f90f 	bl	8008b02 <USBH_LL_Connect>
}
 80098e4:	bf00      	nop
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7ff f918 	bl	8008b30 <USBH_LL_Disconnect>
}
 8009900:	bf00      	nop
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	460b      	mov	r3, r1
 8009912:	70fb      	strb	r3, [r7, #3]
 8009914:	4613      	mov	r3, r2
 8009916:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009918:	bf00      	nop
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009932:	4618      	mov	r0, r3
 8009934:	f7ff f8c9 	bl	8008aca <USBH_LL_PortEnabled>
}
 8009938:	bf00      	nop
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800994e:	4618      	mov	r0, r3
 8009950:	f7ff f8c9 	bl	8008ae6 <USBH_LL_PortDisabled>
}
 8009954:	bf00      	nop
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800996a:	2b01      	cmp	r3, #1
 800996c:	d12a      	bne.n	80099c4 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800996e:	4a18      	ldr	r2, [pc, #96]	; (80099d0 <USBH_LL_Init+0x74>)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4a15      	ldr	r2, [pc, #84]	; (80099d0 <USBH_LL_Init+0x74>)
 800997a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800997e:	4b14      	ldr	r3, [pc, #80]	; (80099d0 <USBH_LL_Init+0x74>)
 8009980:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009984:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009986:	4b12      	ldr	r3, [pc, #72]	; (80099d0 <USBH_LL_Init+0x74>)
 8009988:	2208      	movs	r2, #8
 800998a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800998c:	4b10      	ldr	r3, [pc, #64]	; (80099d0 <USBH_LL_Init+0x74>)
 800998e:	2201      	movs	r2, #1
 8009990:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009992:	4b0f      	ldr	r3, [pc, #60]	; (80099d0 <USBH_LL_Init+0x74>)
 8009994:	2200      	movs	r2, #0
 8009996:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009998:	4b0d      	ldr	r3, [pc, #52]	; (80099d0 <USBH_LL_Init+0x74>)
 800999a:	2202      	movs	r2, #2
 800999c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800999e:	4b0c      	ldr	r3, [pc, #48]	; (80099d0 <USBH_LL_Init+0x74>)
 80099a0:	2200      	movs	r2, #0
 80099a2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80099a4:	480a      	ldr	r0, [pc, #40]	; (80099d0 <USBH_LL_Init+0x74>)
 80099a6:	f7f8 fae1 	bl	8001f6c <HAL_HCD_Init>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80099b0:	f7f7 fc38 	bl	8001224 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80099b4:	4806      	ldr	r0, [pc, #24]	; (80099d0 <USBH_LL_Init+0x74>)
 80099b6:	f7f8 fec0 	bl	800273a <HAL_HCD_GetCurrentFrame>
 80099ba:	4603      	mov	r3, r0
 80099bc:	4619      	mov	r1, r3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f7ff f84a 	bl	8008a58 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3708      	adds	r7, #8
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	20000714 	.word	0x20000714

080099d4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099dc:	2300      	movs	r3, #0
 80099de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099e0:	2300      	movs	r3, #0
 80099e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7f8 fe2f 	bl	800264e <HAL_HCD_Start>
 80099f0:	4603      	mov	r3, r0
 80099f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 f95c 	bl	8009cb4 <USBH_Get_USB_Status>
 80099fc:	4603      	mov	r3, r0
 80099fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b084      	sub	sp, #16
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7f8 fe37 	bl	8002694 <HAL_HCD_Stop>
 8009a26:	4603      	mov	r3, r0
 8009a28:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a2a:	7bfb      	ldrb	r3, [r7, #15]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f000 f941 	bl	8009cb4 <USBH_Get_USB_Status>
 8009a32:	4603      	mov	r3, r0
 8009a34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7f8 fe7f 	bl	8002756 <HAL_HCD_GetCurrentSpeed>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d00c      	beq.n	8009a78 <USBH_LL_GetSpeed+0x38>
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d80d      	bhi.n	8009a7e <USBH_LL_GetSpeed+0x3e>
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d002      	beq.n	8009a6c <USBH_LL_GetSpeed+0x2c>
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d003      	beq.n	8009a72 <USBH_LL_GetSpeed+0x32>
 8009a6a:	e008      	b.n	8009a7e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a70:	e008      	b.n	8009a84 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009a72:	2301      	movs	r3, #1
 8009a74:	73fb      	strb	r3, [r7, #15]
    break;
 8009a76:	e005      	b.n	8009a84 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009a78:	2302      	movs	r3, #2
 8009a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a7c:	e002      	b.n	8009a84 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	73fb      	strb	r3, [r7, #15]
    break;
 8009a82:	bf00      	nop
  }
  return  speed;
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b084      	sub	sp, #16
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7f8 fe12 	bl	80026ce <HAL_HCD_ResetPort>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f000 f8ff 	bl	8009cb4 <USBH_Get_USB_Status>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aba:	7bbb      	ldrb	r3, [r7, #14]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	460b      	mov	r3, r1
 8009ace:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009ad6:	78fa      	ldrb	r2, [r7, #3]
 8009ad8:	4611      	mov	r1, r2
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7f8 fe19 	bl	8002712 <HAL_HCD_HC_GetXferCount>
 8009ae0:	4603      	mov	r3, r0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3708      	adds	r7, #8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009aea:	b590      	push	{r4, r7, lr}
 8009aec:	b089      	sub	sp, #36	; 0x24
 8009aee:	af04      	add	r7, sp, #16
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	4608      	mov	r0, r1
 8009af4:	4611      	mov	r1, r2
 8009af6:	461a      	mov	r2, r3
 8009af8:	4603      	mov	r3, r0
 8009afa:	70fb      	strb	r3, [r7, #3]
 8009afc:	460b      	mov	r3, r1
 8009afe:	70bb      	strb	r3, [r7, #2]
 8009b00:	4613      	mov	r3, r2
 8009b02:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009b12:	787c      	ldrb	r4, [r7, #1]
 8009b14:	78ba      	ldrb	r2, [r7, #2]
 8009b16:	78f9      	ldrb	r1, [r7, #3]
 8009b18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009b1a:	9302      	str	r3, [sp, #8]
 8009b1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009b20:	9301      	str	r3, [sp, #4]
 8009b22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	4623      	mov	r3, r4
 8009b2a:	f7f8 fa81 	bl	8002030 <HAL_HCD_HC_Init>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b32:	7bfb      	ldrb	r3, [r7, #15]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f000 f8bd 	bl	8009cb4 <USBH_Get_USB_Status>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3714      	adds	r7, #20
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd90      	pop	{r4, r7, pc}

08009b48 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	460b      	mov	r3, r1
 8009b52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b54:	2300      	movs	r3, #0
 8009b56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b62:	78fa      	ldrb	r2, [r7, #3]
 8009b64:	4611      	mov	r1, r2
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7f8 faf1 	bl	800214e <HAL_HCD_HC_Halt>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f000 f89e 	bl	8009cb4 <USBH_Get_USB_Status>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009b86:	b590      	push	{r4, r7, lr}
 8009b88:	b089      	sub	sp, #36	; 0x24
 8009b8a:	af04      	add	r7, sp, #16
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	4608      	mov	r0, r1
 8009b90:	4611      	mov	r1, r2
 8009b92:	461a      	mov	r2, r3
 8009b94:	4603      	mov	r3, r0
 8009b96:	70fb      	strb	r3, [r7, #3]
 8009b98:	460b      	mov	r3, r1
 8009b9a:	70bb      	strb	r3, [r7, #2]
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009bae:	787c      	ldrb	r4, [r7, #1]
 8009bb0:	78ba      	ldrb	r2, [r7, #2]
 8009bb2:	78f9      	ldrb	r1, [r7, #3]
 8009bb4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009bb8:	9303      	str	r3, [sp, #12]
 8009bba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009bbc:	9302      	str	r3, [sp, #8]
 8009bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc0:	9301      	str	r3, [sp, #4]
 8009bc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	4623      	mov	r3, r4
 8009bca:	f7f8 fae3 	bl	8002194 <HAL_HCD_HC_SubmitRequest>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009bd2:	7bfb      	ldrb	r3, [r7, #15]
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f000 f86d 	bl	8009cb4 <USBH_Get_USB_Status>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bde:	7bbb      	ldrb	r3, [r7, #14]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3714      	adds	r7, #20
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd90      	pop	{r4, r7, pc}

08009be8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009bfa:	78fa      	ldrb	r2, [r7, #3]
 8009bfc:	4611      	mov	r1, r2
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7f8 fd73 	bl	80026ea <HAL_HCD_HC_GetURBState>
 8009c04:	4603      	mov	r3, r0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b082      	sub	sp, #8
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	460b      	mov	r3, r1
 8009c18:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d103      	bne.n	8009c2c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009c24:	78fb      	ldrb	r3, [r7, #3]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f000 f870 	bl	8009d0c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009c2c:	20c8      	movs	r0, #200	; 0xc8
 8009c2e:	f7f7 fe8b 	bl	8001948 <HAL_Delay>
  return USBH_OK;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b085      	sub	sp, #20
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	460b      	mov	r3, r1
 8009c46:	70fb      	strb	r3, [r7, #3]
 8009c48:	4613      	mov	r3, r2
 8009c4a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c52:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009c54:	78fb      	ldrb	r3, [r7, #3]
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	212c      	movs	r1, #44	; 0x2c
 8009c5a:	fb01 f303 	mul.w	r3, r1, r3
 8009c5e:	4413      	add	r3, r2
 8009c60:	333b      	adds	r3, #59	; 0x3b
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d009      	beq.n	8009c7c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009c68:	78fb      	ldrb	r3, [r7, #3]
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	212c      	movs	r1, #44	; 0x2c
 8009c6e:	fb01 f303 	mul.w	r3, r1, r3
 8009c72:	4413      	add	r3, r2
 8009c74:	3354      	adds	r3, #84	; 0x54
 8009c76:	78ba      	ldrb	r2, [r7, #2]
 8009c78:	701a      	strb	r2, [r3, #0]
 8009c7a:	e008      	b.n	8009c8e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009c7c:	78fb      	ldrb	r3, [r7, #3]
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	212c      	movs	r1, #44	; 0x2c
 8009c82:	fb01 f303 	mul.w	r3, r1, r3
 8009c86:	4413      	add	r3, r2
 8009c88:	3355      	adds	r3, #85	; 0x55
 8009c8a:	78ba      	ldrb	r2, [r7, #2]
 8009c8c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3714      	adds	r7, #20
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f7f7 fe4f 	bl	8001948 <HAL_Delay>
}
 8009caa:	bf00      	nop
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
	...

08009cb4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	4603      	mov	r3, r0
 8009cbc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009cc2:	79fb      	ldrb	r3, [r7, #7]
 8009cc4:	2b03      	cmp	r3, #3
 8009cc6:	d817      	bhi.n	8009cf8 <USBH_Get_USB_Status+0x44>
 8009cc8:	a201      	add	r2, pc, #4	; (adr r2, 8009cd0 <USBH_Get_USB_Status+0x1c>)
 8009cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cce:	bf00      	nop
 8009cd0:	08009ce1 	.word	0x08009ce1
 8009cd4:	08009ce7 	.word	0x08009ce7
 8009cd8:	08009ced 	.word	0x08009ced
 8009cdc:	08009cf3 	.word	0x08009cf3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ce4:	e00b      	b.n	8009cfe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009ce6:	2302      	movs	r3, #2
 8009ce8:	73fb      	strb	r3, [r7, #15]
    break;
 8009cea:	e008      	b.n	8009cfe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009cec:	2301      	movs	r3, #1
 8009cee:	73fb      	strb	r3, [r7, #15]
    break;
 8009cf0:	e005      	b.n	8009cfe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009cf2:	2302      	movs	r3, #2
 8009cf4:	73fb      	strb	r3, [r7, #15]
    break;
 8009cf6:	e002      	b.n	8009cfe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009cf8:	2302      	movs	r3, #2
 8009cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8009cfc:	bf00      	nop
  }
  return usb_status;
 8009cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3714      	adds	r7, #20
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	4603      	mov	r3, r0
 8009d14:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009d16:	79fb      	ldrb	r3, [r7, #7]
 8009d18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009d1a:	79fb      	ldrb	r3, [r7, #7]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d102      	bne.n	8009d26 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009d20:	2300      	movs	r3, #0
 8009d22:	73fb      	strb	r3, [r7, #15]
 8009d24:	e001      	b.n	8009d2a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009d26:	2301      	movs	r3, #1
 8009d28:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 8009d2a:	7bfb      	ldrb	r3, [r7, #15]
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009d32:	4803      	ldr	r0, [pc, #12]	; (8009d40 <MX_DriverVbusFS+0x34>)
 8009d34:	f7f8 f8e8 	bl	8001f08 <HAL_GPIO_WritePin>
}
 8009d38:	bf00      	nop
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	48000800 	.word	0x48000800

08009d44 <__errno>:
 8009d44:	4b01      	ldr	r3, [pc, #4]	; (8009d4c <__errno+0x8>)
 8009d46:	6818      	ldr	r0, [r3, #0]
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	2000002c 	.word	0x2000002c

08009d50 <__libc_init_array>:
 8009d50:	b570      	push	{r4, r5, r6, lr}
 8009d52:	4d0d      	ldr	r5, [pc, #52]	; (8009d88 <__libc_init_array+0x38>)
 8009d54:	4c0d      	ldr	r4, [pc, #52]	; (8009d8c <__libc_init_array+0x3c>)
 8009d56:	1b64      	subs	r4, r4, r5
 8009d58:	10a4      	asrs	r4, r4, #2
 8009d5a:	2600      	movs	r6, #0
 8009d5c:	42a6      	cmp	r6, r4
 8009d5e:	d109      	bne.n	8009d74 <__libc_init_array+0x24>
 8009d60:	4d0b      	ldr	r5, [pc, #44]	; (8009d90 <__libc_init_array+0x40>)
 8009d62:	4c0c      	ldr	r4, [pc, #48]	; (8009d94 <__libc_init_array+0x44>)
 8009d64:	f000 f92e 	bl	8009fc4 <_init>
 8009d68:	1b64      	subs	r4, r4, r5
 8009d6a:	10a4      	asrs	r4, r4, #2
 8009d6c:	2600      	movs	r6, #0
 8009d6e:	42a6      	cmp	r6, r4
 8009d70:	d105      	bne.n	8009d7e <__libc_init_array+0x2e>
 8009d72:	bd70      	pop	{r4, r5, r6, pc}
 8009d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d78:	4798      	blx	r3
 8009d7a:	3601      	adds	r6, #1
 8009d7c:	e7ee      	b.n	8009d5c <__libc_init_array+0xc>
 8009d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d82:	4798      	blx	r3
 8009d84:	3601      	adds	r6, #1
 8009d86:	e7f2      	b.n	8009d6e <__libc_init_array+0x1e>
 8009d88:	0800a030 	.word	0x0800a030
 8009d8c:	0800a030 	.word	0x0800a030
 8009d90:	0800a030 	.word	0x0800a030
 8009d94:	0800a034 	.word	0x0800a034

08009d98 <malloc>:
 8009d98:	4b02      	ldr	r3, [pc, #8]	; (8009da4 <malloc+0xc>)
 8009d9a:	4601      	mov	r1, r0
 8009d9c:	6818      	ldr	r0, [r3, #0]
 8009d9e:	f000 b87f 	b.w	8009ea0 <_malloc_r>
 8009da2:	bf00      	nop
 8009da4:	2000002c 	.word	0x2000002c

08009da8 <free>:
 8009da8:	4b02      	ldr	r3, [pc, #8]	; (8009db4 <free+0xc>)
 8009daa:	4601      	mov	r1, r0
 8009dac:	6818      	ldr	r0, [r3, #0]
 8009dae:	f000 b80b 	b.w	8009dc8 <_free_r>
 8009db2:	bf00      	nop
 8009db4:	2000002c 	.word	0x2000002c

08009db8 <memset>:
 8009db8:	4402      	add	r2, r0
 8009dba:	4603      	mov	r3, r0
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d100      	bne.n	8009dc2 <memset+0xa>
 8009dc0:	4770      	bx	lr
 8009dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8009dc6:	e7f9      	b.n	8009dbc <memset+0x4>

08009dc8 <_free_r>:
 8009dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dca:	2900      	cmp	r1, #0
 8009dcc:	d044      	beq.n	8009e58 <_free_r+0x90>
 8009dce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dd2:	9001      	str	r0, [sp, #4]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f1a1 0404 	sub.w	r4, r1, #4
 8009dda:	bfb8      	it	lt
 8009ddc:	18e4      	addlt	r4, r4, r3
 8009dde:	f000 f8e3 	bl	8009fa8 <__malloc_lock>
 8009de2:	4a1e      	ldr	r2, [pc, #120]	; (8009e5c <_free_r+0x94>)
 8009de4:	9801      	ldr	r0, [sp, #4]
 8009de6:	6813      	ldr	r3, [r2, #0]
 8009de8:	b933      	cbnz	r3, 8009df8 <_free_r+0x30>
 8009dea:	6063      	str	r3, [r4, #4]
 8009dec:	6014      	str	r4, [r2, #0]
 8009dee:	b003      	add	sp, #12
 8009df0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009df4:	f000 b8de 	b.w	8009fb4 <__malloc_unlock>
 8009df8:	42a3      	cmp	r3, r4
 8009dfa:	d908      	bls.n	8009e0e <_free_r+0x46>
 8009dfc:	6825      	ldr	r5, [r4, #0]
 8009dfe:	1961      	adds	r1, r4, r5
 8009e00:	428b      	cmp	r3, r1
 8009e02:	bf01      	itttt	eq
 8009e04:	6819      	ldreq	r1, [r3, #0]
 8009e06:	685b      	ldreq	r3, [r3, #4]
 8009e08:	1949      	addeq	r1, r1, r5
 8009e0a:	6021      	streq	r1, [r4, #0]
 8009e0c:	e7ed      	b.n	8009dea <_free_r+0x22>
 8009e0e:	461a      	mov	r2, r3
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	b10b      	cbz	r3, 8009e18 <_free_r+0x50>
 8009e14:	42a3      	cmp	r3, r4
 8009e16:	d9fa      	bls.n	8009e0e <_free_r+0x46>
 8009e18:	6811      	ldr	r1, [r2, #0]
 8009e1a:	1855      	adds	r5, r2, r1
 8009e1c:	42a5      	cmp	r5, r4
 8009e1e:	d10b      	bne.n	8009e38 <_free_r+0x70>
 8009e20:	6824      	ldr	r4, [r4, #0]
 8009e22:	4421      	add	r1, r4
 8009e24:	1854      	adds	r4, r2, r1
 8009e26:	42a3      	cmp	r3, r4
 8009e28:	6011      	str	r1, [r2, #0]
 8009e2a:	d1e0      	bne.n	8009dee <_free_r+0x26>
 8009e2c:	681c      	ldr	r4, [r3, #0]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	6053      	str	r3, [r2, #4]
 8009e32:	4421      	add	r1, r4
 8009e34:	6011      	str	r1, [r2, #0]
 8009e36:	e7da      	b.n	8009dee <_free_r+0x26>
 8009e38:	d902      	bls.n	8009e40 <_free_r+0x78>
 8009e3a:	230c      	movs	r3, #12
 8009e3c:	6003      	str	r3, [r0, #0]
 8009e3e:	e7d6      	b.n	8009dee <_free_r+0x26>
 8009e40:	6825      	ldr	r5, [r4, #0]
 8009e42:	1961      	adds	r1, r4, r5
 8009e44:	428b      	cmp	r3, r1
 8009e46:	bf04      	itt	eq
 8009e48:	6819      	ldreq	r1, [r3, #0]
 8009e4a:	685b      	ldreq	r3, [r3, #4]
 8009e4c:	6063      	str	r3, [r4, #4]
 8009e4e:	bf04      	itt	eq
 8009e50:	1949      	addeq	r1, r1, r5
 8009e52:	6021      	streq	r1, [r4, #0]
 8009e54:	6054      	str	r4, [r2, #4]
 8009e56:	e7ca      	b.n	8009dee <_free_r+0x26>
 8009e58:	b003      	add	sp, #12
 8009e5a:	bd30      	pop	{r4, r5, pc}
 8009e5c:	20000a18 	.word	0x20000a18

08009e60 <sbrk_aligned>:
 8009e60:	b570      	push	{r4, r5, r6, lr}
 8009e62:	4e0e      	ldr	r6, [pc, #56]	; (8009e9c <sbrk_aligned+0x3c>)
 8009e64:	460c      	mov	r4, r1
 8009e66:	6831      	ldr	r1, [r6, #0]
 8009e68:	4605      	mov	r5, r0
 8009e6a:	b911      	cbnz	r1, 8009e72 <sbrk_aligned+0x12>
 8009e6c:	f000 f88c 	bl	8009f88 <_sbrk_r>
 8009e70:	6030      	str	r0, [r6, #0]
 8009e72:	4621      	mov	r1, r4
 8009e74:	4628      	mov	r0, r5
 8009e76:	f000 f887 	bl	8009f88 <_sbrk_r>
 8009e7a:	1c43      	adds	r3, r0, #1
 8009e7c:	d00a      	beq.n	8009e94 <sbrk_aligned+0x34>
 8009e7e:	1cc4      	adds	r4, r0, #3
 8009e80:	f024 0403 	bic.w	r4, r4, #3
 8009e84:	42a0      	cmp	r0, r4
 8009e86:	d007      	beq.n	8009e98 <sbrk_aligned+0x38>
 8009e88:	1a21      	subs	r1, r4, r0
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	f000 f87c 	bl	8009f88 <_sbrk_r>
 8009e90:	3001      	adds	r0, #1
 8009e92:	d101      	bne.n	8009e98 <sbrk_aligned+0x38>
 8009e94:	f04f 34ff 	mov.w	r4, #4294967295
 8009e98:	4620      	mov	r0, r4
 8009e9a:	bd70      	pop	{r4, r5, r6, pc}
 8009e9c:	20000a1c 	.word	0x20000a1c

08009ea0 <_malloc_r>:
 8009ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea4:	1ccd      	adds	r5, r1, #3
 8009ea6:	f025 0503 	bic.w	r5, r5, #3
 8009eaa:	3508      	adds	r5, #8
 8009eac:	2d0c      	cmp	r5, #12
 8009eae:	bf38      	it	cc
 8009eb0:	250c      	movcc	r5, #12
 8009eb2:	2d00      	cmp	r5, #0
 8009eb4:	4607      	mov	r7, r0
 8009eb6:	db01      	blt.n	8009ebc <_malloc_r+0x1c>
 8009eb8:	42a9      	cmp	r1, r5
 8009eba:	d905      	bls.n	8009ec8 <_malloc_r+0x28>
 8009ebc:	230c      	movs	r3, #12
 8009ebe:	603b      	str	r3, [r7, #0]
 8009ec0:	2600      	movs	r6, #0
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ec8:	4e2e      	ldr	r6, [pc, #184]	; (8009f84 <_malloc_r+0xe4>)
 8009eca:	f000 f86d 	bl	8009fa8 <__malloc_lock>
 8009ece:	6833      	ldr	r3, [r6, #0]
 8009ed0:	461c      	mov	r4, r3
 8009ed2:	bb34      	cbnz	r4, 8009f22 <_malloc_r+0x82>
 8009ed4:	4629      	mov	r1, r5
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	f7ff ffc2 	bl	8009e60 <sbrk_aligned>
 8009edc:	1c43      	adds	r3, r0, #1
 8009ede:	4604      	mov	r4, r0
 8009ee0:	d14d      	bne.n	8009f7e <_malloc_r+0xde>
 8009ee2:	6834      	ldr	r4, [r6, #0]
 8009ee4:	4626      	mov	r6, r4
 8009ee6:	2e00      	cmp	r6, #0
 8009ee8:	d140      	bne.n	8009f6c <_malloc_r+0xcc>
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	4631      	mov	r1, r6
 8009eee:	4638      	mov	r0, r7
 8009ef0:	eb04 0803 	add.w	r8, r4, r3
 8009ef4:	f000 f848 	bl	8009f88 <_sbrk_r>
 8009ef8:	4580      	cmp	r8, r0
 8009efa:	d13a      	bne.n	8009f72 <_malloc_r+0xd2>
 8009efc:	6821      	ldr	r1, [r4, #0]
 8009efe:	3503      	adds	r5, #3
 8009f00:	1a6d      	subs	r5, r5, r1
 8009f02:	f025 0503 	bic.w	r5, r5, #3
 8009f06:	3508      	adds	r5, #8
 8009f08:	2d0c      	cmp	r5, #12
 8009f0a:	bf38      	it	cc
 8009f0c:	250c      	movcc	r5, #12
 8009f0e:	4629      	mov	r1, r5
 8009f10:	4638      	mov	r0, r7
 8009f12:	f7ff ffa5 	bl	8009e60 <sbrk_aligned>
 8009f16:	3001      	adds	r0, #1
 8009f18:	d02b      	beq.n	8009f72 <_malloc_r+0xd2>
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	442b      	add	r3, r5
 8009f1e:	6023      	str	r3, [r4, #0]
 8009f20:	e00e      	b.n	8009f40 <_malloc_r+0xa0>
 8009f22:	6822      	ldr	r2, [r4, #0]
 8009f24:	1b52      	subs	r2, r2, r5
 8009f26:	d41e      	bmi.n	8009f66 <_malloc_r+0xc6>
 8009f28:	2a0b      	cmp	r2, #11
 8009f2a:	d916      	bls.n	8009f5a <_malloc_r+0xba>
 8009f2c:	1961      	adds	r1, r4, r5
 8009f2e:	42a3      	cmp	r3, r4
 8009f30:	6025      	str	r5, [r4, #0]
 8009f32:	bf18      	it	ne
 8009f34:	6059      	strne	r1, [r3, #4]
 8009f36:	6863      	ldr	r3, [r4, #4]
 8009f38:	bf08      	it	eq
 8009f3a:	6031      	streq	r1, [r6, #0]
 8009f3c:	5162      	str	r2, [r4, r5]
 8009f3e:	604b      	str	r3, [r1, #4]
 8009f40:	4638      	mov	r0, r7
 8009f42:	f104 060b 	add.w	r6, r4, #11
 8009f46:	f000 f835 	bl	8009fb4 <__malloc_unlock>
 8009f4a:	f026 0607 	bic.w	r6, r6, #7
 8009f4e:	1d23      	adds	r3, r4, #4
 8009f50:	1af2      	subs	r2, r6, r3
 8009f52:	d0b6      	beq.n	8009ec2 <_malloc_r+0x22>
 8009f54:	1b9b      	subs	r3, r3, r6
 8009f56:	50a3      	str	r3, [r4, r2]
 8009f58:	e7b3      	b.n	8009ec2 <_malloc_r+0x22>
 8009f5a:	6862      	ldr	r2, [r4, #4]
 8009f5c:	42a3      	cmp	r3, r4
 8009f5e:	bf0c      	ite	eq
 8009f60:	6032      	streq	r2, [r6, #0]
 8009f62:	605a      	strne	r2, [r3, #4]
 8009f64:	e7ec      	b.n	8009f40 <_malloc_r+0xa0>
 8009f66:	4623      	mov	r3, r4
 8009f68:	6864      	ldr	r4, [r4, #4]
 8009f6a:	e7b2      	b.n	8009ed2 <_malloc_r+0x32>
 8009f6c:	4634      	mov	r4, r6
 8009f6e:	6876      	ldr	r6, [r6, #4]
 8009f70:	e7b9      	b.n	8009ee6 <_malloc_r+0x46>
 8009f72:	230c      	movs	r3, #12
 8009f74:	603b      	str	r3, [r7, #0]
 8009f76:	4638      	mov	r0, r7
 8009f78:	f000 f81c 	bl	8009fb4 <__malloc_unlock>
 8009f7c:	e7a1      	b.n	8009ec2 <_malloc_r+0x22>
 8009f7e:	6025      	str	r5, [r4, #0]
 8009f80:	e7de      	b.n	8009f40 <_malloc_r+0xa0>
 8009f82:	bf00      	nop
 8009f84:	20000a18 	.word	0x20000a18

08009f88 <_sbrk_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	4d06      	ldr	r5, [pc, #24]	; (8009fa4 <_sbrk_r+0x1c>)
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	4604      	mov	r4, r0
 8009f90:	4608      	mov	r0, r1
 8009f92:	602b      	str	r3, [r5, #0]
 8009f94:	f7f7 fbea 	bl	800176c <_sbrk>
 8009f98:	1c43      	adds	r3, r0, #1
 8009f9a:	d102      	bne.n	8009fa2 <_sbrk_r+0x1a>
 8009f9c:	682b      	ldr	r3, [r5, #0]
 8009f9e:	b103      	cbz	r3, 8009fa2 <_sbrk_r+0x1a>
 8009fa0:	6023      	str	r3, [r4, #0]
 8009fa2:	bd38      	pop	{r3, r4, r5, pc}
 8009fa4:	20000a20 	.word	0x20000a20

08009fa8 <__malloc_lock>:
 8009fa8:	4801      	ldr	r0, [pc, #4]	; (8009fb0 <__malloc_lock+0x8>)
 8009faa:	f000 b809 	b.w	8009fc0 <__retarget_lock_acquire_recursive>
 8009fae:	bf00      	nop
 8009fb0:	20000a24 	.word	0x20000a24

08009fb4 <__malloc_unlock>:
 8009fb4:	4801      	ldr	r0, [pc, #4]	; (8009fbc <__malloc_unlock+0x8>)
 8009fb6:	f000 b804 	b.w	8009fc2 <__retarget_lock_release_recursive>
 8009fba:	bf00      	nop
 8009fbc:	20000a24 	.word	0x20000a24

08009fc0 <__retarget_lock_acquire_recursive>:
 8009fc0:	4770      	bx	lr

08009fc2 <__retarget_lock_release_recursive>:
 8009fc2:	4770      	bx	lr

08009fc4 <_init>:
 8009fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc6:	bf00      	nop
 8009fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fca:	bc08      	pop	{r3}
 8009fcc:	469e      	mov	lr, r3
 8009fce:	4770      	bx	lr

08009fd0 <_fini>:
 8009fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd2:	bf00      	nop
 8009fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fd6:	bc08      	pop	{r3}
 8009fd8:	469e      	mov	lr, r3
 8009fda:	4770      	bx	lr
