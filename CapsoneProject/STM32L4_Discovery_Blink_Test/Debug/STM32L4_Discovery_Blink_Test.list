
STM32L4_Discovery_Blink_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b98  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08009d20  08009d20  00019d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d6c  08009d6c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009d6c  08009d6c  00019d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d74  08009d74  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d74  08009d74  00019d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d78  08009d78  00019d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a30  20000090  08009e0c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ac0  08009e0c  00020ac0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec86  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041df  00000000  00000000  0003ed46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001840  00000000  00000000  00042f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b0  00000000  00000000  00044768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa58  00000000  00000000  00045e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eae1  00000000  00000000  00070870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9bf1  00000000  00000000  0008f351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00188f42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006804  00000000  00000000  00188f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009d08 	.word	0x08009d08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009d08 	.word	0x08009d08

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 ff84 	bl	80013dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f820 	bl	8000518 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004d8:	f000 f882 	bl	80005e0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 faa2 	bl	8000a24 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e0:	f000 f8ac 	bl	800063c <MX_I2C1_Init>
  MX_I2C2_Init();
 80004e4:	f000 f8ea 	bl	80006bc <MX_I2C2_Init>
  MX_LCD_Init();
 80004e8:	f000 f928 	bl	800073c <MX_LCD_Init>
  MX_QUADSPI_Init();
 80004ec:	f000 f95e 	bl	80007ac <MX_QUADSPI_Init>
  MX_SAI1_Init();
 80004f0:	f000 f982 	bl	80007f8 <MX_SAI1_Init>
  MX_SPI2_Init();
 80004f4:	f000 fa28 	bl	8000948 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80004f8:	f000 fa64 	bl	80009c4 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 80004fc:	f008 ffb8 	bl	8009470 <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(SHOXLED_GPIO_Port, SHOXLED_Pin);
 8000500:	2104      	movs	r1, #4
 8000502:	4804      	ldr	r0, [pc, #16]	; (8000514 <main+0x48>)
 8000504:	f001 fade 	bl	8001ac4 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000508:	2064      	movs	r0, #100	; 0x64
 800050a:	f000 ffe3 	bl	80014d4 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800050e:	f008 ffd5 	bl	80094bc <MX_USB_HOST_Process>
	HAL_GPIO_TogglePin(SHOXLED_GPIO_Port, SHOXLED_Pin);
 8000512:	e7f5      	b.n	8000500 <main+0x34>
 8000514:	48000400 	.word	0x48000400

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b096      	sub	sp, #88	; 0x58
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2244      	movs	r2, #68	; 0x44
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f009 fae8 	bl	8009afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	463b      	mov	r3, r7
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800053a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800053e:	f003 f87f 	bl	8003640 <HAL_PWREx_ControlVoltageScaling>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000548:	f000 fbaa 	bl	8000ca0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800054c:	f003 f85a 	bl	8003604 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <SystemClock_Config+0xc4>)
 8000552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000556:	4a21      	ldr	r2, [pc, #132]	; (80005dc <SystemClock_Config+0xc4>)
 8000558:	f023 0318 	bic.w	r3, r3, #24
 800055c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000560:	231c      	movs	r3, #28
 8000562:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800056c:	2301      	movs	r3, #1
 800056e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000574:	2360      	movs	r3, #96	; 0x60
 8000576:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800057c:	2301      	movs	r3, #1
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000580:	2301      	movs	r3, #1
 8000582:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000584:	2314      	movs	r3, #20
 8000586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000588:	2307      	movs	r3, #7
 800058a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4618      	mov	r0, r3
 800059a:	f003 f973 	bl	8003884 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005a4:	f000 fb7c 	bl	8000ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2303      	movs	r3, #3
 80005ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005bc:	463b      	mov	r3, r7
 80005be:	2101      	movs	r1, #1
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 fd3b 	bl	800403c <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005cc:	f000 fb68 	bl	8000ca0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005d0:	f004 ffb0 	bl	8005534 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005d4:	bf00      	nop
 80005d6:	3758      	adds	r7, #88	; 0x58
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000

080005e0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b0a2      	sub	sp, #136	; 0x88
 80005e4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2288      	movs	r2, #136	; 0x88
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f009 fa85 	bl	8009afc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB;
 80005f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80005f6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80005fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000600:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000602:	2301      	movs	r3, #1
 8000604:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000606:	2301      	movs	r3, #1
 8000608:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800060a:	2318      	movs	r3, #24
 800060c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800060e:	2307      	movs	r3, #7
 8000610:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 800061a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800061e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4618      	mov	r0, r3
 8000624:	f003 ff2e 	bl	8004484 <HAL_RCCEx_PeriphCLKConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 800062e:	f000 fb37 	bl	8000ca0 <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3788      	adds	r7, #136	; 0x88
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <MX_I2C1_Init+0x74>)
 8000642:	4a1c      	ldr	r2, [pc, #112]	; (80006b4 <MX_I2C1_Init+0x78>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_I2C1_Init+0x74>)
 8000648:	4a1b      	ldr	r2, [pc, #108]	; (80006b8 <MX_I2C1_Init+0x7c>)
 800064a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <MX_I2C1_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_I2C1_Init+0x74>)
 8000654:	2201      	movs	r2, #1
 8000656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_I2C1_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_I2C1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_I2C1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000676:	480e      	ldr	r0, [pc, #56]	; (80006b0 <MX_I2C1_Init+0x74>)
 8000678:	f002 fdbb 	bl	80031f2 <HAL_I2C_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000682:	f000 fb0d 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000686:	2100      	movs	r1, #0
 8000688:	4809      	ldr	r0, [pc, #36]	; (80006b0 <MX_I2C1_Init+0x74>)
 800068a:	f002 fe41 	bl	8003310 <HAL_I2CEx_ConfigAnalogFilter>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000694:	f000 fb04 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000698:	2100      	movs	r1, #0
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_I2C1_Init+0x74>)
 800069c:	f002 fe83 	bl	80033a6 <HAL_I2CEx_ConfigDigitalFilter>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006a6:	f000 fafb 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200000ac 	.word	0x200000ac
 80006b4:	40005400 	.word	0x40005400
 80006b8:	00404c74 	.word	0x00404c74

080006bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_I2C2_Init+0x74>)
 80006c2:	4a1c      	ldr	r2, [pc, #112]	; (8000734 <MX_I2C2_Init+0x78>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00404C74;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <MX_I2C2_Init+0x74>)
 80006c8:	4a1b      	ldr	r2, [pc, #108]	; (8000738 <MX_I2C2_Init+0x7c>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_I2C2_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_I2C2_Init+0x74>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_I2C2_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_I2C2_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2C2_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_I2C2_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_I2C2_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006f6:	480e      	ldr	r0, [pc, #56]	; (8000730 <MX_I2C2_Init+0x74>)
 80006f8:	f002 fd7b 	bl	80031f2 <HAL_I2C_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000702:	f000 facd 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000706:	2100      	movs	r1, #0
 8000708:	4809      	ldr	r0, [pc, #36]	; (8000730 <MX_I2C2_Init+0x74>)
 800070a:	f002 fe01 	bl	8003310 <HAL_I2CEx_ConfigAnalogFilter>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000714:	f000 fac4 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000718:	2100      	movs	r1, #0
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_I2C2_Init+0x74>)
 800071c:	f002 fe43 	bl	80033a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000726:	f000 fabb 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000100 	.word	0x20000100
 8000734:	40005800 	.word	0x40005800
 8000738:	00404c74 	.word	0x00404c74

0800073c <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_LCD_Init+0x68>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <MX_LCD_Init+0x6c>)
 8000744:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_LCD_Init+0x68>)
 8000748:	2200      	movs	r2, #0
 800074a:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_LCD_Init+0x68>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_LCD_Init+0x68>)
 8000754:	220c      	movs	r2, #12
 8000756:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_LCD_Init+0x68>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_LCD_Init+0x68>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_LCD_Init+0x68>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_LCD_Init+0x68>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_LCD_Init+0x68>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_LCD_Init+0x68>)
 8000778:	2200      	movs	r2, #0
 800077a:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_LCD_Init+0x68>)
 800077e:	2200      	movs	r2, #0
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_LCD_Init+0x68>)
 8000784:	2200      	movs	r2, #0
 8000786:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_LCD_Init+0x68>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_LCD_Init+0x68>)
 8000790:	f002 fe56 	bl	8003440 <HAL_LCD_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_LCD_Init+0x62>
  {
    Error_Handler();
 800079a:	f000 fa81 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000154 	.word	0x20000154
 80007a8:	40002400 	.word	0x40002400

080007ac <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_QUADSPI_Init+0x44>)
 80007b2:	4a10      	ldr	r2, [pc, #64]	; (80007f4 <MX_QUADSPI_Init+0x48>)
 80007b4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_QUADSPI_Init+0x44>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_QUADSPI_Init+0x44>)
 80007be:	2204      	movs	r2, #4
 80007c0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_QUADSPI_Init+0x44>)
 80007c4:	2210      	movs	r2, #16
 80007c6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_QUADSPI_Init+0x44>)
 80007ca:	2218      	movs	r2, #24
 80007cc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_QUADSPI_Init+0x44>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_QUADSPI_Init+0x44>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_QUADSPI_Init+0x44>)
 80007dc:	f002 ff96 	bl	800370c <HAL_QSPI_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007e6:	f000 fa5b 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000190 	.word	0x20000190
 80007f4:	a0001000 	.word	0xa0001000

080007f8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80007fc:	4b4d      	ldr	r3, [pc, #308]	; (8000934 <MX_SAI1_Init+0x13c>)
 80007fe:	4a4e      	ldr	r2, [pc, #312]	; (8000938 <MX_SAI1_Init+0x140>)
 8000800:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000802:	4b4c      	ldr	r3, [pc, #304]	; (8000934 <MX_SAI1_Init+0x13c>)
 8000804:	2200      	movs	r2, #0
 8000806:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000808:	4b4a      	ldr	r3, [pc, #296]	; (8000934 <MX_SAI1_Init+0x13c>)
 800080a:	2200      	movs	r2, #0
 800080c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800080e:	4b49      	ldr	r3, [pc, #292]	; (8000934 <MX_SAI1_Init+0x13c>)
 8000810:	2240      	movs	r2, #64	; 0x40
 8000812:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000814:	4b47      	ldr	r3, [pc, #284]	; (8000934 <MX_SAI1_Init+0x13c>)
 8000816:	2200      	movs	r2, #0
 8000818:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800081a:	4b46      	ldr	r3, [pc, #280]	; (8000934 <MX_SAI1_Init+0x13c>)
 800081c:	2200      	movs	r2, #0
 800081e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000820:	4b44      	ldr	r3, [pc, #272]	; (8000934 <MX_SAI1_Init+0x13c>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000826:	4b43      	ldr	r3, [pc, #268]	; (8000934 <MX_SAI1_Init+0x13c>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800082c:	4b41      	ldr	r3, [pc, #260]	; (8000934 <MX_SAI1_Init+0x13c>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000832:	4b40      	ldr	r3, [pc, #256]	; (8000934 <MX_SAI1_Init+0x13c>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000838:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <MX_SAI1_Init+0x13c>)
 800083a:	4a40      	ldr	r2, [pc, #256]	; (800093c <MX_SAI1_Init+0x144>)
 800083c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800083e:	4b3d      	ldr	r3, [pc, #244]	; (8000934 <MX_SAI1_Init+0x13c>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000844:	4b3b      	ldr	r3, [pc, #236]	; (8000934 <MX_SAI1_Init+0x13c>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800084a:	4b3a      	ldr	r3, [pc, #232]	; (8000934 <MX_SAI1_Init+0x13c>)
 800084c:	2200      	movs	r2, #0
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000850:	4b38      	ldr	r3, [pc, #224]	; (8000934 <MX_SAI1_Init+0x13c>)
 8000852:	2200      	movs	r2, #0
 8000854:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000856:	4b37      	ldr	r3, [pc, #220]	; (8000934 <MX_SAI1_Init+0x13c>)
 8000858:	2208      	movs	r2, #8
 800085a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800085c:	4b35      	ldr	r3, [pc, #212]	; (8000934 <MX_SAI1_Init+0x13c>)
 800085e:	2201      	movs	r2, #1
 8000860:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000862:	4b34      	ldr	r3, [pc, #208]	; (8000934 <MX_SAI1_Init+0x13c>)
 8000864:	2200      	movs	r2, #0
 8000866:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000868:	4b32      	ldr	r3, [pc, #200]	; (8000934 <MX_SAI1_Init+0x13c>)
 800086a:	2200      	movs	r2, #0
 800086c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800086e:	4b31      	ldr	r3, [pc, #196]	; (8000934 <MX_SAI1_Init+0x13c>)
 8000870:	2200      	movs	r2, #0
 8000872:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000874:	4b2f      	ldr	r3, [pc, #188]	; (8000934 <MX_SAI1_Init+0x13c>)
 8000876:	2200      	movs	r2, #0
 8000878:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800087a:	4b2e      	ldr	r3, [pc, #184]	; (8000934 <MX_SAI1_Init+0x13c>)
 800087c:	2200      	movs	r2, #0
 800087e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000880:	4b2c      	ldr	r3, [pc, #176]	; (8000934 <MX_SAI1_Init+0x13c>)
 8000882:	2201      	movs	r2, #1
 8000884:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000886:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <MX_SAI1_Init+0x13c>)
 8000888:	2200      	movs	r2, #0
 800088a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800088c:	4829      	ldr	r0, [pc, #164]	; (8000934 <MX_SAI1_Init+0x13c>)
 800088e:	f005 f923 	bl	8005ad8 <HAL_SAI_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8000898:	f000 fa02 	bl	8000ca0 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800089c:	4b28      	ldr	r3, [pc, #160]	; (8000940 <MX_SAI1_Init+0x148>)
 800089e:	4a29      	ldr	r2, [pc, #164]	; (8000944 <MX_SAI1_Init+0x14c>)
 80008a0:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 80008a2:	4b27      	ldr	r3, [pc, #156]	; (8000940 <MX_SAI1_Init+0x148>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_SAI1_Init+0x148>)
 80008aa:	2203      	movs	r2, #3
 80008ac:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 80008ae:	4b24      	ldr	r3, [pc, #144]	; (8000940 <MX_SAI1_Init+0x148>)
 80008b0:	2240      	movs	r2, #64	; 0x40
 80008b2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80008b4:	4b22      	ldr	r3, [pc, #136]	; (8000940 <MX_SAI1_Init+0x148>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80008ba:	4b21      	ldr	r3, [pc, #132]	; (8000940 <MX_SAI1_Init+0x148>)
 80008bc:	2200      	movs	r2, #0
 80008be:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_SAI1_Init+0x148>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <MX_SAI1_Init+0x148>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80008cc:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_SAI1_Init+0x148>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80008d2:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_SAI1_Init+0x148>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80008d8:	4b19      	ldr	r3, [pc, #100]	; (8000940 <MX_SAI1_Init+0x148>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_SAI1_Init+0x148>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_SAI1_Init+0x148>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_SAI1_Init+0x148>)
 80008ec:	2208      	movs	r2, #8
 80008ee:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_SAI1_Init+0x148>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80008f6:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_SAI1_Init+0x148>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_SAI1_Init+0x148>)
 80008fe:	2200      	movs	r2, #0
 8000900:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_SAI1_Init+0x148>)
 8000904:	2200      	movs	r2, #0
 8000906:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <MX_SAI1_Init+0x148>)
 800090a:	2200      	movs	r2, #0
 800090c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_SAI1_Init+0x148>)
 8000910:	2200      	movs	r2, #0
 8000912:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <MX_SAI1_Init+0x148>)
 8000916:	2201      	movs	r2, #1
 8000918:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_SAI1_Init+0x148>)
 800091c:	2200      	movs	r2, #0
 800091e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000920:	4807      	ldr	r0, [pc, #28]	; (8000940 <MX_SAI1_Init+0x148>)
 8000922:	f005 f8d9 	bl	8005ad8 <HAL_SAI_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 800092c:	f000 f9b8 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200001d4 	.word	0x200001d4
 8000938:	40015404 	.word	0x40015404
 800093c:	0002ee00 	.word	0x0002ee00
 8000940:	20000258 	.word	0x20000258
 8000944:	40015424 	.word	0x40015424

08000948 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_SPI2_Init+0x74>)
 800094e:	4a1c      	ldr	r2, [pc, #112]	; (80009c0 <MX_SPI2_Init+0x78>)
 8000950:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_SPI2_Init+0x74>)
 8000954:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000958:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_SPI2_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_SPI2_Init+0x74>)
 8000962:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000966:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_SPI2_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_SPI2_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_SPI2_Init+0x74>)
 8000976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_SPI2_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_SPI2_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_SPI2_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_SPI2_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_SPI2_Init+0x74>)
 8000996:	2207      	movs	r2, #7
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_SPI2_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_SPI2_Init+0x74>)
 80009a2:	2208      	movs	r2, #8
 80009a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_SPI2_Init+0x74>)
 80009a8:	f005 fa42 	bl	8005e30 <HAL_SPI_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80009b2:	f000 f975 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200002dc 	.word	0x200002dc
 80009c0:	40003800 	.word	0x40003800

080009c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009ca:	4a15      	ldr	r2, [pc, #84]	; (8000a20 <MX_USART2_UART_Init+0x5c>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 8000a08:	f005 fab5 	bl	8005f76 <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a12:	f000 f945 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000340 	.word	0x20000340
 8000a20:	40004400 	.word	0x40004400

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3a:	4b94      	ldr	r3, [pc, #592]	; (8000c8c <MX_GPIO_Init+0x268>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a93      	ldr	r2, [pc, #588]	; (8000c8c <MX_GPIO_Init+0x268>)
 8000a40:	f043 0310 	orr.w	r3, r3, #16
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b91      	ldr	r3, [pc, #580]	; (8000c8c <MX_GPIO_Init+0x268>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0310 	and.w	r3, r3, #16
 8000a4e:	61bb      	str	r3, [r7, #24]
 8000a50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b8e      	ldr	r3, [pc, #568]	; (8000c8c <MX_GPIO_Init+0x268>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a8d      	ldr	r2, [pc, #564]	; (8000c8c <MX_GPIO_Init+0x268>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b8b      	ldr	r3, [pc, #556]	; (8000c8c <MX_GPIO_Init+0x268>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6a:	4b88      	ldr	r3, [pc, #544]	; (8000c8c <MX_GPIO_Init+0x268>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a87      	ldr	r2, [pc, #540]	; (8000c8c <MX_GPIO_Init+0x268>)
 8000a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b85      	ldr	r3, [pc, #532]	; (8000c8c <MX_GPIO_Init+0x268>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b82      	ldr	r3, [pc, #520]	; (8000c8c <MX_GPIO_Init+0x268>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a81      	ldr	r2, [pc, #516]	; (8000c8c <MX_GPIO_Init+0x268>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b7f      	ldr	r3, [pc, #508]	; (8000c8c <MX_GPIO_Init+0x268>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	4b7c      	ldr	r3, [pc, #496]	; (8000c8c <MX_GPIO_Init+0x268>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4a7b      	ldr	r2, [pc, #492]	; (8000c8c <MX_GPIO_Init+0x268>)
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4b79      	ldr	r3, [pc, #484]	; (8000c8c <MX_GPIO_Init+0x268>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab2:	4b76      	ldr	r3, [pc, #472]	; (8000c8c <MX_GPIO_Init+0x268>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4a75      	ldr	r2, [pc, #468]	; (8000c8c <MX_GPIO_Init+0x268>)
 8000ab8:	f043 0308 	orr.w	r3, r3, #8
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b73      	ldr	r3, [pc, #460]	; (8000c8c <MX_GPIO_Init+0x268>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f240 1109 	movw	r1, #265	; 0x109
 8000ad0:	486f      	ldr	r0, [pc, #444]	; (8000c90 <MX_GPIO_Init+0x26c>)
 8000ad2:	f000 ffdf 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHOXLED_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	210c      	movs	r1, #12
 8000ada:	486e      	ldr	r0, [pc, #440]	; (8000c94 <MX_GPIO_Init+0x270>)
 8000adc:	f000 ffda 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae6:	486c      	ldr	r0, [pc, #432]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000ae8:	f000 ffd4 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000af2:	4869      	ldr	r0, [pc, #420]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000af4:	f000 ffce 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2180      	movs	r1, #128	; 0x80
 8000afc:	4867      	ldr	r0, [pc, #412]	; (8000c9c <MX_GPIO_Init+0x278>)
 8000afe:	f000 ffc9 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000b02:	2308      	movs	r3, #8
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	485d      	ldr	r0, [pc, #372]	; (8000c90 <MX_GPIO_Init+0x26c>)
 8000b1a:	f000 fe11 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_IRQ_OUT_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8000b1e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b24:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	4858      	ldr	r0, [pc, #352]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000b36:	f000 fe03 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 MAG_INT_Pin MAG_DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 8000b3a:	2307      	movs	r3, #7
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4852      	ldr	r0, [pc, #328]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000b4e:	f000 fdf7 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_CENTER_Pin JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin
                           JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 8000b52:	232f      	movs	r3, #47	; 0x2f
 8000b54:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f000 fdea 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b70:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b84:	f000 fddc 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHOXLED_Pin */
  GPIO_InitStruct.Pin = SHOXLED_Pin;
 8000b88:	2304      	movs	r3, #4
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	2303      	movs	r3, #3
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SHOXLED_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	483d      	ldr	r0, [pc, #244]	; (8000c94 <MX_GPIO_Init+0x270>)
 8000ba0:	f000 fdce 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000ba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4834      	ldr	r0, [pc, #208]	; (8000c90 <MX_GPIO_Init+0x26c>)
 8000bbe:	f000 fdbf 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8000bc2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	4619      	mov	r1, r3
 8000bda:	482f      	ldr	r0, [pc, #188]	; (8000c98 <MX_GPIO_Init+0x274>)
 8000bdc:	f000 fdb0 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_RST_Pin GYRO_INT1_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000be0:	2305      	movs	r3, #5
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000be4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4829      	ldr	r0, [pc, #164]	; (8000c9c <MX_GPIO_Init+0x278>)
 8000bf6:	f000 fda3 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4822      	ldr	r0, [pc, #136]	; (8000c9c <MX_GPIO_Init+0x278>)
 8000c12:	f000 fd95 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : M3V3_REG_ON_Pin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8000c16:	2308      	movs	r3, #8
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4819      	ldr	r0, [pc, #100]	; (8000c94 <MX_GPIO_Init+0x270>)
 8000c2e:	f000 fd87 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT2_Pin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c38:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4812      	ldr	r0, [pc, #72]	; (8000c94 <MX_GPIO_Init+0x270>)
 8000c4a:	f000 fd79 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_CS_Pin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	480a      	ldr	r0, [pc, #40]	; (8000c90 <MX_GPIO_Init+0x26c>)
 8000c66:	f000 fd6b 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_INT_Pin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c6e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4804      	ldr	r0, [pc, #16]	; (8000c90 <MX_GPIO_Init+0x26c>)
 8000c80:	f000 fd5e 	bl	8001740 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c84:	bf00      	nop
 8000c86:	3730      	adds	r7, #48	; 0x30
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	48001000 	.word	0x48001000
 8000c94:	48000400 	.word	0x48000400
 8000c98:	48000800 	.word	0x48000800
 8000c9c:	48000c00 	.word	0x48000c00

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <Error_Handler+0x8>
	...

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb6:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HAL_MspInit+0x44>)
 8000ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cce:	4a08      	ldr	r2, [pc, #32]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b0ae      	sub	sp, #184	; 0xb8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	2288      	movs	r2, #136	; 0x88
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f008 fef1 	bl	8009afc <memset>
  if(hi2c->Instance==I2C1)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a42      	ldr	r2, [pc, #264]	; (8000e28 <HAL_I2C_MspInit+0x134>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d13b      	bne.n	8000d9c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d24:	2340      	movs	r3, #64	; 0x40
 8000d26:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4618      	mov	r0, r3
 8000d32:	f003 fba7 	bl	8004484 <HAL_RCCEx_PeriphCLKConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d3c:	f7ff ffb0 	bl	8000ca0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d40:	4b3a      	ldr	r3, [pc, #232]	; (8000e2c <HAL_I2C_MspInit+0x138>)
 8000d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d44:	4a39      	ldr	r2, [pc, #228]	; (8000e2c <HAL_I2C_MspInit+0x138>)
 8000d46:	f043 0302 	orr.w	r3, r3, #2
 8000d4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4c:	4b37      	ldr	r3, [pc, #220]	; (8000e2c <HAL_I2C_MspInit+0x138>)
 8000d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	61bb      	str	r3, [r7, #24]
 8000d56:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000d58:	23c0      	movs	r3, #192	; 0xc0
 8000d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5e:	2312      	movs	r3, #18
 8000d60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d70:	2304      	movs	r3, #4
 8000d72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d76:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	482c      	ldr	r0, [pc, #176]	; (8000e30 <HAL_I2C_MspInit+0x13c>)
 8000d7e:	f000 fcdf 	bl	8001740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d82:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <HAL_I2C_MspInit+0x138>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d86:	4a29      	ldr	r2, [pc, #164]	; (8000e2c <HAL_I2C_MspInit+0x138>)
 8000d88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d8e:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <HAL_I2C_MspInit+0x138>)
 8000d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d9a:	e040      	b.n	8000e1e <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a24      	ldr	r2, [pc, #144]	; (8000e34 <HAL_I2C_MspInit+0x140>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d13b      	bne.n	8000e1e <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4618      	mov	r0, r3
 8000db4:	f003 fb66 	bl	8004484 <HAL_RCCEx_PeriphCLKConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8000dbe:	f7ff ff6f 	bl	8000ca0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <HAL_I2C_MspInit+0x138>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	4a19      	ldr	r2, [pc, #100]	; (8000e2c <HAL_I2C_MspInit+0x138>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_I2C_MspInit+0x138>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8000dda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de2:	2312      	movs	r3, #18
 8000de4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000df4:	2304      	movs	r3, #4
 8000df6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480b      	ldr	r0, [pc, #44]	; (8000e30 <HAL_I2C_MspInit+0x13c>)
 8000e02:	f000 fc9d 	bl	8001740 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_I2C_MspInit+0x138>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_I2C_MspInit+0x138>)
 8000e0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e10:	6593      	str	r3, [r2, #88]	; 0x58
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_I2C_MspInit+0x138>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
}
 8000e1e:	bf00      	nop
 8000e20:	37b8      	adds	r7, #184	; 0xb8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40005400 	.word	0x40005400
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	48000400 	.word	0x48000400
 8000e34:	40005800 	.word	0x40005800

08000e38 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b0ae      	sub	sp, #184	; 0xb8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	2288      	movs	r2, #136	; 0x88
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f008 fe4f 	bl	8009afc <memset>
  if(hlcd->Instance==LCD)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a57      	ldr	r2, [pc, #348]	; (8000fc0 <HAL_LCD_MspInit+0x188>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	f040 80a6 	bne.w	8000fb6 <HAL_LCD_MspInit+0x17e>

  /* USER CODE END LCD_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e6e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 fb01 	bl	8004484 <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_LCD_MspInit+0x54>
    {
      Error_Handler();
 8000e88:	f7ff ff0a 	bl	8000ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8000e8c:	4b4d      	ldr	r3, [pc, #308]	; (8000fc4 <HAL_LCD_MspInit+0x18c>)
 8000e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e90:	4a4c      	ldr	r2, [pc, #304]	; (8000fc4 <HAL_LCD_MspInit+0x18c>)
 8000e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e96:	6593      	str	r3, [r2, #88]	; 0x58
 8000e98:	4b4a      	ldr	r3, [pc, #296]	; (8000fc4 <HAL_LCD_MspInit+0x18c>)
 8000e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ea0:	61bb      	str	r3, [r7, #24]
 8000ea2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea4:	4b47      	ldr	r3, [pc, #284]	; (8000fc4 <HAL_LCD_MspInit+0x18c>)
 8000ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea8:	4a46      	ldr	r2, [pc, #280]	; (8000fc4 <HAL_LCD_MspInit+0x18c>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb0:	4b44      	ldr	r3, [pc, #272]	; (8000fc4 <HAL_LCD_MspInit+0x18c>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b41      	ldr	r3, [pc, #260]	; (8000fc4 <HAL_LCD_MspInit+0x18c>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	4a40      	ldr	r2, [pc, #256]	; (8000fc4 <HAL_LCD_MspInit+0x18c>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec8:	4b3e      	ldr	r3, [pc, #248]	; (8000fc4 <HAL_LCD_MspInit+0x18c>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed4:	4b3b      	ldr	r3, [pc, #236]	; (8000fc4 <HAL_LCD_MspInit+0x18c>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed8:	4a3a      	ldr	r2, [pc, #232]	; (8000fc4 <HAL_LCD_MspInit+0x18c>)
 8000eda:	f043 0302 	orr.w	r3, r3, #2
 8000ede:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee0:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <HAL_LCD_MspInit+0x18c>)
 8000ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eec:	4b35      	ldr	r3, [pc, #212]	; (8000fc4 <HAL_LCD_MspInit+0x18c>)
 8000eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef0:	4a34      	ldr	r2, [pc, #208]	; (8000fc4 <HAL_LCD_MspInit+0x18c>)
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef8:	4b32      	ldr	r3, [pc, #200]	; (8000fc4 <HAL_LCD_MspInit+0x18c>)
 8000efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efc:	f003 0308 	and.w	r3, r3, #8
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 8000f04:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000f08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f1e:	230b      	movs	r3, #11
 8000f20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4827      	ldr	r0, [pc, #156]	; (8000fc8 <HAL_LCD_MspInit+0x190>)
 8000f2c:	f000 fc08 	bl	8001740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 8000f30:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000f34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f4a:	230b      	movs	r3, #11
 8000f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f54:	4619      	mov	r1, r3
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5a:	f000 fbf1 	bl	8001740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 8000f5e:	f24f 2333 	movw	r3, #62003	; 0xf233
 8000f62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f78:	230b      	movs	r3, #11
 8000f7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f82:	4619      	mov	r1, r3
 8000f84:	4811      	ldr	r0, [pc, #68]	; (8000fcc <HAL_LCD_MspInit+0x194>)
 8000f86:	f000 fbdb 	bl	8001740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 8000f8a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000fa4:	230b      	movs	r3, #11
 8000fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000faa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <HAL_LCD_MspInit+0x198>)
 8000fb2:	f000 fbc5 	bl	8001740 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8000fb6:	bf00      	nop
 8000fb8:	37b8      	adds	r7, #184	; 0xb8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40002400 	.word	0x40002400
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	48000800 	.word	0x48000800
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	48000c00 	.word	0x48000c00

08000fd4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a17      	ldr	r2, [pc, #92]	; (8001050 <HAL_QSPI_MspInit+0x7c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d128      	bne.n	8001048 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <HAL_QSPI_MspInit+0x80>)
 8000ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ffa:	4a16      	ldr	r2, [pc, #88]	; (8001054 <HAL_QSPI_MspInit+0x80>)
 8000ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001000:	6513      	str	r3, [r2, #80]	; 0x50
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <HAL_QSPI_MspInit+0x80>)
 8001004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_QSPI_MspInit+0x80>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a10      	ldr	r2, [pc, #64]	; (8001054 <HAL_QSPI_MspInit+0x80>)
 8001014:	f043 0310 	orr.w	r3, r3, #16
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_QSPI_MspInit+0x80>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0310 	and.w	r3, r3, #16
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 8001026:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800102a:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001038:	230a      	movs	r3, #10
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <HAL_QSPI_MspInit+0x84>)
 8001044:	f000 fb7c 	bl	8001740 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001048:	bf00      	nop
 800104a:	3728      	adds	r7, #40	; 0x28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	a0001000 	.word	0xa0001000
 8001054:	40021000 	.word	0x40021000
 8001058:	48001000 	.word	0x48001000

0800105c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <HAL_SPI_MspInit+0x7c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d127      	bne.n	80010ce <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_SPI_MspInit+0x80>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	4a16      	ldr	r2, [pc, #88]	; (80010dc <HAL_SPI_MspInit+0x80>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001088:	6593      	str	r3, [r2, #88]	; 0x58
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <HAL_SPI_MspInit+0x80>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_SPI_MspInit+0x80>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <HAL_SPI_MspInit+0x80>)
 800109c:	f043 0308 	orr.w	r3, r3, #8
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_SPI_MspInit+0x80>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 80010ae:	231a      	movs	r3, #26
 80010b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010be:	2305      	movs	r3, #5
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <HAL_SPI_MspInit+0x84>)
 80010ca:	f000 fb39 	bl	8001740 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	3728      	adds	r7, #40	; 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40003800 	.word	0x40003800
 80010dc:	40021000 	.word	0x40021000
 80010e0:	48000c00 	.word	0x48000c00

080010e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0ac      	sub	sp, #176	; 0xb0
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2288      	movs	r2, #136	; 0x88
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f008 fcf9 	bl	8009afc <memset>
  if(huart->Instance==USART2)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a21      	ldr	r2, [pc, #132]	; (8001194 <HAL_UART_MspInit+0xb0>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d13a      	bne.n	800118a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001114:	2302      	movs	r3, #2
 8001116:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001118:	2300      	movs	r3, #0
 800111a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4618      	mov	r0, r3
 8001122:	f003 f9af 	bl	8004484 <HAL_RCCEx_PeriphCLKConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800112c:	f7ff fdb8 	bl	8000ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_UART_MspInit+0xb4>)
 8001132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001134:	4a18      	ldr	r2, [pc, #96]	; (8001198 <HAL_UART_MspInit+0xb4>)
 8001136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113a:	6593      	str	r3, [r2, #88]	; 0x58
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_UART_MspInit+0xb4>)
 800113e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <HAL_UART_MspInit+0xb4>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114c:	4a12      	ldr	r2, [pc, #72]	; (8001198 <HAL_UART_MspInit+0xb4>)
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <HAL_UART_MspInit+0xb4>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001160:	2360      	movs	r3, #96	; 0x60
 8001162:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800116c:	2301      	movs	r3, #1
 800116e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001178:	2307      	movs	r3, #7
 800117a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800117e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <HAL_UART_MspInit+0xb8>)
 8001186:	f000 fadb 	bl	8001740 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800118a:	bf00      	nop
 800118c:	37b0      	adds	r7, #176	; 0xb0
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40004400 	.word	0x40004400
 8001198:	40021000 	.word	0x40021000
 800119c:	48000c00 	.word	0x48000c00

080011a0 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a33      	ldr	r2, [pc, #204]	; (800127c <HAL_SAI_MspInit+0xdc>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d135      	bne.n	800121e <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80011b2:	4b33      	ldr	r3, [pc, #204]	; (8001280 <HAL_SAI_MspInit+0xe0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10b      	bne.n	80011d2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80011ba:	4b32      	ldr	r3, [pc, #200]	; (8001284 <HAL_SAI_MspInit+0xe4>)
 80011bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011be:	4a31      	ldr	r2, [pc, #196]	; (8001284 <HAL_SAI_MspInit+0xe4>)
 80011c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011c4:	6613      	str	r3, [r2, #96]	; 0x60
 80011c6:	4b2f      	ldr	r3, [pc, #188]	; (8001284 <HAL_SAI_MspInit+0xe4>)
 80011c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80011d2:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <HAL_SAI_MspInit+0xe0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	4a29      	ldr	r2, [pc, #164]	; (8001280 <HAL_SAI_MspInit+0xe0>)
 80011da:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 80011dc:	2374      	movs	r3, #116	; 0x74
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80011ec:	230d      	movs	r3, #13
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	4824      	ldr	r0, [pc, #144]	; (8001288 <HAL_SAI_MspInit+0xe8>)
 80011f8:	f000 faa2 	bl	8001740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 80011fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800120e:	230d      	movs	r3, #13
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	481b      	ldr	r0, [pc, #108]	; (8001288 <HAL_SAI_MspInit+0xe8>)
 800121a:	f000 fa91 	bl	8001740 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a1a      	ldr	r2, [pc, #104]	; (800128c <HAL_SAI_MspInit+0xec>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d124      	bne.n	8001272 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_SAI_MspInit+0xe0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10b      	bne.n	8001248 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <HAL_SAI_MspInit+0xe4>)
 8001232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001234:	4a13      	ldr	r2, [pc, #76]	; (8001284 <HAL_SAI_MspInit+0xe4>)
 8001236:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800123a:	6613      	str	r3, [r2, #96]	; 0x60
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <HAL_SAI_MspInit+0xe4>)
 800123e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <HAL_SAI_MspInit+0xe0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <HAL_SAI_MspInit+0xe0>)
 8001250:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE7     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001262:	230d      	movs	r3, #13
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	4806      	ldr	r0, [pc, #24]	; (8001288 <HAL_SAI_MspInit+0xe8>)
 800126e:	f000 fa67 	bl	8001740 <HAL_GPIO_Init>

    }
}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40015404 	.word	0x40015404
 8001280:	200003c4 	.word	0x200003c4
 8001284:	40021000 	.word	0x40021000
 8001288:	48001000 	.word	0x48001000
 800128c:	40015424 	.word	0x40015424

08001290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <NMI_Handler+0x4>

08001296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129a:	e7fe      	b.n	800129a <HardFault_Handler+0x4>

0800129c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <MemManage_Handler+0x4>

080012a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <BusFault_Handler+0x4>

080012a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <UsageFault_Handler+0x4>

080012ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012dc:	f000 f8da 	bl	8001494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <OTG_FS_IRQHandler+0x10>)
 80012ea:	f000 fe6b 	bl	8001fc4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200007ac 	.word	0x200007ac

080012f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001300:	4a14      	ldr	r2, [pc, #80]	; (8001354 <_sbrk+0x5c>)
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <_sbrk+0x60>)
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <_sbrk+0x64>)
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <_sbrk+0x68>)
 8001318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	429a      	cmp	r2, r3
 8001326:	d207      	bcs.n	8001338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001328:	f008 fbae 	bl	8009a88 <__errno>
 800132c:	4603      	mov	r3, r0
 800132e:	220c      	movs	r2, #12
 8001330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	e009      	b.n	800134c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	4a05      	ldr	r2, [pc, #20]	; (800135c <_sbrk+0x64>)
 8001348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134a:	68fb      	ldr	r3, [r7, #12]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20018000 	.word	0x20018000
 8001358:	00000400 	.word	0x00000400
 800135c:	200003c8 	.word	0x200003c8
 8001360:	20000ac0 	.word	0x20000ac0

08001364 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <SystemInit+0x20>)
 800136a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136e:	4a05      	ldr	r2, [pc, #20]	; (8001384 <SystemInit+0x20>)
 8001370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800138c:	f7ff ffea 	bl	8001364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001390:	480c      	ldr	r0, [pc, #48]	; (80013c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001392:	490d      	ldr	r1, [pc, #52]	; (80013c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <LoopForever+0xe>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001398:	e002      	b.n	80013a0 <LoopCopyDataInit>

0800139a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800139c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139e:	3304      	adds	r3, #4

080013a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a4:	d3f9      	bcc.n	800139a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013a8:	4c0a      	ldr	r4, [pc, #40]	; (80013d4 <LoopForever+0x16>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ac:	e001      	b.n	80013b2 <LoopFillZerobss>

080013ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b0:	3204      	adds	r2, #4

080013b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b4:	d3fb      	bcc.n	80013ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013b6:	f008 fb6d 	bl	8009a94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ba:	f7ff f887 	bl	80004cc <main>

080013be <LoopForever>:

LoopForever:
    b LoopForever
 80013be:	e7fe      	b.n	80013be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80013cc:	08009d7c 	.word	0x08009d7c
  ldr r2, =_sbss
 80013d0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80013d4:	20000ac0 	.word	0x20000ac0

080013d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013d8:	e7fe      	b.n	80013d8 <ADC1_2_IRQHandler>
	...

080013dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_Init+0x3c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <HAL_Init+0x3c>)
 80013ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f2:	2003      	movs	r0, #3
 80013f4:	f000 f962 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013f8:	2000      	movs	r0, #0
 80013fa:	f000 f80f 	bl	800141c <HAL_InitTick>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d002      	beq.n	800140a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	e001      	b.n	800140e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800140a:	f7ff fc4f 	bl	8000cac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800140e:	79fb      	ldrb	r3, [r7, #7]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40022000 	.word	0x40022000

0800141c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_InitTick+0x6c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d023      	beq.n	8001478 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <HAL_InitTick+0x70>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <HAL_InitTick+0x6c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001442:	fbb2 f3f3 	udiv	r3, r2, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f000 f96d 	bl	8001726 <HAL_SYSTICK_Config>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10f      	bne.n	8001472 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b0f      	cmp	r3, #15
 8001456:	d809      	bhi.n	800146c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001458:	2200      	movs	r2, #0
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	f000 f937 	bl	80016d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001464:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <HAL_InitTick+0x74>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e007      	b.n	800147c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	e004      	b.n	800147c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	73fb      	strb	r3, [r7, #15]
 8001476:	e001      	b.n	800147c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800147c:	7bfb      	ldrb	r3, [r7, #15]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000008 	.word	0x20000008
 800148c:	20000000 	.word	0x20000000
 8001490:	20000004 	.word	0x20000004

08001494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_IncTick+0x20>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_IncTick+0x24>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <HAL_IncTick+0x24>)
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000008 	.word	0x20000008
 80014b8:	200003cc 	.word	0x200003cc

080014bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_GetTick+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	200003cc 	.word	0x200003cc

080014d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff ffee 	bl	80014bc <HAL_GetTick>
 80014e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ec:	d005      	beq.n	80014fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_Delay+0x44>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014fa:	bf00      	nop
 80014fc:	f7ff ffde 	bl	80014bc <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	429a      	cmp	r2, r3
 800150a:	d8f7      	bhi.n	80014fc <HAL_Delay+0x28>
  {
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000008 	.word	0x20000008

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154e:	4a04      	ldr	r2, [pc, #16]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	60d3      	str	r3, [r2, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db0b      	blt.n	80015aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	f003 021f 	and.w	r2, r3, #31
 8001598:	4907      	ldr	r1, [pc, #28]	; (80015b8 <__NVIC_EnableIRQ+0x38>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	2001      	movs	r0, #1
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	; (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001688:	d301      	bcc.n	800168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <SysTick_Config+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001696:	210f      	movs	r1, #15
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f7ff ff8e 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <SysTick_Config+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SysTick_Config+0x40>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff29 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016e4:	f7ff ff3e 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	6978      	ldr	r0, [r7, #20]
 80016f0:	f7ff ff8e 	bl	8001610 <NVIC_EncodePriority>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff5d 	bl	80015bc <__NVIC_SetPriority>
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff31 	bl	8001580 <__NVIC_EnableIRQ>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ffa2 	bl	8001678 <SysTick_Config>
 8001734:	4603      	mov	r3, r0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174e:	e17f      	b.n	8001a50 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	2101      	movs	r1, #1
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	4013      	ands	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 8171 	beq.w	8001a4a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b01      	cmp	r3, #1
 8001772:	d005      	beq.n	8001780 <HAL_GPIO_Init+0x40>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d130      	bne.n	80017e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017b6:	2201      	movs	r2, #1
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	091b      	lsrs	r3, r3, #4
 80017cc:	f003 0201 	and.w	r2, r3, #1
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d118      	bne.n	8001820 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017f4:	2201      	movs	r2, #1
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	08db      	lsrs	r3, r3, #3
 800180a:	f003 0201 	and.w	r2, r3, #1
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b03      	cmp	r3, #3
 800182a:	d017      	beq.n	800185c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2203      	movs	r2, #3
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d123      	bne.n	80018b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	08da      	lsrs	r2, r3, #3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3208      	adds	r2, #8
 8001870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	220f      	movs	r2, #15
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	08da      	lsrs	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3208      	adds	r2, #8
 80018aa:	6939      	ldr	r1, [r7, #16]
 80018ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	2203      	movs	r2, #3
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0203 	and.w	r2, r3, #3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 80ac 	beq.w	8001a4a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	4b5f      	ldr	r3, [pc, #380]	; (8001a70 <HAL_GPIO_Init+0x330>)
 80018f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f6:	4a5e      	ldr	r2, [pc, #376]	; (8001a70 <HAL_GPIO_Init+0x330>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6613      	str	r3, [r2, #96]	; 0x60
 80018fe:	4b5c      	ldr	r3, [pc, #368]	; (8001a70 <HAL_GPIO_Init+0x330>)
 8001900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800190a:	4a5a      	ldr	r2, [pc, #360]	; (8001a74 <HAL_GPIO_Init+0x334>)
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	089b      	lsrs	r3, r3, #2
 8001910:	3302      	adds	r3, #2
 8001912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	220f      	movs	r2, #15
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001934:	d025      	beq.n	8001982 <HAL_GPIO_Init+0x242>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4f      	ldr	r2, [pc, #316]	; (8001a78 <HAL_GPIO_Init+0x338>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d01f      	beq.n	800197e <HAL_GPIO_Init+0x23e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4e      	ldr	r2, [pc, #312]	; (8001a7c <HAL_GPIO_Init+0x33c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d019      	beq.n	800197a <HAL_GPIO_Init+0x23a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4d      	ldr	r2, [pc, #308]	; (8001a80 <HAL_GPIO_Init+0x340>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d013      	beq.n	8001976 <HAL_GPIO_Init+0x236>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4c      	ldr	r2, [pc, #304]	; (8001a84 <HAL_GPIO_Init+0x344>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d00d      	beq.n	8001972 <HAL_GPIO_Init+0x232>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4b      	ldr	r2, [pc, #300]	; (8001a88 <HAL_GPIO_Init+0x348>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d007      	beq.n	800196e <HAL_GPIO_Init+0x22e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4a      	ldr	r2, [pc, #296]	; (8001a8c <HAL_GPIO_Init+0x34c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d101      	bne.n	800196a <HAL_GPIO_Init+0x22a>
 8001966:	2306      	movs	r3, #6
 8001968:	e00c      	b.n	8001984 <HAL_GPIO_Init+0x244>
 800196a:	2307      	movs	r3, #7
 800196c:	e00a      	b.n	8001984 <HAL_GPIO_Init+0x244>
 800196e:	2305      	movs	r3, #5
 8001970:	e008      	b.n	8001984 <HAL_GPIO_Init+0x244>
 8001972:	2304      	movs	r3, #4
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x244>
 8001976:	2303      	movs	r3, #3
 8001978:	e004      	b.n	8001984 <HAL_GPIO_Init+0x244>
 800197a:	2302      	movs	r3, #2
 800197c:	e002      	b.n	8001984 <HAL_GPIO_Init+0x244>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <HAL_GPIO_Init+0x244>
 8001982:	2300      	movs	r3, #0
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	f002 0203 	and.w	r2, r2, #3
 800198a:	0092      	lsls	r2, r2, #2
 800198c:	4093      	lsls	r3, r2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001994:	4937      	ldr	r1, [pc, #220]	; (8001a74 <HAL_GPIO_Init+0x334>)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	089b      	lsrs	r3, r3, #2
 800199a:	3302      	adds	r3, #2
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019a2:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <HAL_GPIO_Init+0x350>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019c6:	4a32      	ldr	r2, [pc, #200]	; (8001a90 <HAL_GPIO_Init+0x350>)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019cc:	4b30      	ldr	r3, [pc, #192]	; (8001a90 <HAL_GPIO_Init+0x350>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019f0:	4a27      	ldr	r2, [pc, #156]	; (8001a90 <HAL_GPIO_Init+0x350>)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <HAL_GPIO_Init+0x350>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a1a:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <HAL_GPIO_Init+0x350>)
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_GPIO_Init+0x350>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a44:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <HAL_GPIO_Init+0x350>)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f47f ae78 	bne.w	8001750 <HAL_GPIO_Init+0x10>
  }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	371c      	adds	r7, #28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010000 	.word	0x40010000
 8001a78:	48000400 	.word	0x48000400
 8001a7c:	48000800 	.word	0x48000800
 8001a80:	48000c00 	.word	0x48000c00
 8001a84:	48001000 	.word	0x48001000
 8001a88:	48001400 	.word	0x48001400
 8001a8c:	48001800 	.word	0x48001800
 8001a90:	40010400 	.word	0x40010400

08001a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	807b      	strh	r3, [r7, #2]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa4:	787b      	ldrb	r3, [r7, #1]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aaa:	887a      	ldrh	r2, [r7, #2]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ab0:	e002      	b.n	8001ab8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ab2:	887a      	ldrh	r2, [r7, #2]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ad6:	887a      	ldrh	r2, [r7, #2]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4013      	ands	r3, r2
 8001adc:	041a      	lsls	r2, r3, #16
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	43d9      	mvns	r1, r3
 8001ae2:	887b      	ldrh	r3, [r7, #2]
 8001ae4:	400b      	ands	r3, r1
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	619a      	str	r2, [r3, #24]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001afa:	b08f      	sub	sp, #60	; 0x3c
 8001afc:	af0a      	add	r7, sp, #40	; 0x28
 8001afe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e054      	b.n	8001bb4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d106      	bne.n	8001b2a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f007 fd01 	bl	800952c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d102      	bne.n	8001b44 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f004 ff07 	bl	800695c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	687e      	ldr	r6, [r7, #4]
 8001b56:	466d      	mov	r5, sp
 8001b58:	f106 0410 	add.w	r4, r6, #16
 8001b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b68:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b6c:	1d33      	adds	r3, r6, #4
 8001b6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b70:	6838      	ldr	r0, [r7, #0]
 8001b72:	f004 feb6 	bl	80068e2 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f004 fefe 	bl	800697e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	687e      	ldr	r6, [r7, #4]
 8001b8a:	466d      	mov	r5, sp
 8001b8c:	f106 0410 	add.w	r4, r6, #16
 8001b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ba0:	1d33      	adds	r3, r6, #4
 8001ba2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ba4:	6838      	ldr	r0, [r7, #0]
 8001ba6:	f005 f883 	bl	8006cb0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bbc <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001bbc:	b590      	push	{r4, r7, lr}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af04      	add	r7, sp, #16
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	4608      	mov	r0, r1
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4603      	mov	r3, r0
 8001bcc:	70fb      	strb	r3, [r7, #3]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	70bb      	strb	r3, [r7, #2]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d101      	bne.n	8001be4 <HAL_HCD_HC_Init+0x28>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e076      	b.n	8001cd2 <HAL_HCD_HC_Init+0x116>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001bec:	78fb      	ldrb	r3, [r7, #3]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	212c      	movs	r1, #44	; 0x2c
 8001bf2:	fb01 f303 	mul.w	r3, r1, r3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	333d      	adds	r3, #61	; 0x3d
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	212c      	movs	r1, #44	; 0x2c
 8001c04:	fb01 f303 	mul.w	r3, r1, r3
 8001c08:	4413      	add	r3, r2
 8001c0a:	3338      	adds	r3, #56	; 0x38
 8001c0c:	787a      	ldrb	r2, [r7, #1]
 8001c0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	212c      	movs	r1, #44	; 0x2c
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3340      	adds	r3, #64	; 0x40
 8001c1e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c20:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	212c      	movs	r1, #44	; 0x2c
 8001c28:	fb01 f303 	mul.w	r3, r1, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3339      	adds	r3, #57	; 0x39
 8001c30:	78fa      	ldrb	r2, [r7, #3]
 8001c32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	212c      	movs	r1, #44	; 0x2c
 8001c3a:	fb01 f303 	mul.w	r3, r1, r3
 8001c3e:	4413      	add	r3, r2
 8001c40:	333f      	adds	r3, #63	; 0x3f
 8001c42:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001c46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	78ba      	ldrb	r2, [r7, #2]
 8001c4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c50:	b2d0      	uxtb	r0, r2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	212c      	movs	r1, #44	; 0x2c
 8001c56:	fb01 f303 	mul.w	r3, r1, r3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	333a      	adds	r3, #58	; 0x3a
 8001c5e:	4602      	mov	r2, r0
 8001c60:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001c62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	da09      	bge.n	8001c7e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	212c      	movs	r1, #44	; 0x2c
 8001c70:	fb01 f303 	mul.w	r3, r1, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	333b      	adds	r3, #59	; 0x3b
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]
 8001c7c:	e008      	b.n	8001c90 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	212c      	movs	r1, #44	; 0x2c
 8001c84:	fb01 f303 	mul.w	r3, r1, r3
 8001c88:	4413      	add	r3, r2
 8001c8a:	333b      	adds	r3, #59	; 0x3b
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	212c      	movs	r1, #44	; 0x2c
 8001c96:	fb01 f303 	mul.w	r3, r1, r3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	333c      	adds	r3, #60	; 0x3c
 8001c9e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ca2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	787c      	ldrb	r4, [r7, #1]
 8001caa:	78ba      	ldrb	r2, [r7, #2]
 8001cac:	78f9      	ldrb	r1, [r7, #3]
 8001cae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001cb0:	9302      	str	r3, [sp, #8]
 8001cb2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	4623      	mov	r3, r4
 8001cc0:	f005 f93e 	bl	8006f40 <USB_HC_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd90      	pop	{r4, r7, pc}

08001cda <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_HCD_HC_Halt+0x1e>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e00f      	b.n	8001d18 <HAL_HCD_HC_Halt+0x3e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	78fa      	ldrb	r2, [r7, #3]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f005 fb2e 	bl	800736a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	4608      	mov	r0, r1
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4603      	mov	r3, r0
 8001d30:	70fb      	strb	r3, [r7, #3]
 8001d32:	460b      	mov	r3, r1
 8001d34:	70bb      	strb	r3, [r7, #2]
 8001d36:	4613      	mov	r3, r2
 8001d38:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	212c      	movs	r1, #44	; 0x2c
 8001d40:	fb01 f303 	mul.w	r3, r1, r3
 8001d44:	4413      	add	r3, r2
 8001d46:	333b      	adds	r3, #59	; 0x3b
 8001d48:	78ba      	ldrb	r2, [r7, #2]
 8001d4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	212c      	movs	r1, #44	; 0x2c
 8001d52:	fb01 f303 	mul.w	r3, r1, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	333f      	adds	r3, #63	; 0x3f
 8001d5a:	787a      	ldrb	r2, [r7, #1]
 8001d5c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001d5e:	7c3b      	ldrb	r3, [r7, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d112      	bne.n	8001d8a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	212c      	movs	r1, #44	; 0x2c
 8001d6a:	fb01 f303 	mul.w	r3, r1, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	3342      	adds	r3, #66	; 0x42
 8001d72:	2203      	movs	r2, #3
 8001d74:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	212c      	movs	r1, #44	; 0x2c
 8001d7c:	fb01 f303 	mul.w	r3, r1, r3
 8001d80:	4413      	add	r3, r2
 8001d82:	333d      	adds	r3, #61	; 0x3d
 8001d84:	7f3a      	ldrb	r2, [r7, #28]
 8001d86:	701a      	strb	r2, [r3, #0]
 8001d88:	e008      	b.n	8001d9c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	212c      	movs	r1, #44	; 0x2c
 8001d90:	fb01 f303 	mul.w	r3, r1, r3
 8001d94:	4413      	add	r3, r2
 8001d96:	3342      	adds	r3, #66	; 0x42
 8001d98:	2202      	movs	r2, #2
 8001d9a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001d9c:	787b      	ldrb	r3, [r7, #1]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	f200 80c6 	bhi.w	8001f30 <HAL_HCD_HC_SubmitRequest+0x210>
 8001da4:	a201      	add	r2, pc, #4	; (adr r2, 8001dac <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001daa:	bf00      	nop
 8001dac:	08001dbd 	.word	0x08001dbd
 8001db0:	08001f1d 	.word	0x08001f1d
 8001db4:	08001e21 	.word	0x08001e21
 8001db8:	08001e9f 	.word	0x08001e9f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001dbc:	7c3b      	ldrb	r3, [r7, #16]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	f040 80b8 	bne.w	8001f34 <HAL_HCD_HC_SubmitRequest+0x214>
 8001dc4:	78bb      	ldrb	r3, [r7, #2]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f040 80b4 	bne.w	8001f34 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001dcc:	8b3b      	ldrh	r3, [r7, #24]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d108      	bne.n	8001de4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	212c      	movs	r1, #44	; 0x2c
 8001dd8:	fb01 f303 	mul.w	r3, r1, r3
 8001ddc:	4413      	add	r3, r2
 8001dde:	3355      	adds	r3, #85	; 0x55
 8001de0:	2201      	movs	r2, #1
 8001de2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	212c      	movs	r1, #44	; 0x2c
 8001dea:	fb01 f303 	mul.w	r3, r1, r3
 8001dee:	4413      	add	r3, r2
 8001df0:	3355      	adds	r3, #85	; 0x55
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d109      	bne.n	8001e0c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	212c      	movs	r1, #44	; 0x2c
 8001dfe:	fb01 f303 	mul.w	r3, r1, r3
 8001e02:	4413      	add	r3, r2
 8001e04:	3342      	adds	r3, #66	; 0x42
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e0a:	e093      	b.n	8001f34 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e0c:	78fb      	ldrb	r3, [r7, #3]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	212c      	movs	r1, #44	; 0x2c
 8001e12:	fb01 f303 	mul.w	r3, r1, r3
 8001e16:	4413      	add	r3, r2
 8001e18:	3342      	adds	r3, #66	; 0x42
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	701a      	strb	r2, [r3, #0]
      break;
 8001e1e:	e089      	b.n	8001f34 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001e20:	78bb      	ldrb	r3, [r7, #2]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d11d      	bne.n	8001e62 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	212c      	movs	r1, #44	; 0x2c
 8001e2c:	fb01 f303 	mul.w	r3, r1, r3
 8001e30:	4413      	add	r3, r2
 8001e32:	3355      	adds	r3, #85	; 0x55
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d109      	bne.n	8001e4e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	212c      	movs	r1, #44	; 0x2c
 8001e40:	fb01 f303 	mul.w	r3, r1, r3
 8001e44:	4413      	add	r3, r2
 8001e46:	3342      	adds	r3, #66	; 0x42
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001e4c:	e073      	b.n	8001f36 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	212c      	movs	r1, #44	; 0x2c
 8001e54:	fb01 f303 	mul.w	r3, r1, r3
 8001e58:	4413      	add	r3, r2
 8001e5a:	3342      	adds	r3, #66	; 0x42
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	701a      	strb	r2, [r3, #0]
      break;
 8001e60:	e069      	b.n	8001f36 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	212c      	movs	r1, #44	; 0x2c
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3354      	adds	r3, #84	; 0x54
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d109      	bne.n	8001e8a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	212c      	movs	r1, #44	; 0x2c
 8001e7c:	fb01 f303 	mul.w	r3, r1, r3
 8001e80:	4413      	add	r3, r2
 8001e82:	3342      	adds	r3, #66	; 0x42
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
      break;
 8001e88:	e055      	b.n	8001f36 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	212c      	movs	r1, #44	; 0x2c
 8001e90:	fb01 f303 	mul.w	r3, r1, r3
 8001e94:	4413      	add	r3, r2
 8001e96:	3342      	adds	r3, #66	; 0x42
 8001e98:	2202      	movs	r2, #2
 8001e9a:	701a      	strb	r2, [r3, #0]
      break;
 8001e9c:	e04b      	b.n	8001f36 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001e9e:	78bb      	ldrb	r3, [r7, #2]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d11d      	bne.n	8001ee0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	212c      	movs	r1, #44	; 0x2c
 8001eaa:	fb01 f303 	mul.w	r3, r1, r3
 8001eae:	4413      	add	r3, r2
 8001eb0:	3355      	adds	r3, #85	; 0x55
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d109      	bne.n	8001ecc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	212c      	movs	r1, #44	; 0x2c
 8001ebe:	fb01 f303 	mul.w	r3, r1, r3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3342      	adds	r3, #66	; 0x42
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001eca:	e034      	b.n	8001f36 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	212c      	movs	r1, #44	; 0x2c
 8001ed2:	fb01 f303 	mul.w	r3, r1, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3342      	adds	r3, #66	; 0x42
 8001eda:	2202      	movs	r2, #2
 8001edc:	701a      	strb	r2, [r3, #0]
      break;
 8001ede:	e02a      	b.n	8001f36 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	212c      	movs	r1, #44	; 0x2c
 8001ee6:	fb01 f303 	mul.w	r3, r1, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	3354      	adds	r3, #84	; 0x54
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d109      	bne.n	8001f08 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	212c      	movs	r1, #44	; 0x2c
 8001efa:	fb01 f303 	mul.w	r3, r1, r3
 8001efe:	4413      	add	r3, r2
 8001f00:	3342      	adds	r3, #66	; 0x42
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
      break;
 8001f06:	e016      	b.n	8001f36 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	212c      	movs	r1, #44	; 0x2c
 8001f0e:	fb01 f303 	mul.w	r3, r1, r3
 8001f12:	4413      	add	r3, r2
 8001f14:	3342      	adds	r3, #66	; 0x42
 8001f16:	2202      	movs	r2, #2
 8001f18:	701a      	strb	r2, [r3, #0]
      break;
 8001f1a:	e00c      	b.n	8001f36 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	212c      	movs	r1, #44	; 0x2c
 8001f22:	fb01 f303 	mul.w	r3, r1, r3
 8001f26:	4413      	add	r3, r2
 8001f28:	3342      	adds	r3, #66	; 0x42
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
      break;
 8001f2e:	e002      	b.n	8001f36 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001f30:	bf00      	nop
 8001f32:	e000      	b.n	8001f36 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001f34:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	212c      	movs	r1, #44	; 0x2c
 8001f3c:	fb01 f303 	mul.w	r3, r1, r3
 8001f40:	4413      	add	r3, r2
 8001f42:	3344      	adds	r3, #68	; 0x44
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	8b3a      	ldrh	r2, [r7, #24]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	202c      	movs	r0, #44	; 0x2c
 8001f50:	fb00 f303 	mul.w	r3, r0, r3
 8001f54:	440b      	add	r3, r1
 8001f56:	334c      	adds	r3, #76	; 0x4c
 8001f58:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	212c      	movs	r1, #44	; 0x2c
 8001f60:	fb01 f303 	mul.w	r3, r1, r3
 8001f64:	4413      	add	r3, r2
 8001f66:	3360      	adds	r3, #96	; 0x60
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	212c      	movs	r1, #44	; 0x2c
 8001f72:	fb01 f303 	mul.w	r3, r1, r3
 8001f76:	4413      	add	r3, r2
 8001f78:	3350      	adds	r3, #80	; 0x50
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	212c      	movs	r1, #44	; 0x2c
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	3339      	adds	r3, #57	; 0x39
 8001f8c:	78fa      	ldrb	r2, [r7, #3]
 8001f8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	212c      	movs	r1, #44	; 0x2c
 8001f96:	fb01 f303 	mul.w	r3, r1, r3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3361      	adds	r3, #97	; 0x61
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	222c      	movs	r2, #44	; 0x2c
 8001faa:	fb02 f303 	mul.w	r3, r2, r3
 8001fae:	3338      	adds	r3, #56	; 0x38
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f005 f8cf 	bl	8007158 <USB_HC_StartXfer>
 8001fba:	4603      	mov	r3, r0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f004 fe25 	bl	8006c2a <USB_GetMode>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	f040 80f6 	bne.w	80021d4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f004 fe09 	bl	8006c04 <USB_ReadInterrupts>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80ec 	beq.w	80021d2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f004 fe00 	bl	8006c04 <USB_ReadInterrupts>
 8002004:	4603      	mov	r3, r0
 8002006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800200a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800200e:	d104      	bne.n	800201a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002018:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f004 fdf0 	bl	8006c04 <USB_ReadInterrupts>
 8002024:	4603      	mov	r3, r0
 8002026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800202e:	d104      	bne.n	800203a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002038:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f004 fde0 	bl	8006c04 <USB_ReadInterrupts>
 8002044:	4603      	mov	r3, r0
 8002046:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800204a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800204e:	d104      	bne.n	800205a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002058:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f004 fdd0 	bl	8006c04 <USB_ReadInterrupts>
 8002064:	4603      	mov	r3, r0
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b02      	cmp	r3, #2
 800206c:	d103      	bne.n	8002076 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2202      	movs	r2, #2
 8002074:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f004 fdc2 	bl	8006c04 <USB_ReadInterrupts>
 8002080:	4603      	mov	r3, r0
 8002082:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800208a:	d11c      	bne.n	80020c6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002094:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10f      	bne.n	80020c6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80020a6:	2110      	movs	r1, #16
 80020a8:	6938      	ldr	r0, [r7, #16]
 80020aa:	f004 fcb5 	bl	8006a18 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80020ae:	6938      	ldr	r0, [r7, #16]
 80020b0:	f004 fce6 	bl	8006a80 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2101      	movs	r1, #1
 80020ba:	4618      	mov	r0, r3
 80020bc:	f004 fe7a 	bl	8006db4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f007 fab5 	bl	8009630 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f004 fd9a 	bl	8006c04 <USB_ReadInterrupts>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020da:	d102      	bne.n	80020e2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f001 f815 	bl	800310c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f004 fd8c 	bl	8006c04 <USB_ReadInterrupts>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d106      	bne.n	8002104 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f007 fa7e 	bl	80095f8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2208      	movs	r2, #8
 8002102:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f004 fd7b 	bl	8006c04 <USB_ReadInterrupts>
 800210e:	4603      	mov	r3, r0
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b10      	cmp	r3, #16
 8002116:	d101      	bne.n	800211c <HAL_HCD_IRQHandler+0x158>
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <HAL_HCD_IRQHandler+0x15a>
 800211c:	2300      	movs	r3, #0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d012      	beq.n	8002148 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699a      	ldr	r2, [r3, #24]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0210 	bic.w	r2, r2, #16
 8002130:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 ff18 	bl	8002f68 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699a      	ldr	r2, [r3, #24]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0210 	orr.w	r2, r2, #16
 8002146:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f004 fd59 	bl	8006c04 <USB_ReadInterrupts>
 8002152:	4603      	mov	r3, r0
 8002154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002158:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800215c:	d13a      	bne.n	80021d4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f005 f8f0 	bl	8007348 <USB_HC_ReadInterrupt>
 8002168:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	e025      	b.n	80021bc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	fa22 f303 	lsr.w	r3, r2, r3
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d018      	beq.n	80021b6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4413      	add	r3, r2
 800218c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800219a:	d106      	bne.n	80021aa <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	4619      	mov	r1, r3
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f8ab 	bl	80022fe <HCD_HC_IN_IRQHandler>
 80021a8:	e005      	b.n	80021b6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	4619      	mov	r1, r3
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 fbd7 	bl	8002964 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	3301      	adds	r3, #1
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d3d4      	bcc.n	8002170 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021ce:	615a      	str	r2, [r3, #20]
 80021d0:	e000      	b.n	80021d4 <HAL_HCD_IRQHandler+0x210>
      return;
 80021d2:	bf00      	nop
    }
  }
}
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_HCD_Start+0x16>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e013      	b.n	8002218 <HAL_HCD_Start+0x3e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2101      	movs	r1, #1
 80021fe:	4618      	mov	r0, r3
 8002200:	f004 fe3c 	bl	8006e7c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f004 fb96 	bl	800693a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_HCD_Stop+0x16>
 8002232:	2302      	movs	r3, #2
 8002234:	e00d      	b.n	8002252 <HAL_HCD_Stop+0x32>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f005 f98d 	bl	8007562 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f004 fdde 	bl	8006e28 <USB_ResetPort>
 800226c:	4603      	mov	r3, r0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	212c      	movs	r1, #44	; 0x2c
 8002288:	fb01 f303 	mul.w	r3, r1, r3
 800228c:	4413      	add	r3, r2
 800228e:	3360      	adds	r3, #96	; 0x60
 8002290:	781b      	ldrb	r3, [r3, #0]
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	460b      	mov	r3, r1
 80022a8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	212c      	movs	r1, #44	; 0x2c
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	3350      	adds	r3, #80	; 0x50
 80022b8:	681b      	ldr	r3, [r3, #0]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f004 fe22 	bl	8006f1c <USB_GetCurrentFrame>
 80022d8:	4603      	mov	r3, r0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f004 fdfd 	bl	8006eee <USB_GetHostSpeed>
 80022f4:	4603      	mov	r3, r0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	460b      	mov	r3, r1
 8002308:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b04      	cmp	r3, #4
 800232c:	d11a      	bne.n	8002364 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233a:	461a      	mov	r2, r3
 800233c:	2304      	movs	r3, #4
 800233e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	212c      	movs	r1, #44	; 0x2c
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	4413      	add	r3, r2
 800234c:	3361      	adds	r3, #97	; 0x61
 800234e:	2206      	movs	r2, #6
 8002350:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f005 f804 	bl	800736a <USB_HC_Halt>
 8002362:	e0af      	b.n	80024c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4413      	add	r3, r2
 800236c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800237a:	d11b      	bne.n	80023b4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4413      	add	r3, r2
 8002384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002388:	461a      	mov	r2, r3
 800238a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800238e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	212c      	movs	r1, #44	; 0x2c
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	4413      	add	r3, r2
 800239c:	3361      	adds	r3, #97	; 0x61
 800239e:	2207      	movs	r2, #7
 80023a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f004 ffdc 	bl	800736a <USB_HC_Halt>
 80023b2:	e087      	b.n	80024c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	2b20      	cmp	r3, #32
 80023c8:	d109      	bne.n	80023de <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d6:	461a      	mov	r2, r3
 80023d8:	2320      	movs	r3, #32
 80023da:	6093      	str	r3, [r2, #8]
 80023dc:	e072      	b.n	80024c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d11a      	bne.n	800242a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002400:	461a      	mov	r2, r3
 8002402:	2308      	movs	r3, #8
 8002404:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	3361      	adds	r3, #97	; 0x61
 8002414:	2205      	movs	r2, #5
 8002416:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f004 ffa1 	bl	800736a <USB_HC_Halt>
 8002428:	e04c      	b.n	80024c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4413      	add	r3, r2
 8002432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002440:	d11b      	bne.n	800247a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4413      	add	r3, r2
 800244a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244e:	461a      	mov	r2, r3
 8002450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002454:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	212c      	movs	r1, #44	; 0x2c
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	4413      	add	r3, r2
 8002462:	3361      	adds	r3, #97	; 0x61
 8002464:	2208      	movs	r2, #8
 8002466:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	4611      	mov	r1, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f004 ff79 	bl	800736a <USB_HC_Halt>
 8002478:	e024      	b.n	80024c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	015a      	lsls	r2, r3, #5
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4413      	add	r3, r2
 8002482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248c:	2b80      	cmp	r3, #128	; 0x80
 800248e:	d119      	bne.n	80024c4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4413      	add	r3, r2
 8002498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249c:	461a      	mov	r2, r3
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	212c      	movs	r1, #44	; 0x2c
 80024a8:	fb01 f303 	mul.w	r3, r1, r3
 80024ac:	4413      	add	r3, r2
 80024ae:	3361      	adds	r3, #97	; 0x61
 80024b0:	2206      	movs	r2, #6
 80024b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	4611      	mov	r1, r2
 80024be:	4618      	mov	r0, r3
 80024c0:	f004 ff53 	bl	800736a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024da:	d112      	bne.n	8002502 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f004 ff3f 	bl	800736a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f8:	461a      	mov	r2, r3
 80024fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024fe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002500:	e22c      	b.n	800295c <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	015a      	lsls	r2, r3, #5
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4413      	add	r3, r2
 800250a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b01      	cmp	r3, #1
 8002516:	f040 80c1 	bne.w	800269c <HCD_HC_IN_IRQHandler+0x39e>
    hhcd->hc[ch_num].state = HC_XFRC;
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	212c      	movs	r1, #44	; 0x2c
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	4413      	add	r3, r2
 8002526:	3361      	adds	r3, #97	; 0x61
 8002528:	2201      	movs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	212c      	movs	r1, #44	; 0x2c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	335c      	adds	r3, #92	; 0x5c
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4413      	add	r3, r2
 8002546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254a:	461a      	mov	r2, r3
 800254c:	2301      	movs	r3, #1
 800254e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	333f      	adds	r3, #63	; 0x3f
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d009      	beq.n	8002578 <HCD_HC_IN_IRQHandler+0x27a>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	212c      	movs	r1, #44	; 0x2c
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4413      	add	r3, r2
 8002570:	333f      	adds	r3, #63	; 0x3f
 8002572:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002574:	2b02      	cmp	r3, #2
 8002576:	d111      	bne.n	800259c <HCD_HC_IN_IRQHandler+0x29e>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f004 fef1 	bl	800736a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	461a      	mov	r2, r3
 8002596:	2310      	movs	r3, #16
 8002598:	6093      	str	r3, [r2, #8]
 800259a:	e03a      	b.n	8002612 <HCD_HC_IN_IRQHandler+0x314>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	212c      	movs	r1, #44	; 0x2c
 80025a2:	fb01 f303 	mul.w	r3, r1, r3
 80025a6:	4413      	add	r3, r2
 80025a8:	333f      	adds	r3, #63	; 0x3f
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d009      	beq.n	80025c4 <HCD_HC_IN_IRQHandler+0x2c6>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	212c      	movs	r1, #44	; 0x2c
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	333f      	adds	r3, #63	; 0x3f
 80025be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d126      	bne.n	8002612 <HCD_HC_IN_IRQHandler+0x314>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	0151      	lsls	r1, r2, #5
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	440a      	add	r2, r1
 80025da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025e2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	212c      	movs	r1, #44	; 0x2c
 80025ea:	fb01 f303 	mul.w	r3, r1, r3
 80025ee:	4413      	add	r3, r2
 80025f0:	3360      	adds	r3, #96	; 0x60
 80025f2:	2201      	movs	r2, #1
 80025f4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	b2d9      	uxtb	r1, r3
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	202c      	movs	r0, #44	; 0x2c
 8002600:	fb00 f303 	mul.w	r3, r0, r3
 8002604:	4413      	add	r3, r2
 8002606:	3360      	adds	r3, #96	; 0x60
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f007 f81d 	bl	800964c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d12b      	bne.n	8002672 <HCD_HC_IN_IRQHandler+0x374>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	3348      	adds	r3, #72	; 0x48
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	202c      	movs	r0, #44	; 0x2c
 8002630:	fb00 f202 	mul.w	r2, r0, r2
 8002634:	440a      	add	r2, r1
 8002636:	3240      	adds	r2, #64	; 0x40
 8002638:	8812      	ldrh	r2, [r2, #0]
 800263a:	fbb3 f3f2 	udiv	r3, r3, r2
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 818a 	beq.w	800295c <HCD_HC_IN_IRQHandler+0x65e>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	212c      	movs	r1, #44	; 0x2c
 800264e:	fb01 f303 	mul.w	r3, r1, r3
 8002652:	4413      	add	r3, r2
 8002654:	3354      	adds	r3, #84	; 0x54
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	f083 0301 	eor.w	r3, r3, #1
 800265c:	b2d8      	uxtb	r0, r3
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	212c      	movs	r1, #44	; 0x2c
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	4413      	add	r3, r2
 800266a:	3354      	adds	r3, #84	; 0x54
 800266c:	4602      	mov	r2, r0
 800266e:	701a      	strb	r2, [r3, #0]
}
 8002670:	e174      	b.n	800295c <HCD_HC_IN_IRQHandler+0x65e>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	212c      	movs	r1, #44	; 0x2c
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	4413      	add	r3, r2
 800267e:	3354      	adds	r3, #84	; 0x54
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	f083 0301 	eor.w	r3, r3, #1
 8002686:	b2d8      	uxtb	r0, r3
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	212c      	movs	r1, #44	; 0x2c
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	3354      	adds	r3, #84	; 0x54
 8002696:	4602      	mov	r2, r0
 8002698:	701a      	strb	r2, [r3, #0]
}
 800269a:	e15f      	b.n	800295c <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	f040 80f6 	bne.w	80028a0 <HCD_HC_IN_IRQHandler+0x5a2>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	212c      	movs	r1, #44	; 0x2c
 80026ba:	fb01 f303 	mul.w	r3, r1, r3
 80026be:	4413      	add	r3, r2
 80026c0:	3361      	adds	r3, #97	; 0x61
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d109      	bne.n	80026dc <HCD_HC_IN_IRQHandler+0x3de>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	3360      	adds	r3, #96	; 0x60
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	e0c9      	b.n	8002870 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	212c      	movs	r1, #44	; 0x2c
 80026e2:	fb01 f303 	mul.w	r3, r1, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	3361      	adds	r3, #97	; 0x61
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b05      	cmp	r3, #5
 80026ee:	d109      	bne.n	8002704 <HCD_HC_IN_IRQHandler+0x406>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	212c      	movs	r1, #44	; 0x2c
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	3360      	adds	r3, #96	; 0x60
 80026fe:	2205      	movs	r2, #5
 8002700:	701a      	strb	r2, [r3, #0]
 8002702:	e0b5      	b.n	8002870 <HCD_HC_IN_IRQHandler+0x572>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	212c      	movs	r1, #44	; 0x2c
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	4413      	add	r3, r2
 8002710:	3361      	adds	r3, #97	; 0x61
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b06      	cmp	r3, #6
 8002716:	d009      	beq.n	800272c <HCD_HC_IN_IRQHandler+0x42e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	212c      	movs	r1, #44	; 0x2c
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	4413      	add	r3, r2
 8002724:	3361      	adds	r3, #97	; 0x61
 8002726:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002728:	2b08      	cmp	r3, #8
 800272a:	d150      	bne.n	80027ce <HCD_HC_IN_IRQHandler+0x4d0>
      hhcd->hc[ch_num].ErrCnt++;
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	212c      	movs	r1, #44	; 0x2c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	335c      	adds	r3, #92	; 0x5c
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	202c      	movs	r0, #44	; 0x2c
 8002744:	fb00 f303 	mul.w	r3, r0, r3
 8002748:	440b      	add	r3, r1
 800274a:	335c      	adds	r3, #92	; 0x5c
 800274c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	212c      	movs	r1, #44	; 0x2c
 8002754:	fb01 f303 	mul.w	r3, r1, r3
 8002758:	4413      	add	r3, r2
 800275a:	335c      	adds	r3, #92	; 0x5c
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d912      	bls.n	8002788 <HCD_HC_IN_IRQHandler+0x48a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	212c      	movs	r1, #44	; 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	335c      	adds	r3, #92	; 0x5c
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	212c      	movs	r1, #44	; 0x2c
 800277a:	fb01 f303 	mul.w	r3, r1, r3
 800277e:	4413      	add	r3, r2
 8002780:	3360      	adds	r3, #96	; 0x60
 8002782:	2204      	movs	r2, #4
 8002784:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002786:	e073      	b.n	8002870 <HCD_HC_IN_IRQHandler+0x572>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	212c      	movs	r1, #44	; 0x2c
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	4413      	add	r3, r2
 8002794:	3360      	adds	r3, #96	; 0x60
 8002796:	2202      	movs	r2, #2
 8002798:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027b0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027b8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c6:	461a      	mov	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027cc:	e050      	b.n	8002870 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	212c      	movs	r1, #44	; 0x2c
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	4413      	add	r3, r2
 80027da:	3361      	adds	r3, #97	; 0x61
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d122      	bne.n	8002828 <HCD_HC_IN_IRQHandler+0x52a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	212c      	movs	r1, #44	; 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	3360      	adds	r3, #96	; 0x60
 80027f0:	2202      	movs	r2, #2
 80027f2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800280a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002812:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4413      	add	r3, r2
 800281c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002820:	461a      	mov	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	e023      	b.n	8002870 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	212c      	movs	r1, #44	; 0x2c
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	4413      	add	r3, r2
 8002834:	3361      	adds	r3, #97	; 0x61
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b07      	cmp	r3, #7
 800283a:	d119      	bne.n	8002870 <HCD_HC_IN_IRQHandler+0x572>
      hhcd->hc[ch_num].ErrCnt++;
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	212c      	movs	r1, #44	; 0x2c
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	335c      	adds	r3, #92	; 0x5c
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	202c      	movs	r0, #44	; 0x2c
 8002854:	fb00 f303 	mul.w	r3, r0, r3
 8002858:	440b      	add	r3, r1
 800285a:	335c      	adds	r3, #92	; 0x5c
 800285c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	212c      	movs	r1, #44	; 0x2c
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	4413      	add	r3, r2
 800286a:	3360      	adds	r3, #96	; 0x60
 800286c:	2204      	movs	r2, #4
 800286e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	461a      	mov	r2, r3
 800287e:	2302      	movs	r3, #2
 8002880:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	b2d9      	uxtb	r1, r3
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	202c      	movs	r0, #44	; 0x2c
 800288c:	fb00 f303 	mul.w	r3, r0, r3
 8002890:	4413      	add	r3, r2
 8002892:	3360      	adds	r3, #96	; 0x60
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f006 fed7 	bl	800964c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800289e:	e05d      	b.n	800295c <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	2b10      	cmp	r3, #16
 80028b4:	d152      	bne.n	800295c <HCD_HC_IN_IRQHandler+0x65e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	212c      	movs	r1, #44	; 0x2c
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	333f      	adds	r3, #63	; 0x3f
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d111      	bne.n	80028ee <HCD_HC_IN_IRQHandler+0x5f0>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	212c      	movs	r1, #44	; 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	335c      	adds	r3, #92	; 0x5c
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	4611      	mov	r1, r2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f004 fd3f 	bl	800736a <USB_HC_Halt>
 80028ec:	e02d      	b.n	800294a <HCD_HC_IN_IRQHandler+0x64c>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	333f      	adds	r3, #63	; 0x3f
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d009      	beq.n	8002916 <HCD_HC_IN_IRQHandler+0x618>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	212c      	movs	r1, #44	; 0x2c
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	333f      	adds	r3, #63	; 0x3f
 8002910:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002912:	2b02      	cmp	r3, #2
 8002914:	d119      	bne.n	800294a <HCD_HC_IN_IRQHandler+0x64c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	335c      	adds	r3, #92	; 0x5c
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3361      	adds	r3, #97	; 0x61
 8002936:	2203      	movs	r2, #3
 8002938:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	4611      	mov	r1, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f004 fd10 	bl	800736a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002956:	461a      	mov	r2, r3
 8002958:	2310      	movs	r3, #16
 800295a:	6093      	str	r3, [r2, #8]
}
 800295c:	bf00      	nop
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	4413      	add	r3, r2
 8002986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b04      	cmp	r3, #4
 8002992:	d11a      	bne.n	80029ca <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	461a      	mov	r2, r3
 80029a2:	2304      	movs	r3, #4
 80029a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	212c      	movs	r1, #44	; 0x2c
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	3361      	adds	r3, #97	; 0x61
 80029b4:	2206      	movs	r2, #6
 80029b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	4611      	mov	r1, r2
 80029c2:	4618      	mov	r0, r3
 80029c4:	f004 fcd1 	bl	800736a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80029c8:	e2ca      	b.n	8002f60 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b20      	cmp	r3, #32
 80029de:	d12e      	bne.n	8002a3e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ec:	461a      	mov	r2, r3
 80029ee:	2320      	movs	r3, #32
 80029f0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	212c      	movs	r1, #44	; 0x2c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	333d      	adds	r3, #61	; 0x3d
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	f040 82ac 	bne.w	8002f60 <HCD_HC_OUT_IRQHandler+0x5fc>
      hhcd->hc[ch_num].do_ping = 0U;
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	333d      	adds	r3, #61	; 0x3d
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	212c      	movs	r1, #44	; 0x2c
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	3360      	adds	r3, #96	; 0x60
 8002a28:	2202      	movs	r2, #2
 8002a2a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	4611      	mov	r1, r2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f004 fc97 	bl	800736a <USB_HC_Halt>
}
 8002a3c:	e290      	b.n	8002f60 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a54:	d112      	bne.n	8002a7c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a62:	461a      	mov	r2, r3
 8002a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a68:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f004 fc78 	bl	800736a <USB_HC_Halt>
}
 8002a7a:	e271      	b.n	8002f60 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d140      	bne.n	8002b14 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	335c      	adds	r3, #92	; 0x5c
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab6:	2b40      	cmp	r3, #64	; 0x40
 8002ab8:	d111      	bne.n	8002ade <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	212c      	movs	r1, #44	; 0x2c
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	333d      	adds	r3, #61	; 0x3d
 8002ac8:	2201      	movs	r2, #1
 8002aca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad8:	461a      	mov	r2, r3
 8002ada:	2340      	movs	r3, #64	; 0x40
 8002adc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aea:	461a      	mov	r2, r3
 8002aec:	2301      	movs	r3, #1
 8002aee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	3361      	adds	r3, #97	; 0x61
 8002afe:	2201      	movs	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f004 fc2c 	bl	800736a <USB_HC_Halt>
}
 8002b12:	e225      	b.n	8002f60 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b26:	2b40      	cmp	r3, #64	; 0x40
 8002b28:	d12c      	bne.n	8002b84 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	212c      	movs	r1, #44	; 0x2c
 8002b30:	fb01 f303 	mul.w	r3, r1, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	3361      	adds	r3, #97	; 0x61
 8002b38:	2204      	movs	r2, #4
 8002b3a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	212c      	movs	r1, #44	; 0x2c
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	4413      	add	r3, r2
 8002b48:	333d      	adds	r3, #61	; 0x3d
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	335c      	adds	r3, #92	; 0x5c
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f004 fbfd 	bl	800736a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	2340      	movs	r3, #64	; 0x40
 8002b80:	6093      	str	r3, [r2, #8]
}
 8002b82:	e1ed      	b.n	8002f60 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d11a      	bne.n	8002bd0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	2308      	movs	r3, #8
 8002baa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3361      	adds	r3, #97	; 0x61
 8002bba:	2205      	movs	r2, #5
 8002bbc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f004 fbce 	bl	800736a <USB_HC_Halt>
}
 8002bce:	e1c7      	b.n	8002f60 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b10      	cmp	r3, #16
 8002be4:	d123      	bne.n	8002c2e <HCD_HC_OUT_IRQHandler+0x2ca>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	335c      	adds	r3, #92	; 0x5c
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	3361      	adds	r3, #97	; 0x61
 8002c06:	2203      	movs	r2, #3
 8002c08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f004 fba8 	bl	800736a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c26:	461a      	mov	r2, r3
 8002c28:	2310      	movs	r3, #16
 8002c2a:	6093      	str	r3, [r2, #8]
}
 8002c2c:	e198      	b.n	8002f60 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c40:	2b80      	cmp	r3, #128	; 0x80
 8002c42:	d11a      	bne.n	8002c7a <HCD_HC_OUT_IRQHandler+0x316>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	212c      	movs	r1, #44	; 0x2c
 8002c4a:	fb01 f303 	mul.w	r3, r1, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	3361      	adds	r3, #97	; 0x61
 8002c52:	2206      	movs	r2, #6
 8002c54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f004 fb82 	bl	800736a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c72:	461a      	mov	r2, r3
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	6093      	str	r3, [r2, #8]
}
 8002c78:	e172      	b.n	8002f60 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c90:	d11b      	bne.n	8002cca <HCD_HC_OUT_IRQHandler+0x366>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	212c      	movs	r1, #44	; 0x2c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3361      	adds	r3, #97	; 0x61
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	4611      	mov	r1, r2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f004 fb5b 	bl	800736a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	015a      	lsls	r2, r3, #5
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cc6:	6093      	str	r3, [r2, #8]
}
 8002cc8:	e14a      	b.n	8002f60 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	f040 813f 	bne.w	8002f60 <HCD_HC_OUT_IRQHandler+0x5fc>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	3361      	adds	r3, #97	; 0x61
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d17d      	bne.n	8002df2 <HCD_HC_OUT_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	3360      	adds	r3, #96	; 0x60
 8002d04:	2201      	movs	r2, #1
 8002d06:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	212c      	movs	r1, #44	; 0x2c
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	333f      	adds	r3, #63	; 0x3f
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d00a      	beq.n	8002d32 <HCD_HC_OUT_IRQHandler+0x3ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	333f      	adds	r3, #63	; 0x3f
 8002d2a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	f040 8100 	bne.w	8002f32 <HCD_HC_OUT_IRQHandler+0x5ce>
        if (hhcd->Init.dma_enable == 0U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d113      	bne.n	8002d62 <HCD_HC_OUT_IRQHandler+0x3fe>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	212c      	movs	r1, #44	; 0x2c
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	3355      	adds	r3, #85	; 0x55
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	f083 0301 	eor.w	r3, r3, #1
 8002d4e:	b2d8      	uxtb	r0, r3
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	212c      	movs	r1, #44	; 0x2c
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3355      	adds	r3, #85	; 0x55
 8002d5e:	4602      	mov	r2, r0
 8002d60:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	f040 80e3 	bne.w	8002f32 <HCD_HC_OUT_IRQHandler+0x5ce>
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	334c      	adds	r3, #76	; 0x4c
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80d8 	beq.w	8002f32 <HCD_HC_OUT_IRQHandler+0x5ce>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	212c      	movs	r1, #44	; 0x2c
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	334c      	adds	r3, #76	; 0x4c
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	202c      	movs	r0, #44	; 0x2c
 8002d98:	fb00 f202 	mul.w	r2, r0, r2
 8002d9c:	440a      	add	r2, r1
 8002d9e:	3240      	adds	r2, #64	; 0x40
 8002da0:	8812      	ldrh	r2, [r2, #0]
 8002da2:	4413      	add	r3, r2
 8002da4:	3b01      	subs	r3, #1
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	202c      	movs	r0, #44	; 0x2c
 8002dac:	fb00 f202 	mul.w	r2, r0, r2
 8002db0:	440a      	add	r2, r1
 8002db2:	3240      	adds	r2, #64	; 0x40
 8002db4:	8812      	ldrh	r2, [r2, #0]
 8002db6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80b5 	beq.w	8002f32 <HCD_HC_OUT_IRQHandler+0x5ce>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	212c      	movs	r1, #44	; 0x2c
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3355      	adds	r3, #85	; 0x55
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	f083 0301 	eor.w	r3, r3, #1
 8002ddc:	b2d8      	uxtb	r0, r3
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	3355      	adds	r3, #85	; 0x55
 8002dec:	4602      	mov	r2, r0
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	e09f      	b.n	8002f32 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3361      	adds	r3, #97	; 0x61
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d109      	bne.n	8002e1a <HCD_HC_OUT_IRQHandler+0x4b6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	212c      	movs	r1, #44	; 0x2c
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	4413      	add	r3, r2
 8002e12:	3360      	adds	r3, #96	; 0x60
 8002e14:	2202      	movs	r2, #2
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e08b      	b.n	8002f32 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	212c      	movs	r1, #44	; 0x2c
 8002e20:	fb01 f303 	mul.w	r3, r1, r3
 8002e24:	4413      	add	r3, r2
 8002e26:	3361      	adds	r3, #97	; 0x61
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d109      	bne.n	8002e42 <HCD_HC_OUT_IRQHandler+0x4de>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	212c      	movs	r1, #44	; 0x2c
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	4413      	add	r3, r2
 8002e3a:	3360      	adds	r3, #96	; 0x60
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	701a      	strb	r2, [r3, #0]
 8002e40:	e077      	b.n	8002f32 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	212c      	movs	r1, #44	; 0x2c
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3361      	adds	r3, #97	; 0x61
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b05      	cmp	r3, #5
 8002e54:	d109      	bne.n	8002e6a <HCD_HC_OUT_IRQHandler+0x506>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	3360      	adds	r3, #96	; 0x60
 8002e64:	2205      	movs	r2, #5
 8002e66:	701a      	strb	r2, [r3, #0]
 8002e68:	e063      	b.n	8002f32 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	212c      	movs	r1, #44	; 0x2c
 8002e70:	fb01 f303 	mul.w	r3, r1, r3
 8002e74:	4413      	add	r3, r2
 8002e76:	3361      	adds	r3, #97	; 0x61
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b06      	cmp	r3, #6
 8002e7c:	d009      	beq.n	8002e92 <HCD_HC_OUT_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	212c      	movs	r1, #44	; 0x2c
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	3361      	adds	r3, #97	; 0x61
 8002e8c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d14f      	bne.n	8002f32 <HCD_HC_OUT_IRQHandler+0x5ce>
      hhcd->hc[ch_num].ErrCnt++;
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	212c      	movs	r1, #44	; 0x2c
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	335c      	adds	r3, #92	; 0x5c
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	202c      	movs	r0, #44	; 0x2c
 8002eaa:	fb00 f303 	mul.w	r3, r0, r3
 8002eae:	440b      	add	r3, r1
 8002eb0:	335c      	adds	r3, #92	; 0x5c
 8002eb2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	212c      	movs	r1, #44	; 0x2c
 8002eba:	fb01 f303 	mul.w	r3, r1, r3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	335c      	adds	r3, #92	; 0x5c
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d912      	bls.n	8002eee <HCD_HC_OUT_IRQHandler+0x58a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	212c      	movs	r1, #44	; 0x2c
 8002ece:	fb01 f303 	mul.w	r3, r1, r3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	335c      	adds	r3, #92	; 0x5c
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	212c      	movs	r1, #44	; 0x2c
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3360      	adds	r3, #96	; 0x60
 8002ee8:	2204      	movs	r2, #4
 8002eea:	701a      	strb	r2, [r3, #0]
 8002eec:	e021      	b.n	8002f32 <HCD_HC_OUT_IRQHandler+0x5ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	212c      	movs	r1, #44	; 0x2c
 8002ef4:	fb01 f303 	mul.w	r3, r1, r3
 8002ef8:	4413      	add	r3, r2
 8002efa:	3360      	adds	r3, #96	; 0x60
 8002efc:	2202      	movs	r2, #2
 8002efe:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f16:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f1e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2302      	movs	r3, #2
 8002f42:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	b2d9      	uxtb	r1, r3
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	202c      	movs	r0, #44	; 0x2c
 8002f4e:	fb00 f303 	mul.w	r3, r0, r3
 8002f52:	4413      	add	r3, r2
 8002f54:	3360      	adds	r3, #96	; 0x60
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f006 fb76 	bl	800964c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f60:	bf00      	nop
 8002f62:	3720      	adds	r7, #32
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	; 0x28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	0c5b      	lsrs	r3, r3, #17
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	091b      	lsrs	r3, r3, #4
 8002f98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f9c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d004      	beq.n	8002fae <HCD_RXQLVL_IRQHandler+0x46>
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2b05      	cmp	r3, #5
 8002fa8:	f000 80a9 	beq.w	80030fe <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002fac:	e0aa      	b.n	8003104 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80a6 	beq.w	8003102 <HCD_RXQLVL_IRQHandler+0x19a>
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3344      	adds	r3, #68	; 0x44
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 809b 	beq.w	8003102 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	212c      	movs	r1, #44	; 0x2c
 8002fd2:	fb01 f303 	mul.w	r3, r1, r3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3350      	adds	r3, #80	; 0x50
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	441a      	add	r2, r3
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	202c      	movs	r0, #44	; 0x2c
 8002fe6:	fb00 f303 	mul.w	r3, r0, r3
 8002fea:	440b      	add	r3, r1
 8002fec:	334c      	adds	r3, #76	; 0x4c
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d87a      	bhi.n	80030ea <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	212c      	movs	r1, #44	; 0x2c
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	3344      	adds	r3, #68	; 0x44
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	b292      	uxth	r2, r2
 800300c:	4619      	mov	r1, r3
 800300e:	f003 fda1 	bl	8006b54 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	212c      	movs	r1, #44	; 0x2c
 8003018:	fb01 f303 	mul.w	r3, r1, r3
 800301c:	4413      	add	r3, r2
 800301e:	3344      	adds	r3, #68	; 0x44
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	441a      	add	r2, r3
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	202c      	movs	r0, #44	; 0x2c
 800302c:	fb00 f303 	mul.w	r3, r0, r3
 8003030:	440b      	add	r3, r1
 8003032:	3344      	adds	r3, #68	; 0x44
 8003034:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	212c      	movs	r1, #44	; 0x2c
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	4413      	add	r3, r2
 8003042:	3350      	adds	r3, #80	; 0x50
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	441a      	add	r2, r3
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	202c      	movs	r0, #44	; 0x2c
 8003050:	fb00 f303 	mul.w	r3, r0, r3
 8003054:	440b      	add	r3, r1
 8003056:	3350      	adds	r3, #80	; 0x50
 8003058:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	4413      	add	r3, r2
 8003062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	0cdb      	lsrs	r3, r3, #19
 800306a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800306e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	212c      	movs	r1, #44	; 0x2c
 8003076:	fb01 f303 	mul.w	r3, r1, r3
 800307a:	4413      	add	r3, r2
 800307c:	3340      	adds	r3, #64	; 0x40
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	461a      	mov	r2, r3
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4293      	cmp	r3, r2
 8003086:	d13c      	bne.n	8003102 <HCD_RXQLVL_IRQHandler+0x19a>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d039      	beq.n	8003102 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	4413      	add	r3, r2
 8003096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030a4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030ac:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ba:	461a      	mov	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	212c      	movs	r1, #44	; 0x2c
 80030c6:	fb01 f303 	mul.w	r3, r1, r3
 80030ca:	4413      	add	r3, r2
 80030cc:	3354      	adds	r3, #84	; 0x54
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	f083 0301 	eor.w	r3, r3, #1
 80030d4:	b2d8      	uxtb	r0, r3
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	212c      	movs	r1, #44	; 0x2c
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	4413      	add	r3, r2
 80030e2:	3354      	adds	r3, #84	; 0x54
 80030e4:	4602      	mov	r2, r0
 80030e6:	701a      	strb	r2, [r3, #0]
      break;
 80030e8:	e00b      	b.n	8003102 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	212c      	movs	r1, #44	; 0x2c
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	3360      	adds	r3, #96	; 0x60
 80030f8:	2204      	movs	r2, #4
 80030fa:	701a      	strb	r2, [r3, #0]
      break;
 80030fc:	e001      	b.n	8003102 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80030fe:	bf00      	nop
 8003100:	e000      	b.n	8003104 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003102:	bf00      	nop
  }
}
 8003104:	bf00      	nop
 8003106:	3728      	adds	r7, #40	; 0x28
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003138:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b02      	cmp	r3, #2
 8003142:	d10b      	bne.n	800315c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b01      	cmp	r3, #1
 800314c:	d102      	bne.n	8003154 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f006 fa60 	bl	8009614 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f043 0302 	orr.w	r3, r3, #2
 800315a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b08      	cmp	r3, #8
 8003164:	d132      	bne.n	80031cc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f043 0308 	orr.w	r3, r3, #8
 800316c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b04      	cmp	r3, #4
 8003176:	d126      	bne.n	80031c6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d113      	bne.n	80031a8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003186:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800318a:	d106      	bne.n	800319a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2102      	movs	r1, #2
 8003192:	4618      	mov	r0, r3
 8003194:	f003 fe0e 	bl	8006db4 <USB_InitFSLSPClkSel>
 8003198:	e011      	b.n	80031be <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2101      	movs	r1, #1
 80031a0:	4618      	mov	r0, r3
 80031a2:	f003 fe07 	bl	8006db4 <USB_InitFSLSPClkSel>
 80031a6:	e00a      	b.n	80031be <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d106      	bne.n	80031be <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031b6:	461a      	mov	r2, r3
 80031b8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80031bc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f006 fa52 	bl	8009668 <HAL_HCD_PortEnabled_Callback>
 80031c4:	e002      	b.n	80031cc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f006 fa5c 	bl	8009684 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	d103      	bne.n	80031de <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f043 0320 	orr.w	r3, r3, #32
 80031dc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031e4:	461a      	mov	r2, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	6013      	str	r3, [r2, #0]
}
 80031ea:	bf00      	nop
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e081      	b.n	8003308 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d106      	bne.n	800321e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7fd fd6b 	bl	8000cf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2224      	movs	r2, #36	; 0x24
 8003222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0201 	bic.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003242:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003252:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d107      	bne.n	800326c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	e006      	b.n	800327a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003278:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d104      	bne.n	800328c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800328a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800329a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800329e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032ae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69d9      	ldr	r1, [r3, #28]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1a      	ldr	r2, [r3, #32]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0201 	orr.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b20      	cmp	r3, #32
 8003324:	d138      	bne.n	8003398 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003330:	2302      	movs	r3, #2
 8003332:	e032      	b.n	800339a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2224      	movs	r2, #36	; 0x24
 8003340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0201 	bic.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003362:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6819      	ldr	r1, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	e000      	b.n	800339a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003398:	2302      	movs	r3, #2
  }
}
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b085      	sub	sp, #20
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b20      	cmp	r3, #32
 80033ba:	d139      	bne.n	8003430 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e033      	b.n	8003432 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2224      	movs	r2, #36	; 0x24
 80033d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0201 	bic.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	021b      	lsls	r3, r3, #8
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	e000      	b.n	8003432 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003430:	2302      	movs	r3, #2
  }
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e0af      	b.n	80035b2 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fd fce6 	bl	8000e38 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	e00a      	b.n	80034a0 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	3304      	adds	r3, #4
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	2200      	movs	r2, #0
 8003498:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	3301      	adds	r3, #1
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2b0f      	cmp	r3, #15
 80034a4:	d9f1      	bls.n	800348a <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f042 0204 	orr.w	r2, r2, #4
 80034b4:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	4b3f      	ldr	r3, [pc, #252]	; (80035bc <HAL_LCD_Init+0x17c>)
 80034be:	4013      	ands	r3, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6851      	ldr	r1, [r2, #4]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6892      	ldr	r2, [r2, #8]
 80034c8:	4311      	orrs	r1, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80034ce:	4311      	orrs	r1, r2
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034d4:	4311      	orrs	r1, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	69d2      	ldr	r2, [r2, #28]
 80034da:	4311      	orrs	r1, r2
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6a12      	ldr	r2, [r2, #32]
 80034e0:	4311      	orrs	r1, r2
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6992      	ldr	r2, [r2, #24]
 80034e6:	4311      	orrs	r1, r2
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034ec:	4311      	orrs	r1, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	430b      	orrs	r3, r1
 80034f4:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f862 	bl	80035c0 <LCD_WaitForSynchro>
 80034fc:	4603      	mov	r3, r0
 80034fe:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8003500:	7cfb      	ldrb	r3, [r7, #19]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_LCD_Init+0xca>
  {
    return status;
 8003506:	7cfb      	ldrb	r3, [r7, #19]
 8003508:	e053      	b.n	80035b2 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0201 	orr.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003542:	f7fd ffbb 	bl	80014bc <HAL_GetTick>
 8003546:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8003548:	e00c      	b.n	8003564 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800354a:	f7fd ffb7 	bl	80014bc <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003558:	d904      	bls.n	8003564 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2208      	movs	r2, #8
 800355e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e026      	b.n	80035b2 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b01      	cmp	r3, #1
 8003570:	d1eb      	bne.n	800354a <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003572:	f7fd ffa3 	bl	80014bc <HAL_GetTick>
 8003576:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8003578:	e00c      	b.n	8003594 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800357a:	f7fd ff9f 	bl	80014bc <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003588:	d904      	bls.n	8003594 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2210      	movs	r2, #16
 800358e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e00e      	b.n	80035b2 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	2b10      	cmp	r3, #16
 80035a0:	d1eb      	bne.n	800357a <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 80035b0:	7cfb      	ldrb	r3, [r7, #19]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	fc00000e 	.word	0xfc00000e

080035c0 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 80035c8:	f7fd ff78 	bl	80014bc <HAL_GetTick>
 80035cc:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 80035ce:	e00c      	b.n	80035ea <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80035d0:	f7fd ff74 	bl	80014bc <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035de:	d904      	bls.n	80035ea <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e007      	b.n	80035fa <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d1eb      	bne.n	80035d0 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a04      	ldr	r2, [pc, #16]	; (8003620 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800360e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003612:	6013      	str	r3, [r2, #0]
}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40007000 	.word	0x40007000

08003624 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003628:	4b04      	ldr	r3, [pc, #16]	; (800363c <HAL_PWREx_GetVoltageRange+0x18>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40007000 	.word	0x40007000

08003640 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800364e:	d130      	bne.n	80036b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003650:	4b23      	ldr	r3, [pc, #140]	; (80036e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365c:	d038      	beq.n	80036d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800365e:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003666:	4a1e      	ldr	r2, [pc, #120]	; (80036e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003668:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800366c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800366e:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2232      	movs	r2, #50	; 0x32
 8003674:	fb02 f303 	mul.w	r3, r2, r3
 8003678:	4a1b      	ldr	r2, [pc, #108]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	0c9b      	lsrs	r3, r3, #18
 8003680:	3301      	adds	r3, #1
 8003682:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003684:	e002      	b.n	800368c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3b01      	subs	r3, #1
 800368a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800368c:	4b14      	ldr	r3, [pc, #80]	; (80036e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003698:	d102      	bne.n	80036a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1f2      	bne.n	8003686 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036a0:	4b0f      	ldr	r3, [pc, #60]	; (80036e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ac:	d110      	bne.n	80036d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e00f      	b.n	80036d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036b2:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036be:	d007      	beq.n	80036d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036c0:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036c8:	4a05      	ldr	r2, [pc, #20]	; (80036e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40007000 	.word	0x40007000
 80036e4:	20000000 	.word	0x20000000
 80036e8:	431bde83 	.word	0x431bde83

080036ec <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <HAL_PWREx_EnableVddUSB+0x1c>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4a04      	ldr	r2, [pc, #16]	; (8003708 <HAL_PWREx_EnableVddUSB+0x1c>)
 80036f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036fa:	6053      	str	r3, [r2, #4]
}
 80036fc:	bf00      	nop
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40007000 	.word	0x40007000

0800370c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af02      	add	r7, sp, #8
 8003712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003714:	f7fd fed2 	bl	80014bc <HAL_GetTick>
 8003718:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e063      	b.n	80037ec <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10b      	bne.n	8003748 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7fd fc4b 	bl	8000fd4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800373e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f858 	bl	80037f8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	3b01      	subs	r3, #1
 8003758:	021a      	lsls	r2, r3, #8
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	2120      	movs	r1, #32
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f850 	bl	8003814 <QSPI_WaitFlagStateUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003778:	7afb      	ldrb	r3, [r7, #11]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d131      	bne.n	80037e2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003788:	f023 0310 	bic.w	r3, r3, #16
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6852      	ldr	r2, [r2, #4]
 8003790:	0611      	lsls	r1, r2, #24
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68d2      	ldr	r2, [r2, #12]
 8003796:	4311      	orrs	r1, r2
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	430b      	orrs	r3, r1
 800379e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <HAL_QSPI_Init+0xe8>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6912      	ldr	r2, [r2, #16]
 80037ae:	0411      	lsls	r1, r2, #16
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6952      	ldr	r2, [r2, #20]
 80037b4:	4311      	orrs	r1, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6992      	ldr	r2, [r2, #24]
 80037ba:	4311      	orrs	r1, r2
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6812      	ldr	r2, [r2, #0]
 80037c0:	430b      	orrs	r3, r1
 80037c2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80037ea:	7afb      	ldrb	r3, [r7, #11]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	ffe0f8fe 	.word	0xffe0f8fe

080037f8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	4613      	mov	r3, r2
 8003822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003824:	e01a      	b.n	800385c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382c:	d016      	beq.n	800385c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382e:	f7fd fe45 	bl	80014bc <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	429a      	cmp	r2, r3
 800383c:	d302      	bcc.n	8003844 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10b      	bne.n	800385c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2204      	movs	r2, #4
 8003848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003850:	f043 0201 	orr.w	r2, r3, #1
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e00e      	b.n	800387a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	bf14      	ite	ne
 800386a:	2301      	movne	r3, #1
 800386c:	2300      	moveq	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	461a      	mov	r2, r3
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	429a      	cmp	r2, r3
 8003876:	d1d6      	bne.n	8003826 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b088      	sub	sp, #32
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e3ca      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003896:	4b97      	ldr	r3, [pc, #604]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038a0:	4b94      	ldr	r3, [pc, #592]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 80e4 	beq.w	8003a80 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d007      	beq.n	80038ce <HAL_RCC_OscConfig+0x4a>
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b0c      	cmp	r3, #12
 80038c2:	f040 808b 	bne.w	80039dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	f040 8087 	bne.w	80039dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038ce:	4b89      	ldr	r3, [pc, #548]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_RCC_OscConfig+0x62>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e3a2      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1a      	ldr	r2, [r3, #32]
 80038ea:	4b82      	ldr	r3, [pc, #520]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d004      	beq.n	8003900 <HAL_RCC_OscConfig+0x7c>
 80038f6:	4b7f      	ldr	r3, [pc, #508]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038fe:	e005      	b.n	800390c <HAL_RCC_OscConfig+0x88>
 8003900:	4b7c      	ldr	r3, [pc, #496]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003906:	091b      	lsrs	r3, r3, #4
 8003908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800390c:	4293      	cmp	r3, r2
 800390e:	d223      	bcs.n	8003958 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fd55 	bl	80043c4 <RCC_SetFlashLatencyFromMSIRange>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e383      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003924:	4b73      	ldr	r3, [pc, #460]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a72      	ldr	r2, [pc, #456]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 800392a:	f043 0308 	orr.w	r3, r3, #8
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	4b70      	ldr	r3, [pc, #448]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	496d      	ldr	r1, [pc, #436]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 800393e:	4313      	orrs	r3, r2
 8003940:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003942:	4b6c      	ldr	r3, [pc, #432]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	021b      	lsls	r3, r3, #8
 8003950:	4968      	ldr	r1, [pc, #416]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003952:	4313      	orrs	r3, r2
 8003954:	604b      	str	r3, [r1, #4]
 8003956:	e025      	b.n	80039a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003958:	4b66      	ldr	r3, [pc, #408]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a65      	ldr	r2, [pc, #404]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 800395e:	f043 0308 	orr.w	r3, r3, #8
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	4b63      	ldr	r3, [pc, #396]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	4960      	ldr	r1, [pc, #384]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003976:	4b5f      	ldr	r3, [pc, #380]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	495b      	ldr	r1, [pc, #364]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003986:	4313      	orrs	r3, r2
 8003988:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d109      	bne.n	80039a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fd15 	bl	80043c4 <RCC_SetFlashLatencyFromMSIRange>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e343      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039a4:	f000 fc4a 	bl	800423c <HAL_RCC_GetSysClockFreq>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4b52      	ldr	r3, [pc, #328]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	4950      	ldr	r1, [pc, #320]	; (8003af8 <HAL_RCC_OscConfig+0x274>)
 80039b6:	5ccb      	ldrb	r3, [r1, r3]
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
 80039c0:	4a4e      	ldr	r2, [pc, #312]	; (8003afc <HAL_RCC_OscConfig+0x278>)
 80039c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039c4:	4b4e      	ldr	r3, [pc, #312]	; (8003b00 <HAL_RCC_OscConfig+0x27c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fd fd27 	bl	800141c <HAL_InitTick>
 80039ce:	4603      	mov	r3, r0
 80039d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d052      	beq.n	8003a7e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	e327      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d032      	beq.n	8003a4a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039e4:	4b43      	ldr	r3, [pc, #268]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a42      	ldr	r2, [pc, #264]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039f0:	f7fd fd64 	bl	80014bc <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039f8:	f7fd fd60 	bl	80014bc <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e310      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a0a:	4b3a      	ldr	r3, [pc, #232]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a16:	4b37      	ldr	r3, [pc, #220]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a36      	ldr	r2, [pc, #216]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a1c:	f043 0308 	orr.w	r3, r3, #8
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	4b34      	ldr	r3, [pc, #208]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	4931      	ldr	r1, [pc, #196]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a34:	4b2f      	ldr	r3, [pc, #188]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	021b      	lsls	r3, r3, #8
 8003a42:	492c      	ldr	r1, [pc, #176]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	604b      	str	r3, [r1, #4]
 8003a48:	e01a      	b.n	8003a80 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a4a:	4b2a      	ldr	r3, [pc, #168]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a29      	ldr	r2, [pc, #164]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a56:	f7fd fd31 	bl	80014bc <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a5e:	f7fd fd2d 	bl	80014bc <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e2dd      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a70:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f0      	bne.n	8003a5e <HAL_RCC_OscConfig+0x1da>
 8003a7c:	e000      	b.n	8003a80 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d074      	beq.n	8003b76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d005      	beq.n	8003a9e <HAL_RCC_OscConfig+0x21a>
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2b0c      	cmp	r3, #12
 8003a96:	d10e      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d10b      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a9e:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d064      	beq.n	8003b74 <HAL_RCC_OscConfig+0x2f0>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d160      	bne.n	8003b74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e2ba      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003abe:	d106      	bne.n	8003ace <HAL_RCC_OscConfig+0x24a>
 8003ac0:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a0b      	ldr	r2, [pc, #44]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	e026      	b.n	8003b1c <HAL_RCC_OscConfig+0x298>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ad6:	d115      	bne.n	8003b04 <HAL_RCC_OscConfig+0x280>
 8003ad8:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a05      	ldr	r2, [pc, #20]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003ade:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	4b03      	ldr	r3, [pc, #12]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a02      	ldr	r2, [pc, #8]	; (8003af4 <HAL_RCC_OscConfig+0x270>)
 8003aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	e014      	b.n	8003b1c <HAL_RCC_OscConfig+0x298>
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000
 8003af8:	08009d24 	.word	0x08009d24
 8003afc:	20000000 	.word	0x20000000
 8003b00:	20000004 	.word	0x20000004
 8003b04:	4ba0      	ldr	r3, [pc, #640]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a9f      	ldr	r2, [pc, #636]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	4b9d      	ldr	r3, [pc, #628]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a9c      	ldr	r2, [pc, #624]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d013      	beq.n	8003b4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fd fcca 	bl	80014bc <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b2c:	f7fd fcc6 	bl	80014bc <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	; 0x64
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e276      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b3e:	4b92      	ldr	r3, [pc, #584]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0x2a8>
 8003b4a:	e014      	b.n	8003b76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fd fcb6 	bl	80014bc <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b54:	f7fd fcb2 	bl	80014bc <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b64      	cmp	r3, #100	; 0x64
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e262      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b66:	4b88      	ldr	r3, [pc, #544]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x2d0>
 8003b72:	e000      	b.n	8003b76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d060      	beq.n	8003c44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_OscConfig+0x310>
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	2b0c      	cmp	r3, #12
 8003b8c:	d119      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d116      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b94:	4b7c      	ldr	r3, [pc, #496]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_OscConfig+0x328>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e23f      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bac:	4b76      	ldr	r3, [pc, #472]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	061b      	lsls	r3, r3, #24
 8003bba:	4973      	ldr	r1, [pc, #460]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc0:	e040      	b.n	8003c44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d023      	beq.n	8003c12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bca:	4b6f      	ldr	r3, [pc, #444]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a6e      	ldr	r2, [pc, #440]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd6:	f7fd fc71 	bl	80014bc <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bde:	f7fd fc6d 	bl	80014bc <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e21d      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bf0:	4b65      	ldr	r3, [pc, #404]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0f0      	beq.n	8003bde <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bfc:	4b62      	ldr	r3, [pc, #392]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	061b      	lsls	r3, r3, #24
 8003c0a:	495f      	ldr	r1, [pc, #380]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	604b      	str	r3, [r1, #4]
 8003c10:	e018      	b.n	8003c44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c12:	4b5d      	ldr	r3, [pc, #372]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a5c      	ldr	r2, [pc, #368]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1e:	f7fd fc4d 	bl	80014bc <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c26:	f7fd fc49 	bl	80014bc <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e1f9      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c38:	4b53      	ldr	r3, [pc, #332]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1f0      	bne.n	8003c26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d03c      	beq.n	8003cca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01c      	beq.n	8003c92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c58:	4b4b      	ldr	r3, [pc, #300]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c5e:	4a4a      	ldr	r2, [pc, #296]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c68:	f7fd fc28 	bl	80014bc <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c70:	f7fd fc24 	bl	80014bc <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e1d4      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c82:	4b41      	ldr	r3, [pc, #260]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0ef      	beq.n	8003c70 <HAL_RCC_OscConfig+0x3ec>
 8003c90:	e01b      	b.n	8003cca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c92:	4b3d      	ldr	r3, [pc, #244]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c98:	4a3b      	ldr	r2, [pc, #236]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003c9a:	f023 0301 	bic.w	r3, r3, #1
 8003c9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca2:	f7fd fc0b 	bl	80014bc <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003caa:	f7fd fc07 	bl	80014bc <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e1b7      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cbc:	4b32      	ldr	r3, [pc, #200]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1ef      	bne.n	8003caa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80a6 	beq.w	8003e24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003cdc:	4b2a      	ldr	r3, [pc, #168]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10d      	bne.n	8003d04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce8:	4b27      	ldr	r3, [pc, #156]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cec:	4a26      	ldr	r2, [pc, #152]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8003cf4:	4b24      	ldr	r3, [pc, #144]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d00:	2301      	movs	r3, #1
 8003d02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d04:	4b21      	ldr	r3, [pc, #132]	; (8003d8c <HAL_RCC_OscConfig+0x508>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d118      	bne.n	8003d42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d10:	4b1e      	ldr	r3, [pc, #120]	; (8003d8c <HAL_RCC_OscConfig+0x508>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a1d      	ldr	r2, [pc, #116]	; (8003d8c <HAL_RCC_OscConfig+0x508>)
 8003d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d1c:	f7fd fbce 	bl	80014bc <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d24:	f7fd fbca 	bl	80014bc <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e17a      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d36:	4b15      	ldr	r3, [pc, #84]	; (8003d8c <HAL_RCC_OscConfig+0x508>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d108      	bne.n	8003d5c <HAL_RCC_OscConfig+0x4d8>
 8003d4a:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d50:	4a0d      	ldr	r2, [pc, #52]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d5a:	e029      	b.n	8003db0 <HAL_RCC_OscConfig+0x52c>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b05      	cmp	r3, #5
 8003d62:	d115      	bne.n	8003d90 <HAL_RCC_OscConfig+0x50c>
 8003d64:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6a:	4a07      	ldr	r2, [pc, #28]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003d6c:	f043 0304 	orr.w	r3, r3, #4
 8003d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d74:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7a:	4a03      	ldr	r2, [pc, #12]	; (8003d88 <HAL_RCC_OscConfig+0x504>)
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d84:	e014      	b.n	8003db0 <HAL_RCC_OscConfig+0x52c>
 8003d86:	bf00      	nop
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40007000 	.word	0x40007000
 8003d90:	4b9c      	ldr	r3, [pc, #624]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d96:	4a9b      	ldr	r2, [pc, #620]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003da0:	4b98      	ldr	r3, [pc, #608]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da6:	4a97      	ldr	r2, [pc, #604]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003da8:	f023 0304 	bic.w	r3, r3, #4
 8003dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d016      	beq.n	8003de6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db8:	f7fd fb80 	bl	80014bc <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc0:	f7fd fb7c 	bl	80014bc <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e12a      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dd6:	4b8b      	ldr	r3, [pc, #556]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0ed      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x53c>
 8003de4:	e015      	b.n	8003e12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de6:	f7fd fb69 	bl	80014bc <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fd fb65 	bl	80014bc <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e113      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e04:	4b7f      	ldr	r3, [pc, #508]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1ed      	bne.n	8003dee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e12:	7ffb      	ldrb	r3, [r7, #31]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d105      	bne.n	8003e24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e18:	4b7a      	ldr	r3, [pc, #488]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1c:	4a79      	ldr	r2, [pc, #484]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e22:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 80fe 	beq.w	800402a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	f040 80d0 	bne.w	8003fd8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e38:	4b72      	ldr	r3, [pc, #456]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f003 0203 	and.w	r2, r3, #3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d130      	bne.n	8003eae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	3b01      	subs	r3, #1
 8003e58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d127      	bne.n	8003eae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e68:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d11f      	bne.n	8003eae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e78:	2a07      	cmp	r2, #7
 8003e7a:	bf14      	ite	ne
 8003e7c:	2201      	movne	r2, #1
 8003e7e:	2200      	moveq	r2, #0
 8003e80:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d113      	bne.n	8003eae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e90:	085b      	lsrs	r3, r3, #1
 8003e92:	3b01      	subs	r3, #1
 8003e94:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d109      	bne.n	8003eae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	085b      	lsrs	r3, r3, #1
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d06e      	beq.n	8003f8c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	2b0c      	cmp	r3, #12
 8003eb2:	d069      	beq.n	8003f88 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003eb4:	4b53      	ldr	r3, [pc, #332]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d105      	bne.n	8003ecc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ec0:	4b50      	ldr	r3, [pc, #320]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0ad      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ed0:	4b4c      	ldr	r3, [pc, #304]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a4b      	ldr	r2, [pc, #300]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eda:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003edc:	f7fd faee 	bl	80014bc <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7fd faea 	bl	80014bc <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e09a      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef6:	4b43      	ldr	r3, [pc, #268]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f02:	4b40      	ldr	r3, [pc, #256]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	4b40      	ldr	r3, [pc, #256]	; (8004008 <HAL_RCC_OscConfig+0x784>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f12:	3a01      	subs	r2, #1
 8003f14:	0112      	lsls	r2, r2, #4
 8003f16:	4311      	orrs	r1, r2
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f1c:	0212      	lsls	r2, r2, #8
 8003f1e:	4311      	orrs	r1, r2
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f24:	0852      	lsrs	r2, r2, #1
 8003f26:	3a01      	subs	r2, #1
 8003f28:	0552      	lsls	r2, r2, #21
 8003f2a:	4311      	orrs	r1, r2
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f30:	0852      	lsrs	r2, r2, #1
 8003f32:	3a01      	subs	r2, #1
 8003f34:	0652      	lsls	r2, r2, #25
 8003f36:	4311      	orrs	r1, r2
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f3c:	0912      	lsrs	r2, r2, #4
 8003f3e:	0452      	lsls	r2, r2, #17
 8003f40:	430a      	orrs	r2, r1
 8003f42:	4930      	ldr	r1, [pc, #192]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f48:	4b2e      	ldr	r3, [pc, #184]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a2d      	ldr	r2, [pc, #180]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f54:	4b2b      	ldr	r3, [pc, #172]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4a2a      	ldr	r2, [pc, #168]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f60:	f7fd faac 	bl	80014bc <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fd faa8 	bl	80014bc <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e058      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f7a:	4b22      	ldr	r3, [pc, #136]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f86:	e050      	b.n	800402a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e04f      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f8c:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d148      	bne.n	800402a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f98:	4b1a      	ldr	r3, [pc, #104]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a19      	ldr	r2, [pc, #100]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fa2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fa4:	4b17      	ldr	r3, [pc, #92]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4a16      	ldr	r2, [pc, #88]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fb0:	f7fd fa84 	bl	80014bc <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb8:	f7fd fa80 	bl	80014bc <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e030      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fca:	4b0e      	ldr	r3, [pc, #56]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0f0      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x734>
 8003fd6:	e028      	b.n	800402a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	2b0c      	cmp	r3, #12
 8003fdc:	d023      	beq.n	8004026 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fde:	4b09      	ldr	r3, [pc, #36]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a08      	ldr	r2, [pc, #32]	; (8004004 <HAL_RCC_OscConfig+0x780>)
 8003fe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fea:	f7fd fa67 	bl	80014bc <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ff0:	e00c      	b.n	800400c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff2:	f7fd fa63 	bl	80014bc <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d905      	bls.n	800400c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e013      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
 8004004:	40021000 	.word	0x40021000
 8004008:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800400c:	4b09      	ldr	r3, [pc, #36]	; (8004034 <HAL_RCC_OscConfig+0x7b0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1ec      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <HAL_RCC_OscConfig+0x7b0>)
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	4905      	ldr	r1, [pc, #20]	; (8004034 <HAL_RCC_OscConfig+0x7b0>)
 800401e:	4b06      	ldr	r3, [pc, #24]	; (8004038 <HAL_RCC_OscConfig+0x7b4>)
 8004020:	4013      	ands	r3, r2
 8004022:	60cb      	str	r3, [r1, #12]
 8004024:	e001      	b.n	800402a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3720      	adds	r7, #32
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40021000 	.word	0x40021000
 8004038:	feeefffc 	.word	0xfeeefffc

0800403c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e0e7      	b.n	8004220 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004050:	4b75      	ldr	r3, [pc, #468]	; (8004228 <HAL_RCC_ClockConfig+0x1ec>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	d910      	bls.n	8004080 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405e:	4b72      	ldr	r3, [pc, #456]	; (8004228 <HAL_RCC_ClockConfig+0x1ec>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 0207 	bic.w	r2, r3, #7
 8004066:	4970      	ldr	r1, [pc, #448]	; (8004228 <HAL_RCC_ClockConfig+0x1ec>)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	4313      	orrs	r3, r2
 800406c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800406e:	4b6e      	ldr	r3, [pc, #440]	; (8004228 <HAL_RCC_ClockConfig+0x1ec>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d001      	beq.n	8004080 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0cf      	b.n	8004220 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d010      	beq.n	80040ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	4b66      	ldr	r3, [pc, #408]	; (800422c <HAL_RCC_ClockConfig+0x1f0>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004098:	429a      	cmp	r2, r3
 800409a:	d908      	bls.n	80040ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800409c:	4b63      	ldr	r3, [pc, #396]	; (800422c <HAL_RCC_ClockConfig+0x1f0>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	4960      	ldr	r1, [pc, #384]	; (800422c <HAL_RCC_ClockConfig+0x1f0>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d04c      	beq.n	8004154 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d107      	bne.n	80040d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040c2:	4b5a      	ldr	r3, [pc, #360]	; (800422c <HAL_RCC_ClockConfig+0x1f0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d121      	bne.n	8004112 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e0a6      	b.n	8004220 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d107      	bne.n	80040ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040da:	4b54      	ldr	r3, [pc, #336]	; (800422c <HAL_RCC_ClockConfig+0x1f0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d115      	bne.n	8004112 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e09a      	b.n	8004220 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d107      	bne.n	8004102 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040f2:	4b4e      	ldr	r3, [pc, #312]	; (800422c <HAL_RCC_ClockConfig+0x1f0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e08e      	b.n	8004220 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004102:	4b4a      	ldr	r3, [pc, #296]	; (800422c <HAL_RCC_ClockConfig+0x1f0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e086      	b.n	8004220 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004112:	4b46      	ldr	r3, [pc, #280]	; (800422c <HAL_RCC_ClockConfig+0x1f0>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f023 0203 	bic.w	r2, r3, #3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4943      	ldr	r1, [pc, #268]	; (800422c <HAL_RCC_ClockConfig+0x1f0>)
 8004120:	4313      	orrs	r3, r2
 8004122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004124:	f7fd f9ca 	bl	80014bc <HAL_GetTick>
 8004128:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412a:	e00a      	b.n	8004142 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800412c:	f7fd f9c6 	bl	80014bc <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	f241 3288 	movw	r2, #5000	; 0x1388
 800413a:	4293      	cmp	r3, r2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e06e      	b.n	8004220 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004142:	4b3a      	ldr	r3, [pc, #232]	; (800422c <HAL_RCC_ClockConfig+0x1f0>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 020c 	and.w	r2, r3, #12
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	429a      	cmp	r2, r3
 8004152:	d1eb      	bne.n	800412c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d010      	beq.n	8004182 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	4b31      	ldr	r3, [pc, #196]	; (800422c <HAL_RCC_ClockConfig+0x1f0>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800416c:	429a      	cmp	r2, r3
 800416e:	d208      	bcs.n	8004182 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004170:	4b2e      	ldr	r3, [pc, #184]	; (800422c <HAL_RCC_ClockConfig+0x1f0>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	492b      	ldr	r1, [pc, #172]	; (800422c <HAL_RCC_ClockConfig+0x1f0>)
 800417e:	4313      	orrs	r3, r2
 8004180:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004182:	4b29      	ldr	r3, [pc, #164]	; (8004228 <HAL_RCC_ClockConfig+0x1ec>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d210      	bcs.n	80041b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004190:	4b25      	ldr	r3, [pc, #148]	; (8004228 <HAL_RCC_ClockConfig+0x1ec>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f023 0207 	bic.w	r2, r3, #7
 8004198:	4923      	ldr	r1, [pc, #140]	; (8004228 <HAL_RCC_ClockConfig+0x1ec>)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	4313      	orrs	r3, r2
 800419e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a0:	4b21      	ldr	r3, [pc, #132]	; (8004228 <HAL_RCC_ClockConfig+0x1ec>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d001      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e036      	b.n	8004220 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d008      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041be:	4b1b      	ldr	r3, [pc, #108]	; (800422c <HAL_RCC_ClockConfig+0x1f0>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	4918      	ldr	r1, [pc, #96]	; (800422c <HAL_RCC_ClockConfig+0x1f0>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d009      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041dc:	4b13      	ldr	r3, [pc, #76]	; (800422c <HAL_RCC_ClockConfig+0x1f0>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4910      	ldr	r1, [pc, #64]	; (800422c <HAL_RCC_ClockConfig+0x1f0>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041f0:	f000 f824 	bl	800423c <HAL_RCC_GetSysClockFreq>
 80041f4:	4602      	mov	r2, r0
 80041f6:	4b0d      	ldr	r3, [pc, #52]	; (800422c <HAL_RCC_ClockConfig+0x1f0>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	091b      	lsrs	r3, r3, #4
 80041fc:	f003 030f 	and.w	r3, r3, #15
 8004200:	490b      	ldr	r1, [pc, #44]	; (8004230 <HAL_RCC_ClockConfig+0x1f4>)
 8004202:	5ccb      	ldrb	r3, [r1, r3]
 8004204:	f003 031f 	and.w	r3, r3, #31
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
 800420c:	4a09      	ldr	r2, [pc, #36]	; (8004234 <HAL_RCC_ClockConfig+0x1f8>)
 800420e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004210:	4b09      	ldr	r3, [pc, #36]	; (8004238 <HAL_RCC_ClockConfig+0x1fc>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f7fd f901 	bl	800141c <HAL_InitTick>
 800421a:	4603      	mov	r3, r0
 800421c:	72fb      	strb	r3, [r7, #11]

  return status;
 800421e:	7afb      	ldrb	r3, [r7, #11]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40022000 	.word	0x40022000
 800422c:	40021000 	.word	0x40021000
 8004230:	08009d24 	.word	0x08009d24
 8004234:	20000000 	.word	0x20000000
 8004238:	20000004 	.word	0x20000004

0800423c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800423c:	b480      	push	{r7}
 800423e:	b089      	sub	sp, #36	; 0x24
 8004240:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	61fb      	str	r3, [r7, #28]
 8004246:	2300      	movs	r3, #0
 8004248:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800424a:	4b3e      	ldr	r3, [pc, #248]	; (8004344 <HAL_RCC_GetSysClockFreq+0x108>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 030c 	and.w	r3, r3, #12
 8004252:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004254:	4b3b      	ldr	r3, [pc, #236]	; (8004344 <HAL_RCC_GetSysClockFreq+0x108>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_RCC_GetSysClockFreq+0x34>
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	2b0c      	cmp	r3, #12
 8004268:	d121      	bne.n	80042ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d11e      	bne.n	80042ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004270:	4b34      	ldr	r3, [pc, #208]	; (8004344 <HAL_RCC_GetSysClockFreq+0x108>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	2b00      	cmp	r3, #0
 800427a:	d107      	bne.n	800428c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800427c:	4b31      	ldr	r3, [pc, #196]	; (8004344 <HAL_RCC_GetSysClockFreq+0x108>)
 800427e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004282:	0a1b      	lsrs	r3, r3, #8
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	e005      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800428c:	4b2d      	ldr	r3, [pc, #180]	; (8004344 <HAL_RCC_GetSysClockFreq+0x108>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004298:	4a2b      	ldr	r2, [pc, #172]	; (8004348 <HAL_RCC_GetSysClockFreq+0x10c>)
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10d      	bne.n	80042c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042ac:	e00a      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d102      	bne.n	80042ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042b4:	4b25      	ldr	r3, [pc, #148]	; (800434c <HAL_RCC_GetSysClockFreq+0x110>)
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	e004      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042c0:	4b23      	ldr	r3, [pc, #140]	; (8004350 <HAL_RCC_GetSysClockFreq+0x114>)
 80042c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	2b0c      	cmp	r3, #12
 80042c8:	d134      	bne.n	8004334 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042ca:	4b1e      	ldr	r3, [pc, #120]	; (8004344 <HAL_RCC_GetSysClockFreq+0x108>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d003      	beq.n	80042e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d003      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0xac>
 80042e0:	e005      	b.n	80042ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042e2:	4b1a      	ldr	r3, [pc, #104]	; (800434c <HAL_RCC_GetSysClockFreq+0x110>)
 80042e4:	617b      	str	r3, [r7, #20]
      break;
 80042e6:	e005      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042e8:	4b19      	ldr	r3, [pc, #100]	; (8004350 <HAL_RCC_GetSysClockFreq+0x114>)
 80042ea:	617b      	str	r3, [r7, #20]
      break;
 80042ec:	e002      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	617b      	str	r3, [r7, #20]
      break;
 80042f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042f4:	4b13      	ldr	r3, [pc, #76]	; (8004344 <HAL_RCC_GetSysClockFreq+0x108>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	091b      	lsrs	r3, r3, #4
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	3301      	adds	r3, #1
 8004300:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004302:	4b10      	ldr	r3, [pc, #64]	; (8004344 <HAL_RCC_GetSysClockFreq+0x108>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	0a1b      	lsrs	r3, r3, #8
 8004308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	fb03 f202 	mul.w	r2, r3, r2
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	fbb2 f3f3 	udiv	r3, r2, r3
 8004318:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800431a:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <HAL_RCC_GetSysClockFreq+0x108>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	0e5b      	lsrs	r3, r3, #25
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	3301      	adds	r3, #1
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004332:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004334:	69bb      	ldr	r3, [r7, #24]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3724      	adds	r7, #36	; 0x24
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40021000 	.word	0x40021000
 8004348:	08009d3c 	.word	0x08009d3c
 800434c:	00f42400 	.word	0x00f42400
 8004350:	007a1200 	.word	0x007a1200

08004354 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004358:	4b03      	ldr	r3, [pc, #12]	; (8004368 <HAL_RCC_GetHCLKFreq+0x14>)
 800435a:	681b      	ldr	r3, [r3, #0]
}
 800435c:	4618      	mov	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	20000000 	.word	0x20000000

0800436c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004370:	f7ff fff0 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 8004374:	4602      	mov	r2, r0
 8004376:	4b06      	ldr	r3, [pc, #24]	; (8004390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	0a1b      	lsrs	r3, r3, #8
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	4904      	ldr	r1, [pc, #16]	; (8004394 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004382:	5ccb      	ldrb	r3, [r1, r3]
 8004384:	f003 031f 	and.w	r3, r3, #31
 8004388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800438c:	4618      	mov	r0, r3
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40021000 	.word	0x40021000
 8004394:	08009d34 	.word	0x08009d34

08004398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800439c:	f7ff ffda 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 80043a0:	4602      	mov	r2, r0
 80043a2:	4b06      	ldr	r3, [pc, #24]	; (80043bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	0adb      	lsrs	r3, r3, #11
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	4904      	ldr	r1, [pc, #16]	; (80043c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043ae:	5ccb      	ldrb	r3, [r1, r3]
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40021000 	.word	0x40021000
 80043c0:	08009d34 	.word	0x08009d34

080043c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043cc:	2300      	movs	r3, #0
 80043ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043d0:	4b2a      	ldr	r3, [pc, #168]	; (800447c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043dc:	f7ff f922 	bl	8003624 <HAL_PWREx_GetVoltageRange>
 80043e0:	6178      	str	r0, [r7, #20]
 80043e2:	e014      	b.n	800440e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043e4:	4b25      	ldr	r3, [pc, #148]	; (800447c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e8:	4a24      	ldr	r2, [pc, #144]	; (800447c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ee:	6593      	str	r3, [r2, #88]	; 0x58
 80043f0:	4b22      	ldr	r3, [pc, #136]	; (800447c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043fc:	f7ff f912 	bl	8003624 <HAL_PWREx_GetVoltageRange>
 8004400:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004402:	4b1e      	ldr	r3, [pc, #120]	; (800447c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004406:	4a1d      	ldr	r2, [pc, #116]	; (800447c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800440c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004414:	d10b      	bne.n	800442e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b80      	cmp	r3, #128	; 0x80
 800441a:	d919      	bls.n	8004450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2ba0      	cmp	r3, #160	; 0xa0
 8004420:	d902      	bls.n	8004428 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004422:	2302      	movs	r3, #2
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	e013      	b.n	8004450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004428:	2301      	movs	r3, #1
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	e010      	b.n	8004450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b80      	cmp	r3, #128	; 0x80
 8004432:	d902      	bls.n	800443a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004434:	2303      	movs	r3, #3
 8004436:	613b      	str	r3, [r7, #16]
 8004438:	e00a      	b.n	8004450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b80      	cmp	r3, #128	; 0x80
 800443e:	d102      	bne.n	8004446 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004440:	2302      	movs	r3, #2
 8004442:	613b      	str	r3, [r7, #16]
 8004444:	e004      	b.n	8004450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b70      	cmp	r3, #112	; 0x70
 800444a:	d101      	bne.n	8004450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800444c:	2301      	movs	r3, #1
 800444e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f023 0207 	bic.w	r2, r3, #7
 8004458:	4909      	ldr	r1, [pc, #36]	; (8004480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004460:	4b07      	ldr	r3, [pc, #28]	; (8004480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	429a      	cmp	r2, r3
 800446c:	d001      	beq.n	8004472 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40021000 	.word	0x40021000
 8004480:	40022000 	.word	0x40022000

08004484 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800448c:	2300      	movs	r3, #0
 800448e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004490:	2300      	movs	r3, #0
 8004492:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800449c:	2b00      	cmp	r3, #0
 800449e:	d041      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044a8:	d02a      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044ae:	d824      	bhi.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044b4:	d008      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044ba:	d81e      	bhi.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044c4:	d010      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044c6:	e018      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044c8:	4b86      	ldr	r3, [pc, #536]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	4a85      	ldr	r2, [pc, #532]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044d4:	e015      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3304      	adds	r3, #4
 80044da:	2100      	movs	r1, #0
 80044dc:	4618      	mov	r0, r3
 80044de:	f001 f839 	bl	8005554 <RCCEx_PLLSAI1_Config>
 80044e2:	4603      	mov	r3, r0
 80044e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044e6:	e00c      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3320      	adds	r3, #32
 80044ec:	2100      	movs	r1, #0
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 f924 	bl	800573c <RCCEx_PLLSAI2_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044f8:	e003      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	74fb      	strb	r3, [r7, #19]
      break;
 80044fe:	e000      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004500:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004502:	7cfb      	ldrb	r3, [r7, #19]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10b      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004508:	4b76      	ldr	r3, [pc, #472]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004516:	4973      	ldr	r1, [pc, #460]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800451e:	e001      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004520:	7cfb      	ldrb	r3, [r7, #19]
 8004522:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d041      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004534:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004538:	d02a      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800453a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800453e:	d824      	bhi.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004540:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004544:	d008      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004546:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800454a:	d81e      	bhi.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004554:	d010      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004556:	e018      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004558:	4b62      	ldr	r3, [pc, #392]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	4a61      	ldr	r2, [pc, #388]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800455e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004562:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004564:	e015      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3304      	adds	r3, #4
 800456a:	2100      	movs	r1, #0
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fff1 	bl	8005554 <RCCEx_PLLSAI1_Config>
 8004572:	4603      	mov	r3, r0
 8004574:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004576:	e00c      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3320      	adds	r3, #32
 800457c:	2100      	movs	r1, #0
 800457e:	4618      	mov	r0, r3
 8004580:	f001 f8dc 	bl	800573c <RCCEx_PLLSAI2_Config>
 8004584:	4603      	mov	r3, r0
 8004586:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004588:	e003      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	74fb      	strb	r3, [r7, #19]
      break;
 800458e:	e000      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004590:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004592:	7cfb      	ldrb	r3, [r7, #19]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10b      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004598:	4b52      	ldr	r3, [pc, #328]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800459a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045a6:	494f      	ldr	r1, [pc, #316]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045ae:	e001      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b0:	7cfb      	ldrb	r3, [r7, #19]
 80045b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 80a0 	beq.w	8004702 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c2:	2300      	movs	r3, #0
 80045c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045c6:	4b47      	ldr	r3, [pc, #284]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80045d6:	2300      	movs	r3, #0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00d      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045dc:	4b41      	ldr	r3, [pc, #260]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e0:	4a40      	ldr	r2, [pc, #256]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e6:	6593      	str	r3, [r2, #88]	; 0x58
 80045e8:	4b3e      	ldr	r3, [pc, #248]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f0:	60bb      	str	r3, [r7, #8]
 80045f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f4:	2301      	movs	r3, #1
 80045f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045f8:	4b3b      	ldr	r3, [pc, #236]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a3a      	ldr	r2, [pc, #232]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004602:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004604:	f7fc ff5a 	bl	80014bc <HAL_GetTick>
 8004608:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800460a:	e009      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800460c:	f7fc ff56 	bl	80014bc <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d902      	bls.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	74fb      	strb	r3, [r7, #19]
        break;
 800461e:	e005      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004620:	4b31      	ldr	r3, [pc, #196]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0ef      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800462c:	7cfb      	ldrb	r3, [r7, #19]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d15c      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004632:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01f      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	429a      	cmp	r2, r3
 800464e:	d019      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004650:	4b24      	ldr	r3, [pc, #144]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800465c:	4b21      	ldr	r3, [pc, #132]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004662:	4a20      	ldr	r2, [pc, #128]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800466c:	4b1d      	ldr	r3, [pc, #116]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004672:	4a1c      	ldr	r2, [pc, #112]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800467c:	4a19      	ldr	r2, [pc, #100]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d016      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468e:	f7fc ff15 	bl	80014bc <HAL_GetTick>
 8004692:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004694:	e00b      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004696:	f7fc ff11 	bl	80014bc <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d902      	bls.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	74fb      	strb	r3, [r7, #19]
            break;
 80046ac:	e006      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ae:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0ec      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80046bc:	7cfb      	ldrb	r3, [r7, #19]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10c      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046c2:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d2:	4904      	ldr	r1, [pc, #16]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046da:	e009      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046dc:	7cfb      	ldrb	r3, [r7, #19]
 80046de:	74bb      	strb	r3, [r7, #18]
 80046e0:	e006      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80046e2:	bf00      	nop
 80046e4:	40021000 	.word	0x40021000
 80046e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ec:	7cfb      	ldrb	r3, [r7, #19]
 80046ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046f0:	7c7b      	ldrb	r3, [r7, #17]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d105      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f6:	4b9e      	ldr	r3, [pc, #632]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fa:	4a9d      	ldr	r2, [pc, #628]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004700:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800470e:	4b98      	ldr	r3, [pc, #608]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004714:	f023 0203 	bic.w	r2, r3, #3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	4994      	ldr	r1, [pc, #592]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004730:	4b8f      	ldr	r3, [pc, #572]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004736:	f023 020c 	bic.w	r2, r3, #12
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473e:	498c      	ldr	r1, [pc, #560]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004752:	4b87      	ldr	r3, [pc, #540]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004758:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	4983      	ldr	r1, [pc, #524]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004774:	4b7e      	ldr	r3, [pc, #504]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004782:	497b      	ldr	r1, [pc, #492]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0310 	and.w	r3, r3, #16
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004796:	4b76      	ldr	r3, [pc, #472]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a4:	4972      	ldr	r1, [pc, #456]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047b8:	4b6d      	ldr	r3, [pc, #436]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c6:	496a      	ldr	r1, [pc, #424]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047da:	4b65      	ldr	r3, [pc, #404]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e8:	4961      	ldr	r1, [pc, #388]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047fc:	4b5c      	ldr	r3, [pc, #368]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004802:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480a:	4959      	ldr	r1, [pc, #356]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800481e:	4b54      	ldr	r3, [pc, #336]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004824:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482c:	4950      	ldr	r1, [pc, #320]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004840:	4b4b      	ldr	r3, [pc, #300]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004846:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484e:	4948      	ldr	r1, [pc, #288]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004862:	4b43      	ldr	r3, [pc, #268]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004868:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004870:	493f      	ldr	r1, [pc, #252]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d028      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004884:	4b3a      	ldr	r3, [pc, #232]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004892:	4937      	ldr	r1, [pc, #220]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800489e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048a2:	d106      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048a4:	4b32      	ldr	r3, [pc, #200]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4a31      	ldr	r2, [pc, #196]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048ae:	60d3      	str	r3, [r2, #12]
 80048b0:	e011      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048ba:	d10c      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3304      	adds	r3, #4
 80048c0:	2101      	movs	r1, #1
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fe46 	bl	8005554 <RCCEx_PLLSAI1_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048cc:	7cfb      	ldrb	r3, [r7, #19]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80048d2:	7cfb      	ldrb	r3, [r7, #19]
 80048d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d028      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048e2:	4b23      	ldr	r3, [pc, #140]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f0:	491f      	ldr	r1, [pc, #124]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004900:	d106      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004902:	4b1b      	ldr	r3, [pc, #108]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	4a1a      	ldr	r2, [pc, #104]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800490c:	60d3      	str	r3, [r2, #12]
 800490e:	e011      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004914:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004918:	d10c      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	3304      	adds	r3, #4
 800491e:	2101      	movs	r1, #1
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fe17 	bl	8005554 <RCCEx_PLLSAI1_Config>
 8004926:	4603      	mov	r3, r0
 8004928:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800492a:	7cfb      	ldrb	r3, [r7, #19]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004930:	7cfb      	ldrb	r3, [r7, #19]
 8004932:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d02b      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004946:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494e:	4908      	ldr	r1, [pc, #32]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800495a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800495e:	d109      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004960:	4b03      	ldr	r3, [pc, #12]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4a02      	ldr	r2, [pc, #8]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004966:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800496a:	60d3      	str	r3, [r2, #12]
 800496c:	e014      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800496e:	bf00      	nop
 8004970:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004978:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800497c:	d10c      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3304      	adds	r3, #4
 8004982:	2101      	movs	r1, #1
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fde5 	bl	8005554 <RCCEx_PLLSAI1_Config>
 800498a:	4603      	mov	r3, r0
 800498c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800498e:	7cfb      	ldrb	r3, [r7, #19]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004994:	7cfb      	ldrb	r3, [r7, #19]
 8004996:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d02f      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049a4:	4b2b      	ldr	r3, [pc, #172]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049b2:	4928      	ldr	r1, [pc, #160]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049c2:	d10d      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3304      	adds	r3, #4
 80049c8:	2102      	movs	r1, #2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fdc2 	bl	8005554 <RCCEx_PLLSAI1_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049d4:	7cfb      	ldrb	r3, [r7, #19]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d014      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80049da:	7cfb      	ldrb	r3, [r7, #19]
 80049dc:	74bb      	strb	r3, [r7, #18]
 80049de:	e011      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e8:	d10c      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3320      	adds	r3, #32
 80049ee:	2102      	movs	r1, #2
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fea3 	bl	800573c <RCCEx_PLLSAI2_Config>
 80049f6:	4603      	mov	r3, r0
 80049f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049fa:	7cfb      	ldrb	r3, [r7, #19]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a00:	7cfb      	ldrb	r3, [r7, #19]
 8004a02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a10:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a1e:	490d      	ldr	r1, [pc, #52]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00b      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a32:	4b08      	ldr	r3, [pc, #32]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a42:	4904      	ldr	r1, [pc, #16]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40021000 	.word	0x40021000

08004a58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a6a:	d13e      	bne.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004a6c:	4bb2      	ldr	r3, [pc, #712]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a76:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a7e:	d028      	beq.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a86:	f200 8542 	bhi.w	800550e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a90:	d005      	beq.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a98:	d00e      	beq.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004a9a:	f000 bd38 	b.w	800550e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a9e:	4ba6      	ldr	r3, [pc, #664]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	f040 8532 	bne.w	8005512 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8004aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ab2:	61fb      	str	r3, [r7, #28]
      break;
 8004ab4:	f000 bd2d 	b.w	8005512 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004ab8:	4b9f      	ldr	r3, [pc, #636]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	f040 8527 	bne.w	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8004ac8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004acc:	61fb      	str	r3, [r7, #28]
      break;
 8004ace:	f000 bd22 	b.w	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004ad2:	4b99      	ldr	r3, [pc, #612]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ada:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ade:	f040 851c 	bne.w	800551a <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8004ae2:	4b96      	ldr	r3, [pc, #600]	; (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8004ae4:	61fb      	str	r3, [r7, #28]
      break;
 8004ae6:	f000 bd18 	b.w	800551a <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aea:	4b93      	ldr	r3, [pc, #588]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d036      	beq.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2b03      	cmp	r3, #3
 8004afe:	d840      	bhi.n	8004b82 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d003      	beq.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d020      	beq.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004b0c:	e039      	b.n	8004b82 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004b0e:	4b8a      	ldr	r3, [pc, #552]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d116      	bne.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004b1a:	4b87      	ldr	r3, [pc, #540]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004b26:	4b84      	ldr	r3, [pc, #528]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	091b      	lsrs	r3, r3, #4
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	e005      	b.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004b32:	4b81      	ldr	r3, [pc, #516]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b38:	0a1b      	lsrs	r3, r3, #8
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	4a80      	ldr	r2, [pc, #512]	; (8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004b46:	e01f      	b.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	61bb      	str	r3, [r7, #24]
      break;
 8004b4c:	e01c      	b.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b4e:	4b7a      	ldr	r3, [pc, #488]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b5a:	d102      	bne.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004b5c:	4b79      	ldr	r3, [pc, #484]	; (8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004b5e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004b60:	e012      	b.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61bb      	str	r3, [r7, #24]
      break;
 8004b66:	e00f      	b.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004b68:	4b73      	ldr	r3, [pc, #460]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b74:	d102      	bne.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004b76:	4b74      	ldr	r3, [pc, #464]	; (8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004b78:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004b7a:	e005      	b.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61bb      	str	r3, [r7, #24]
      break;
 8004b80:	e002      	b.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	61bb      	str	r3, [r7, #24]
      break;
 8004b86:	bf00      	nop
    }

    switch(PeriphClk)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b8e:	f000 80dd 	beq.w	8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b98:	f200 84c1 	bhi.w	800551e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ba2:	f000 80d3 	beq.w	8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bac:	f200 84b7 	bhi.w	800551e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb6:	f000 835f 	beq.w	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc0:	f200 84ad 	bhi.w	800551e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bca:	f000 847e 	beq.w	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd4:	f200 84a3 	bhi.w	800551e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bde:	f000 82cd 	beq.w	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004be8:	f200 8499 	bhi.w	800551e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf2:	f000 80ab 	beq.w	8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bfc:	f200 848f 	bhi.w	800551e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c06:	f000 8090 	beq.w	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c10:	f200 8485 	bhi.w	800551e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c1a:	d07f      	beq.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c22:	f200 847c 	bhi.w	800551e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c2c:	f000 8403 	beq.w	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c36:	f200 8472 	bhi.w	800551e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c40:	f000 83af 	beq.w	80053a2 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c4a:	f200 8468 	bhi.w	800551e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c54:	f000 8379 	beq.w	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c5e:	f200 845e 	bhi.w	800551e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b80      	cmp	r3, #128	; 0x80
 8004c66:	f000 8344 	beq.w	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b80      	cmp	r3, #128	; 0x80
 8004c6e:	f200 8456 	bhi.w	800551e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d84b      	bhi.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 844f 	beq.w	800551e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	2b1f      	cmp	r3, #31
 8004c86:	f200 844a 	bhi.w	800551e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004c8a:	a201      	add	r2, pc, #4	; (adr r2, 8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8004c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c90:	08004e79 	.word	0x08004e79
 8004c94:	08004ee7 	.word	0x08004ee7
 8004c98:	0800551f 	.word	0x0800551f
 8004c9c:	08004f7b 	.word	0x08004f7b
 8004ca0:	0800551f 	.word	0x0800551f
 8004ca4:	0800551f 	.word	0x0800551f
 8004ca8:	0800551f 	.word	0x0800551f
 8004cac:	08005001 	.word	0x08005001
 8004cb0:	0800551f 	.word	0x0800551f
 8004cb4:	0800551f 	.word	0x0800551f
 8004cb8:	0800551f 	.word	0x0800551f
 8004cbc:	0800551f 	.word	0x0800551f
 8004cc0:	0800551f 	.word	0x0800551f
 8004cc4:	0800551f 	.word	0x0800551f
 8004cc8:	0800551f 	.word	0x0800551f
 8004ccc:	08005079 	.word	0x08005079
 8004cd0:	0800551f 	.word	0x0800551f
 8004cd4:	0800551f 	.word	0x0800551f
 8004cd8:	0800551f 	.word	0x0800551f
 8004cdc:	0800551f 	.word	0x0800551f
 8004ce0:	0800551f 	.word	0x0800551f
 8004ce4:	0800551f 	.word	0x0800551f
 8004ce8:	0800551f 	.word	0x0800551f
 8004cec:	0800551f 	.word	0x0800551f
 8004cf0:	0800551f 	.word	0x0800551f
 8004cf4:	0800551f 	.word	0x0800551f
 8004cf8:	0800551f 	.word	0x0800551f
 8004cfc:	0800551f 	.word	0x0800551f
 8004d00:	0800551f 	.word	0x0800551f
 8004d04:	0800551f 	.word	0x0800551f
 8004d08:	0800551f 	.word	0x0800551f
 8004d0c:	080050fb 	.word	0x080050fb
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	f000 82c1 	beq.w	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004d18:	f000 bc01 	b.w	800551e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004d1c:	69b9      	ldr	r1, [r7, #24]
 8004d1e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004d22:	f000 fde9 	bl	80058f8 <RCCEx_GetSAIxPeriphCLKFreq>
 8004d26:	61f8      	str	r0, [r7, #28]
      break;
 8004d28:	e3fa      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004d2a:	69b9      	ldr	r1, [r7, #24]
 8004d2c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004d30:	f000 fde2 	bl	80058f8 <RCCEx_GetSAIxPeriphCLKFreq>
 8004d34:	61f8      	str	r0, [r7, #28]
      break;
 8004d36:	e3f3      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	0003d090 	.word	0x0003d090
 8004d40:	08009d3c 	.word	0x08009d3c
 8004d44:	00f42400 	.word	0x00f42400
 8004d48:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004d4c:	4ba9      	ldr	r3, [pc, #676]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d52:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004d5e:	d00c      	beq.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004d66:	d87f      	bhi.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d6e:	d04e      	beq.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d76:	d01d      	beq.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8004d78:	e076      	b.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004d7a:	4b9e      	ldr	r3, [pc, #632]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d172      	bne.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004d86:	4b9b      	ldr	r3, [pc, #620]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d005      	beq.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8004d92:	4b98      	ldr	r3, [pc, #608]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	091b      	lsrs	r3, r3, #4
 8004d98:	f003 030f 	and.w	r3, r3, #15
 8004d9c:	e005      	b.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8004d9e:	4b95      	ldr	r3, [pc, #596]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004da4:	0a1b      	lsrs	r3, r3, #8
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	4a93      	ldr	r2, [pc, #588]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db0:	61fb      	str	r3, [r7, #28]
          break;
 8004db2:	e05b      	b.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004db4:	4b8f      	ldr	r3, [pc, #572]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dc0:	d156      	bne.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004dc2:	4b8c      	ldr	r3, [pc, #560]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dce:	d14f      	bne.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004dd0:	4b88      	ldr	r3, [pc, #544]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	0a1b      	lsrs	r3, r3, #8
 8004dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dda:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	fb03 f202 	mul.w	r2, r3, r2
 8004de4:	4b83      	ldr	r3, [pc, #524]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	091b      	lsrs	r3, r3, #4
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	3301      	adds	r3, #1
 8004df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004df6:	4b7f      	ldr	r3, [pc, #508]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	0d5b      	lsrs	r3, r3, #21
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	3301      	adds	r3, #1
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0a:	61fb      	str	r3, [r7, #28]
          break;
 8004e0c:	e030      	b.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004e0e:	4b79      	ldr	r3, [pc, #484]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e1a:	d12b      	bne.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004e1c:	4b75      	ldr	r3, [pc, #468]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e28:	d124      	bne.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004e2a:	4b72      	ldr	r3, [pc, #456]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	0a1b      	lsrs	r3, r3, #8
 8004e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e34:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	fb03 f202 	mul.w	r2, r3, r2
 8004e3e:	4b6d      	ldr	r3, [pc, #436]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	091b      	lsrs	r3, r3, #4
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	3301      	adds	r3, #1
 8004e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004e50:	4b68      	ldr	r3, [pc, #416]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	0d5b      	lsrs	r3, r3, #21
 8004e56:	f003 0303 	and.w	r3, r3, #3
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e64:	61fb      	str	r3, [r7, #28]
          break;
 8004e66:	e005      	b.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8004e68:	bf00      	nop
 8004e6a:	e359      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004e6c:	bf00      	nop
 8004e6e:	e357      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004e70:	bf00      	nop
 8004e72:	e355      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004e74:	bf00      	nop
        break;
 8004e76:	e353      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004e78:	4b5e      	ldr	r3, [pc, #376]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	d827      	bhi.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8004e8a:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8004e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e90:	08004ea1 	.word	0x08004ea1
 8004e94:	08004ea9 	.word	0x08004ea9
 8004e98:	08004eb1 	.word	0x08004eb1
 8004e9c:	08004ec5 	.word	0x08004ec5
          frequency = HAL_RCC_GetPCLK2Freq();
 8004ea0:	f7ff fa7a 	bl	8004398 <HAL_RCC_GetPCLK2Freq>
 8004ea4:	61f8      	str	r0, [r7, #28]
          break;
 8004ea6:	e01d      	b.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ea8:	f7ff f9c8 	bl	800423c <HAL_RCC_GetSysClockFreq>
 8004eac:	61f8      	str	r0, [r7, #28]
          break;
 8004eae:	e019      	b.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004eb0:	4b50      	ldr	r3, [pc, #320]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ebc:	d10f      	bne.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8004ebe:	4b4f      	ldr	r3, [pc, #316]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004ec0:	61fb      	str	r3, [r7, #28]
          break;
 8004ec2:	e00c      	b.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ec4:	4b4b      	ldr	r3, [pc, #300]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d107      	bne.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8004ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ed6:	61fb      	str	r3, [r7, #28]
          break;
 8004ed8:	e003      	b.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8004eda:	bf00      	nop
 8004edc:	e320      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004ede:	bf00      	nop
 8004ee0:	e31e      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004ee2:	bf00      	nop
        break;
 8004ee4:	e31c      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004ee6:	4b43      	ldr	r3, [pc, #268]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eec:	f003 030c 	and.w	r3, r3, #12
 8004ef0:	613b      	str	r3, [r7, #16]
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	2b0c      	cmp	r3, #12
 8004ef6:	d83a      	bhi.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8004ef8:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8004efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efe:	bf00      	nop
 8004f00:	08004f35 	.word	0x08004f35
 8004f04:	08004f6f 	.word	0x08004f6f
 8004f08:	08004f6f 	.word	0x08004f6f
 8004f0c:	08004f6f 	.word	0x08004f6f
 8004f10:	08004f3d 	.word	0x08004f3d
 8004f14:	08004f6f 	.word	0x08004f6f
 8004f18:	08004f6f 	.word	0x08004f6f
 8004f1c:	08004f6f 	.word	0x08004f6f
 8004f20:	08004f45 	.word	0x08004f45
 8004f24:	08004f6f 	.word	0x08004f6f
 8004f28:	08004f6f 	.word	0x08004f6f
 8004f2c:	08004f6f 	.word	0x08004f6f
 8004f30:	08004f59 	.word	0x08004f59
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f34:	f7ff fa1a 	bl	800436c <HAL_RCC_GetPCLK1Freq>
 8004f38:	61f8      	str	r0, [r7, #28]
          break;
 8004f3a:	e01d      	b.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f3c:	f7ff f97e 	bl	800423c <HAL_RCC_GetSysClockFreq>
 8004f40:	61f8      	str	r0, [r7, #28]
          break;
 8004f42:	e019      	b.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f44:	4b2b      	ldr	r3, [pc, #172]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f50:	d10f      	bne.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8004f52:	4b2a      	ldr	r3, [pc, #168]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004f54:	61fb      	str	r3, [r7, #28]
          break;
 8004f56:	e00c      	b.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f58:	4b26      	ldr	r3, [pc, #152]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d107      	bne.n	8004f76 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8004f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f6a:	61fb      	str	r3, [r7, #28]
          break;
 8004f6c:	e003      	b.n	8004f76 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8004f6e:	bf00      	nop
 8004f70:	e2d6      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004f72:	bf00      	nop
 8004f74:	e2d4      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004f76:	bf00      	nop
        break;
 8004f78:	e2d2      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004f7a:	4b1e      	ldr	r3, [pc, #120]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f84:	613b      	str	r3, [r7, #16]
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	2b30      	cmp	r3, #48	; 0x30
 8004f8a:	d021      	beq.n	8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2b30      	cmp	r3, #48	; 0x30
 8004f90:	d829      	bhi.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b20      	cmp	r3, #32
 8004f96:	d011      	beq.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d823      	bhi.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	2b10      	cmp	r3, #16
 8004fa8:	d004      	beq.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8004faa:	e01c      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004fac:	f7ff f9de 	bl	800436c <HAL_RCC_GetPCLK1Freq>
 8004fb0:	61f8      	str	r0, [r7, #28]
          break;
 8004fb2:	e01d      	b.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8004fb4:	f7ff f942 	bl	800423c <HAL_RCC_GetSysClockFreq>
 8004fb8:	61f8      	str	r0, [r7, #28]
          break;
 8004fba:	e019      	b.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fbc:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc8:	d10f      	bne.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8004fca:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004fcc:	61fb      	str	r3, [r7, #28]
          break;
 8004fce:	e00c      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004fd0:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d107      	bne.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8004fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fe2:	61fb      	str	r3, [r7, #28]
          break;
 8004fe4:	e003      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8004fe6:	bf00      	nop
 8004fe8:	e29a      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004fea:	bf00      	nop
 8004fec:	e298      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004fee:	bf00      	nop
        break;
 8004ff0:	e296      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004ff2:	bf00      	nop
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	08009d3c 	.word	0x08009d3c
 8004ffc:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005000:	4b9b      	ldr	r3, [pc, #620]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005006:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	2bc0      	cmp	r3, #192	; 0xc0
 8005010:	d021      	beq.n	8005056 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2bc0      	cmp	r3, #192	; 0xc0
 8005016:	d829      	bhi.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	2b80      	cmp	r3, #128	; 0x80
 800501c:	d011      	beq.n	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	2b80      	cmp	r3, #128	; 0x80
 8005022:	d823      	bhi.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	2b40      	cmp	r3, #64	; 0x40
 800502e:	d004      	beq.n	800503a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8005030:	e01c      	b.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005032:	f7ff f99b 	bl	800436c <HAL_RCC_GetPCLK1Freq>
 8005036:	61f8      	str	r0, [r7, #28]
          break;
 8005038:	e01d      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 800503a:	f7ff f8ff 	bl	800423c <HAL_RCC_GetSysClockFreq>
 800503e:	61f8      	str	r0, [r7, #28]
          break;
 8005040:	e019      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005042:	4b8b      	ldr	r3, [pc, #556]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800504a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800504e:	d10f      	bne.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8005050:	4b88      	ldr	r3, [pc, #544]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8005052:	61fb      	str	r3, [r7, #28]
          break;
 8005054:	e00c      	b.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005056:	4b86      	ldr	r3, [pc, #536]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b02      	cmp	r3, #2
 8005062:	d107      	bne.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8005064:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005068:	61fb      	str	r3, [r7, #28]
          break;
 800506a:	e003      	b.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 800506c:	bf00      	nop
 800506e:	e257      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005070:	bf00      	nop
 8005072:	e255      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005074:	bf00      	nop
        break;
 8005076:	e253      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005078:	4b7d      	ldr	r3, [pc, #500]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800507a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800508a:	d025      	beq.n	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005092:	d82c      	bhi.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800509a:	d013      	beq.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050a2:	d824      	bhi.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d004      	beq.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050b0:	d004      	beq.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 80050b2:	e01c      	b.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 80050b4:	f7ff f95a 	bl	800436c <HAL_RCC_GetPCLK1Freq>
 80050b8:	61f8      	str	r0, [r7, #28]
          break;
 80050ba:	e01d      	b.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80050bc:	f7ff f8be 	bl	800423c <HAL_RCC_GetSysClockFreq>
 80050c0:	61f8      	str	r0, [r7, #28]
          break;
 80050c2:	e019      	b.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050c4:	4b6a      	ldr	r3, [pc, #424]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d0:	d10f      	bne.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 80050d2:	4b68      	ldr	r3, [pc, #416]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80050d4:	61fb      	str	r3, [r7, #28]
          break;
 80050d6:	e00c      	b.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80050d8:	4b65      	ldr	r3, [pc, #404]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80050da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d107      	bne.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 80050e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ea:	61fb      	str	r3, [r7, #28]
          break;
 80050ec:	e003      	b.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 80050ee:	bf00      	nop
 80050f0:	e216      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80050f2:	bf00      	nop
 80050f4:	e214      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80050f6:	bf00      	nop
        break;
 80050f8:	e212      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80050fa:	4b5d      	ldr	r3, [pc, #372]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005100:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800510c:	d025      	beq.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005114:	d82c      	bhi.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800511c:	d013      	beq.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005124:	d824      	bhi.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d004      	beq.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005132:	d004      	beq.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8005134:	e01c      	b.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005136:	f7ff f919 	bl	800436c <HAL_RCC_GetPCLK1Freq>
 800513a:	61f8      	str	r0, [r7, #28]
          break;
 800513c:	e01d      	b.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 800513e:	f7ff f87d 	bl	800423c <HAL_RCC_GetSysClockFreq>
 8005142:	61f8      	str	r0, [r7, #28]
          break;
 8005144:	e019      	b.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005146:	4b4a      	ldr	r3, [pc, #296]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800514e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005152:	d10f      	bne.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8005154:	4b47      	ldr	r3, [pc, #284]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8005156:	61fb      	str	r3, [r7, #28]
          break;
 8005158:	e00c      	b.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800515a:	4b45      	ldr	r3, [pc, #276]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800515c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b02      	cmp	r3, #2
 8005166:	d107      	bne.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8005168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800516c:	61fb      	str	r3, [r7, #28]
          break;
 800516e:	e003      	b.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8005170:	bf00      	nop
 8005172:	e1d5      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005174:	bf00      	nop
 8005176:	e1d3      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005178:	bf00      	nop
        break;
 800517a:	e1d1      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800517c:	4b3c      	ldr	r3, [pc, #240]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800517e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005182:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005186:	613b      	str	r3, [r7, #16]
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800518e:	d00c      	beq.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005196:	d864      	bhi.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800519e:	d008      	beq.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051a6:	d030      	beq.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80051a8:	e05b      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 80051aa:	f7ff f847 	bl	800423c <HAL_RCC_GetSysClockFreq>
 80051ae:	61f8      	str	r0, [r7, #28]
          break;
 80051b0:	e05c      	b.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80051b2:	4b2f      	ldr	r3, [pc, #188]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051be:	d152      	bne.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80051c0:	4b2b      	ldr	r3, [pc, #172]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d04c      	beq.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80051cc:	4b28      	ldr	r3, [pc, #160]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	0a1b      	lsrs	r3, r3, #8
 80051d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051d6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	fb03 f202 	mul.w	r2, r3, r2
 80051e0:	4b23      	ldr	r3, [pc, #140]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	091b      	lsrs	r3, r3, #4
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	3301      	adds	r3, #1
 80051ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80051f2:	4b1f      	ldr	r3, [pc, #124]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	0e5b      	lsrs	r3, r3, #25
 80051f8:	f003 0303 	and.w	r3, r3, #3
 80051fc:	3301      	adds	r3, #1
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	fbb2 f3f3 	udiv	r3, r2, r3
 8005206:	61fb      	str	r3, [r7, #28]
          break;
 8005208:	e02d      	b.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800520a:	4b19      	ldr	r3, [pc, #100]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005212:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005216:	d128      	bne.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8005218:	4b15      	ldr	r3, [pc, #84]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d022      	beq.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005224:	4b12      	ldr	r3, [pc, #72]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	0a1b      	lsrs	r3, r3, #8
 800522a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800522e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	fb03 f202 	mul.w	r2, r3, r2
 8005238:	4b0d      	ldr	r3, [pc, #52]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	091b      	lsrs	r3, r3, #4
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	3301      	adds	r3, #1
 8005244:	fbb2 f3f3 	udiv	r3, r2, r3
 8005248:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800524a:	4b09      	ldr	r3, [pc, #36]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	0e5b      	lsrs	r3, r3, #25
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	3301      	adds	r3, #1
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	fbb2 f3f3 	udiv	r3, r2, r3
 800525e:	61fb      	str	r3, [r7, #28]
          break;
 8005260:	e003      	b.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8005262:	bf00      	nop
 8005264:	e15c      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005266:	bf00      	nop
 8005268:	e15a      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800526a:	bf00      	nop
        break;
 800526c:	e158      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800526e:	bf00      	nop
 8005270:	40021000 	.word	0x40021000
 8005274:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005278:	4b9d      	ldr	r3, [pc, #628]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800527a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005282:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d103      	bne.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 800528a:	f7ff f885 	bl	8004398 <HAL_RCC_GetPCLK2Freq>
 800528e:	61f8      	str	r0, [r7, #28]
        break;
 8005290:	e146      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8005292:	f7fe ffd3 	bl	800423c <HAL_RCC_GetSysClockFreq>
 8005296:	61f8      	str	r0, [r7, #28]
        break;
 8005298:	e142      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800529a:	4b95      	ldr	r3, [pc, #596]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800529c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80052a4:	613b      	str	r3, [r7, #16]
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ac:	d013      	beq.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b4:	d819      	bhi.n	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d004      	beq.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c2:	d004      	beq.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 80052c4:	e011      	b.n	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 80052c6:	f7ff f851 	bl	800436c <HAL_RCC_GetPCLK1Freq>
 80052ca:	61f8      	str	r0, [r7, #28]
          break;
 80052cc:	e010      	b.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 80052ce:	f7fe ffb5 	bl	800423c <HAL_RCC_GetSysClockFreq>
 80052d2:	61f8      	str	r0, [r7, #28]
          break;
 80052d4:	e00c      	b.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052d6:	4b86      	ldr	r3, [pc, #536]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e2:	d104      	bne.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 80052e4:	4b83      	ldr	r3, [pc, #524]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80052e6:	61fb      	str	r3, [r7, #28]
          break;
 80052e8:	e001      	b.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 80052ea:	bf00      	nop
 80052ec:	e118      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80052ee:	bf00      	nop
        break;
 80052f0:	e116      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80052f2:	4b7f      	ldr	r3, [pc, #508]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80052f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005304:	d013      	beq.n	800532e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800530c:	d819      	bhi.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d004      	beq.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800531a:	d004      	beq.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 800531c:	e011      	b.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 800531e:	f7ff f825 	bl	800436c <HAL_RCC_GetPCLK1Freq>
 8005322:	61f8      	str	r0, [r7, #28]
          break;
 8005324:	e010      	b.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005326:	f7fe ff89 	bl	800423c <HAL_RCC_GetSysClockFreq>
 800532a:	61f8      	str	r0, [r7, #28]
          break;
 800532c:	e00c      	b.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800532e:	4b70      	ldr	r3, [pc, #448]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533a:	d104      	bne.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 800533c:	4b6d      	ldr	r3, [pc, #436]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800533e:	61fb      	str	r3, [r7, #28]
          break;
 8005340:	e001      	b.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8005342:	bf00      	nop
 8005344:	e0ec      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005346:	bf00      	nop
        break;
 8005348:	e0ea      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800534a:	4b69      	ldr	r3, [pc, #420]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005354:	613b      	str	r3, [r7, #16]
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800535c:	d013      	beq.n	8005386 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005364:	d819      	bhi.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d004      	beq.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005372:	d004      	beq.n	800537e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8005374:	e011      	b.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005376:	f7fe fff9 	bl	800436c <HAL_RCC_GetPCLK1Freq>
 800537a:	61f8      	str	r0, [r7, #28]
          break;
 800537c:	e010      	b.n	80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 800537e:	f7fe ff5d 	bl	800423c <HAL_RCC_GetSysClockFreq>
 8005382:	61f8      	str	r0, [r7, #28]
          break;
 8005384:	e00c      	b.n	80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005386:	4b5a      	ldr	r3, [pc, #360]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800538e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005392:	d104      	bne.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8005394:	4b57      	ldr	r3, [pc, #348]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005396:	61fb      	str	r3, [r7, #28]
          break;
 8005398:	e001      	b.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 800539a:	bf00      	nop
 800539c:	e0c0      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800539e:	bf00      	nop
        break;
 80053a0:	e0be      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80053a2:	4b53      	ldr	r3, [pc, #332]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80053a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80053ac:	613b      	str	r3, [r7, #16]
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80053b4:	d02c      	beq.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80053bc:	d833      	bhi.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053c4:	d01a      	beq.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053cc:	d82b      	bhi.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d004      	beq.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053da:	d004      	beq.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 80053dc:	e023      	b.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 80053de:	f7fe ffc5 	bl	800436c <HAL_RCC_GetPCLK1Freq>
 80053e2:	61f8      	str	r0, [r7, #28]
          break;
 80053e4:	e026      	b.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80053e6:	4b42      	ldr	r3, [pc, #264]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80053e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d11a      	bne.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 80053f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80053f8:	61fb      	str	r3, [r7, #28]
          break;
 80053fa:	e016      	b.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053fc:	4b3c      	ldr	r3, [pc, #240]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005408:	d111      	bne.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 800540a:	4b3a      	ldr	r3, [pc, #232]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800540c:	61fb      	str	r3, [r7, #28]
          break;
 800540e:	e00e      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005410:	4b37      	ldr	r3, [pc, #220]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b02      	cmp	r3, #2
 800541c:	d109      	bne.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 800541e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005422:	61fb      	str	r3, [r7, #28]
          break;
 8005424:	e005      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8005426:	bf00      	nop
 8005428:	e07a      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800542a:	bf00      	nop
 800542c:	e078      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800542e:	bf00      	nop
 8005430:	e076      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005432:	bf00      	nop
        break;
 8005434:	e074      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005436:	4b2e      	ldr	r3, [pc, #184]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005448:	d02c      	beq.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005450:	d833      	bhi.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005458:	d01a      	beq.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005460:	d82b      	bhi.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d004      	beq.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800546e:	d004      	beq.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8005470:	e023      	b.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005472:	f7fe ff7b 	bl	800436c <HAL_RCC_GetPCLK1Freq>
 8005476:	61f8      	str	r0, [r7, #28]
          break;
 8005478:	e026      	b.n	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800547a:	4b1d      	ldr	r3, [pc, #116]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800547c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b02      	cmp	r3, #2
 8005486:	d11a      	bne.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8005488:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800548c:	61fb      	str	r3, [r7, #28]
          break;
 800548e:	e016      	b.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005490:	4b17      	ldr	r3, [pc, #92]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800549c:	d111      	bne.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 800549e:	4b15      	ldr	r3, [pc, #84]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80054a0:	61fb      	str	r3, [r7, #28]
          break;
 80054a2:	e00e      	b.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80054a4:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d109      	bne.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 80054b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054b6:	61fb      	str	r3, [r7, #28]
          break;
 80054b8:	e005      	b.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 80054ba:	bf00      	nop
 80054bc:	e030      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80054be:	bf00      	nop
 80054c0:	e02e      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80054c2:	bf00      	nop
 80054c4:	e02c      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80054c6:	bf00      	nop
        break;
 80054c8:	e02a      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80054ca:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054d4:	613b      	str	r3, [r7, #16]
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d004      	beq.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e2:	d009      	beq.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 80054e4:	e012      	b.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80054e6:	f7fe ff41 	bl	800436c <HAL_RCC_GetPCLK1Freq>
 80054ea:	61f8      	str	r0, [r7, #28]
          break;
 80054ec:	e00e      	b.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 80054ee:	bf00      	nop
 80054f0:	40021000 	.word	0x40021000
 80054f4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054f8:	4b0c      	ldr	r3, [pc, #48]	; (800552c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005504:	d101      	bne.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8005506:	4b0a      	ldr	r3, [pc, #40]	; (8005530 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005508:	61fb      	str	r3, [r7, #28]
          break;
 800550a:	bf00      	nop
        break;
 800550c:	e008      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800550e:	bf00      	nop
 8005510:	e006      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005512:	bf00      	nop
 8005514:	e004      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005516:	bf00      	nop
 8005518:	e002      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800551a:	bf00      	nop
 800551c:	e000      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800551e:	bf00      	nop
    }
  }

  return(frequency);
 8005520:	69fb      	ldr	r3, [r7, #28]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3720      	adds	r7, #32
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	40021000 	.word	0x40021000
 8005530:	00f42400 	.word	0x00f42400

08005534 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005538:	4b05      	ldr	r3, [pc, #20]	; (8005550 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a04      	ldr	r2, [pc, #16]	; (8005550 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800553e:	f043 0304 	orr.w	r3, r3, #4
 8005542:	6013      	str	r3, [r2, #0]
}
 8005544:	bf00      	nop
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	40021000 	.word	0x40021000

08005554 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005562:	4b75      	ldr	r3, [pc, #468]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d018      	beq.n	80055a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800556e:	4b72      	ldr	r3, [pc, #456]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f003 0203 	and.w	r2, r3, #3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d10d      	bne.n	800559a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
       ||
 8005582:	2b00      	cmp	r3, #0
 8005584:	d009      	beq.n	800559a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005586:	4b6c      	ldr	r3, [pc, #432]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	091b      	lsrs	r3, r3, #4
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
       ||
 8005596:	429a      	cmp	r2, r3
 8005598:	d047      	beq.n	800562a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	73fb      	strb	r3, [r7, #15]
 800559e:	e044      	b.n	800562a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d018      	beq.n	80055da <RCCEx_PLLSAI1_Config+0x86>
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d825      	bhi.n	80055f8 <RCCEx_PLLSAI1_Config+0xa4>
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d002      	beq.n	80055b6 <RCCEx_PLLSAI1_Config+0x62>
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d009      	beq.n	80055c8 <RCCEx_PLLSAI1_Config+0x74>
 80055b4:	e020      	b.n	80055f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055b6:	4b60      	ldr	r3, [pc, #384]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d11d      	bne.n	80055fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055c6:	e01a      	b.n	80055fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055c8:	4b5b      	ldr	r3, [pc, #364]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d116      	bne.n	8005602 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055d8:	e013      	b.n	8005602 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055da:	4b57      	ldr	r3, [pc, #348]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10f      	bne.n	8005606 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055e6:	4b54      	ldr	r3, [pc, #336]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d109      	bne.n	8005606 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055f6:	e006      	b.n	8005606 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	73fb      	strb	r3, [r7, #15]
      break;
 80055fc:	e004      	b.n	8005608 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055fe:	bf00      	nop
 8005600:	e002      	b.n	8005608 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005602:	bf00      	nop
 8005604:	e000      	b.n	8005608 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005606:	bf00      	nop
    }

    if(status == HAL_OK)
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10d      	bne.n	800562a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800560e:	4b4a      	ldr	r3, [pc, #296]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6819      	ldr	r1, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	3b01      	subs	r3, #1
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	430b      	orrs	r3, r1
 8005624:	4944      	ldr	r1, [pc, #272]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005626:	4313      	orrs	r3, r2
 8005628:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d17d      	bne.n	800572c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005630:	4b41      	ldr	r3, [pc, #260]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a40      	ldr	r2, [pc, #256]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005636:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800563a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800563c:	f7fb ff3e 	bl	80014bc <HAL_GetTick>
 8005640:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005642:	e009      	b.n	8005658 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005644:	f7fb ff3a 	bl	80014bc <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d902      	bls.n	8005658 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	73fb      	strb	r3, [r7, #15]
        break;
 8005656:	e005      	b.n	8005664 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005658:	4b37      	ldr	r3, [pc, #220]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1ef      	bne.n	8005644 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d160      	bne.n	800572c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d111      	bne.n	8005694 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005670:	4b31      	ldr	r3, [pc, #196]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6892      	ldr	r2, [r2, #8]
 8005680:	0211      	lsls	r1, r2, #8
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	68d2      	ldr	r2, [r2, #12]
 8005686:	0912      	lsrs	r2, r2, #4
 8005688:	0452      	lsls	r2, r2, #17
 800568a:	430a      	orrs	r2, r1
 800568c:	492a      	ldr	r1, [pc, #168]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 800568e:	4313      	orrs	r3, r2
 8005690:	610b      	str	r3, [r1, #16]
 8005692:	e027      	b.n	80056e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d112      	bne.n	80056c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800569a:	4b27      	ldr	r3, [pc, #156]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80056a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	6892      	ldr	r2, [r2, #8]
 80056aa:	0211      	lsls	r1, r2, #8
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6912      	ldr	r2, [r2, #16]
 80056b0:	0852      	lsrs	r2, r2, #1
 80056b2:	3a01      	subs	r2, #1
 80056b4:	0552      	lsls	r2, r2, #21
 80056b6:	430a      	orrs	r2, r1
 80056b8:	491f      	ldr	r1, [pc, #124]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	610b      	str	r3, [r1, #16]
 80056be:	e011      	b.n	80056e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056c0:	4b1d      	ldr	r3, [pc, #116]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80056c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6892      	ldr	r2, [r2, #8]
 80056d0:	0211      	lsls	r1, r2, #8
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6952      	ldr	r2, [r2, #20]
 80056d6:	0852      	lsrs	r2, r2, #1
 80056d8:	3a01      	subs	r2, #1
 80056da:	0652      	lsls	r2, r2, #25
 80056dc:	430a      	orrs	r2, r1
 80056de:	4916      	ldr	r1, [pc, #88]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056e4:	4b14      	ldr	r3, [pc, #80]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a13      	ldr	r2, [pc, #76]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f0:	f7fb fee4 	bl	80014bc <HAL_GetTick>
 80056f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056f6:	e009      	b.n	800570c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056f8:	f7fb fee0 	bl	80014bc <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d902      	bls.n	800570c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	73fb      	strb	r3, [r7, #15]
          break;
 800570a:	e005      	b.n	8005718 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800570c:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0ef      	beq.n	80056f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005718:	7bfb      	ldrb	r3, [r7, #15]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d106      	bne.n	800572c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800571e:	4b06      	ldr	r3, [pc, #24]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	4904      	ldr	r1, [pc, #16]	; (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005728:	4313      	orrs	r3, r2
 800572a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800572c:	7bfb      	ldrb	r3, [r7, #15]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	40021000 	.word	0x40021000

0800573c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800574a:	4b6a      	ldr	r3, [pc, #424]	; (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f003 0303 	and.w	r3, r3, #3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d018      	beq.n	8005788 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005756:	4b67      	ldr	r3, [pc, #412]	; (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f003 0203 	and.w	r2, r3, #3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d10d      	bne.n	8005782 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
       ||
 800576a:	2b00      	cmp	r3, #0
 800576c:	d009      	beq.n	8005782 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800576e:	4b61      	ldr	r3, [pc, #388]	; (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	091b      	lsrs	r3, r3, #4
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	1c5a      	adds	r2, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
       ||
 800577e:	429a      	cmp	r2, r3
 8005780:	d047      	beq.n	8005812 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	73fb      	strb	r3, [r7, #15]
 8005786:	e044      	b.n	8005812 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b03      	cmp	r3, #3
 800578e:	d018      	beq.n	80057c2 <RCCEx_PLLSAI2_Config+0x86>
 8005790:	2b03      	cmp	r3, #3
 8005792:	d825      	bhi.n	80057e0 <RCCEx_PLLSAI2_Config+0xa4>
 8005794:	2b01      	cmp	r3, #1
 8005796:	d002      	beq.n	800579e <RCCEx_PLLSAI2_Config+0x62>
 8005798:	2b02      	cmp	r3, #2
 800579a:	d009      	beq.n	80057b0 <RCCEx_PLLSAI2_Config+0x74>
 800579c:	e020      	b.n	80057e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800579e:	4b55      	ldr	r3, [pc, #340]	; (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d11d      	bne.n	80057e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ae:	e01a      	b.n	80057e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057b0:	4b50      	ldr	r3, [pc, #320]	; (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d116      	bne.n	80057ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057c0:	e013      	b.n	80057ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057c2:	4b4c      	ldr	r3, [pc, #304]	; (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10f      	bne.n	80057ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057ce:	4b49      	ldr	r3, [pc, #292]	; (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d109      	bne.n	80057ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057de:	e006      	b.n	80057ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	73fb      	strb	r3, [r7, #15]
      break;
 80057e4:	e004      	b.n	80057f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057e6:	bf00      	nop
 80057e8:	e002      	b.n	80057f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057ea:	bf00      	nop
 80057ec:	e000      	b.n	80057f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10d      	bne.n	8005812 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057f6:	4b3f      	ldr	r3, [pc, #252]	; (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6819      	ldr	r1, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	3b01      	subs	r3, #1
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	430b      	orrs	r3, r1
 800580c:	4939      	ldr	r1, [pc, #228]	; (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800580e:	4313      	orrs	r3, r2
 8005810:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005812:	7bfb      	ldrb	r3, [r7, #15]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d167      	bne.n	80058e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005818:	4b36      	ldr	r3, [pc, #216]	; (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a35      	ldr	r2, [pc, #212]	; (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800581e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005822:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005824:	f7fb fe4a 	bl	80014bc <HAL_GetTick>
 8005828:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800582a:	e009      	b.n	8005840 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800582c:	f7fb fe46 	bl	80014bc <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d902      	bls.n	8005840 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	73fb      	strb	r3, [r7, #15]
        break;
 800583e:	e005      	b.n	800584c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005840:	4b2c      	ldr	r3, [pc, #176]	; (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1ef      	bne.n	800582c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d14a      	bne.n	80058e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d111      	bne.n	800587c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005858:	4b26      	ldr	r3, [pc, #152]	; (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6892      	ldr	r2, [r2, #8]
 8005868:	0211      	lsls	r1, r2, #8
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	68d2      	ldr	r2, [r2, #12]
 800586e:	0912      	lsrs	r2, r2, #4
 8005870:	0452      	lsls	r2, r2, #17
 8005872:	430a      	orrs	r2, r1
 8005874:	491f      	ldr	r1, [pc, #124]	; (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005876:	4313      	orrs	r3, r2
 8005878:	614b      	str	r3, [r1, #20]
 800587a:	e011      	b.n	80058a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800587c:	4b1d      	ldr	r3, [pc, #116]	; (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005884:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6892      	ldr	r2, [r2, #8]
 800588c:	0211      	lsls	r1, r2, #8
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6912      	ldr	r2, [r2, #16]
 8005892:	0852      	lsrs	r2, r2, #1
 8005894:	3a01      	subs	r2, #1
 8005896:	0652      	lsls	r2, r2, #25
 8005898:	430a      	orrs	r2, r1
 800589a:	4916      	ldr	r1, [pc, #88]	; (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800589c:	4313      	orrs	r3, r2
 800589e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80058a0:	4b14      	ldr	r3, [pc, #80]	; (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a13      	ldr	r2, [pc, #76]	; (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ac:	f7fb fe06 	bl	80014bc <HAL_GetTick>
 80058b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058b2:	e009      	b.n	80058c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058b4:	f7fb fe02 	bl	80014bc <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d902      	bls.n	80058c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	73fb      	strb	r3, [r7, #15]
          break;
 80058c6:	e005      	b.n	80058d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058c8:	4b0a      	ldr	r3, [pc, #40]	; (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d0ef      	beq.n	80058b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d106      	bne.n	80058e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80058da:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058dc:	695a      	ldr	r2, [r3, #20]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	4904      	ldr	r1, [pc, #16]	; (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	40021000 	.word	0x40021000

080058f8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b089      	sub	sp, #36	; 0x24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005914:	d10c      	bne.n	8005930 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005916:	4b6e      	ldr	r3, [pc, #440]	; (8005ad0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005920:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005928:	d112      	bne.n	8005950 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800592a:	4b6a      	ldr	r3, [pc, #424]	; (8005ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800592c:	61fb      	str	r3, [r7, #28]
 800592e:	e00f      	b.n	8005950 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005936:	d10b      	bne.n	8005950 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005938:	4b65      	ldr	r3, [pc, #404]	; (8005ad0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800593a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005942:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800594a:	d101      	bne.n	8005950 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800594c:	4b61      	ldr	r3, [pc, #388]	; (8005ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800594e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	2b00      	cmp	r3, #0
 8005954:	f040 80b4 	bne.w	8005ac0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005962:	d003      	beq.n	800596c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800596a:	d135      	bne.n	80059d8 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800596c:	4b58      	ldr	r3, [pc, #352]	; (8005ad0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005974:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005978:	f040 80a1 	bne.w	8005abe <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 800597c:	4b54      	ldr	r3, [pc, #336]	; (8005ad0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 809a 	beq.w	8005abe <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800598a:	4b51      	ldr	r3, [pc, #324]	; (8005ad0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	091b      	lsrs	r3, r3, #4
 8005990:	f003 0307 	and.w	r3, r3, #7
 8005994:	3301      	adds	r3, #1
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	fbb2 f3f3 	udiv	r3, r2, r3
 800599c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800599e:	4b4c      	ldr	r3, [pc, #304]	; (8005ad0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	0a1b      	lsrs	r3, r3, #8
 80059a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059a8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10a      	bne.n	80059c6 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80059b0:	4b47      	ldr	r3, [pc, #284]	; (8005ad0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80059bc:	2311      	movs	r3, #17
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	e001      	b.n	80059c6 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80059c2:	2307      	movs	r3, #7
 80059c4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	fb03 f202 	mul.w	r2, r3, r2
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80059d6:	e072      	b.n	8005abe <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d133      	bne.n	8005a46 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80059de:	4b3c      	ldr	r3, [pc, #240]	; (8005ad0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059ea:	d169      	bne.n	8005ac0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80059ec:	4b38      	ldr	r3, [pc, #224]	; (8005ad0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d063      	beq.n	8005ac0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80059f8:	4b35      	ldr	r3, [pc, #212]	; (8005ad0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	091b      	lsrs	r3, r3, #4
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	3301      	adds	r3, #1
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005a0c:	4b30      	ldr	r3, [pc, #192]	; (8005ad0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	0a1b      	lsrs	r3, r3, #8
 8005a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a16:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005a1e:	4b2c      	ldr	r3, [pc, #176]	; (8005ad0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8005a2a:	2311      	movs	r3, #17
 8005a2c:	617b      	str	r3, [r7, #20]
 8005a2e:	e001      	b.n	8005a34 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8005a30:	2307      	movs	r3, #7
 8005a32:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	fb03 f202 	mul.w	r2, r3, r2
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a42:	61fb      	str	r3, [r7, #28]
 8005a44:	e03c      	b.n	8005ac0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a4c:	d003      	beq.n	8005a56 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a54:	d134      	bne.n	8005ac0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005a56:	4b1e      	ldr	r3, [pc, #120]	; (8005ad0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a62:	d12d      	bne.n	8005ac0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005a64:	4b1a      	ldr	r3, [pc, #104]	; (8005ad0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d027      	beq.n	8005ac0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005a70:	4b17      	ldr	r3, [pc, #92]	; (8005ad0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	091b      	lsrs	r3, r3, #4
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a82:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005a84:	4b12      	ldr	r3, [pc, #72]	; (8005ad0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	0a1b      	lsrs	r3, r3, #8
 8005a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a8e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10a      	bne.n	8005aac <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005a96:	4b0e      	ldr	r3, [pc, #56]	; (8005ad0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8005aa2:	2311      	movs	r3, #17
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	e001      	b.n	8005aac <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8005aa8:	2307      	movs	r3, #7
 8005aaa:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	fb03 f202 	mul.w	r2, r3, r2
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aba:	61fb      	str	r3, [r7, #28]
 8005abc:	e000      	b.n	8005ac0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005abe:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005ac0:	69fb      	ldr	r3, [r7, #28]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3724      	adds	r7, #36	; 0x24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	001fff68 	.word	0x001fff68

08005ad8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e155      	b.n	8005d96 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d106      	bne.n	8005b04 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7fb fb4e 	bl	80011a0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f959 	bl	8005dbc <SAI_Disable>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e140      	b.n	8005d96 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d00c      	beq.n	8005b3e <HAL_SAI_Init+0x66>
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d80d      	bhi.n	8005b44 <HAL_SAI_Init+0x6c>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <HAL_SAI_Init+0x5a>
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d003      	beq.n	8005b38 <HAL_SAI_Init+0x60>
 8005b30:	e008      	b.n	8005b44 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	61fb      	str	r3, [r7, #28]
      break;
 8005b36:	e008      	b.n	8005b4a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005b38:	2310      	movs	r3, #16
 8005b3a:	61fb      	str	r3, [r7, #28]
      break;
 8005b3c:	e005      	b.n	8005b4a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005b3e:	2320      	movs	r3, #32
 8005b40:	61fb      	str	r3, [r7, #28]
      break;
 8005b42:	e002      	b.n	8005b4a <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	61fb      	str	r3, [r7, #28]
      break;
 8005b48:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d81d      	bhi.n	8005b8e <HAL_SAI_Init+0xb6>
 8005b52:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <HAL_SAI_Init+0x80>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b69 	.word	0x08005b69
 8005b5c:	08005b6f 	.word	0x08005b6f
 8005b60:	08005b77 	.word	0x08005b77
 8005b64:	08005b7f 	.word	0x08005b7f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]
      break;
 8005b6c:	e012      	b.n	8005b94 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b72:	617b      	str	r3, [r7, #20]
      break;
 8005b74:	e00e      	b.n	8005b94 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005b76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b7a:	617b      	str	r3, [r7, #20]
      break;
 8005b7c:	e00a      	b.n	8005b94 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005b7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b82:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	f043 0301 	orr.w	r3, r3, #1
 8005b8a:	61fb      	str	r3, [r7, #28]
      break;
 8005b8c:	e002      	b.n	8005b94 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	617b      	str	r3, [r7, #20]
      break;
 8005b92:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a81      	ldr	r2, [pc, #516]	; (8005da0 <HAL_SAI_Init+0x2c8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d004      	beq.n	8005ba8 <HAL_SAI_Init+0xd0>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a80      	ldr	r2, [pc, #512]	; (8005da4 <HAL_SAI_Init+0x2cc>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d103      	bne.n	8005bb0 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8005ba8:	4a7f      	ldr	r2, [pc, #508]	; (8005da8 <HAL_SAI_Init+0x2d0>)
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	e002      	b.n	8005bb6 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005bb0:	4a7e      	ldr	r2, [pc, #504]	; (8005dac <HAL_SAI_Init+0x2d4>)
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d041      	beq.n	8005c42 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a77      	ldr	r2, [pc, #476]	; (8005da0 <HAL_SAI_Init+0x2c8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d004      	beq.n	8005bd2 <HAL_SAI_Init+0xfa>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a75      	ldr	r2, [pc, #468]	; (8005da4 <HAL_SAI_Init+0x2cc>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d105      	bne.n	8005bde <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005bd2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005bd6:	f7fe ff3f 	bl	8004a58 <HAL_RCCEx_GetPeriphCLKFreq>
 8005bda:	6138      	str	r0, [r7, #16]
 8005bdc:	e004      	b.n	8005be8 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005bde:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005be2:	f7fe ff39 	bl	8004a58 <HAL_RCCEx_GetPeriphCLKFreq>
 8005be6:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4613      	mov	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	025b      	lsls	r3, r3, #9
 8005bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfe:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4a6b      	ldr	r2, [pc, #428]	; (8005db0 <HAL_SAI_Init+0x2d8>)
 8005c04:	fba2 2303 	umull	r2, r3, r2, r3
 8005c08:	08da      	lsrs	r2, r3, #3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005c0e:	68f9      	ldr	r1, [r7, #12]
 8005c10:	4b67      	ldr	r3, [pc, #412]	; (8005db0 <HAL_SAI_Init+0x2d8>)
 8005c12:	fba3 2301 	umull	r2, r3, r3, r1
 8005c16:	08da      	lsrs	r2, r3, #3
 8005c18:	4613      	mov	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	1aca      	subs	r2, r1, r3
 8005c22:	2a08      	cmp	r2, #8
 8005c24:	d904      	bls.n	8005c30 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	d104      	bne.n	8005c42 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	085a      	lsrs	r2, r3, #1
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_SAI_Init+0x17a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d109      	bne.n	8005c66 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d101      	bne.n	8005c5e <HAL_SAI_Init+0x186>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e001      	b.n	8005c62 <HAL_SAI_Init+0x18a>
 8005c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c62:	61bb      	str	r3, [r7, #24]
 8005c64:	e008      	b.n	8005c78 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d102      	bne.n	8005c74 <HAL_SAI_Init+0x19c>
 8005c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c72:	e000      	b.n	8005c76 <HAL_SAI_Init+0x19e>
 8005c74:	2300      	movs	r3, #0
 8005c76:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6819      	ldr	r1, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	4b4c      	ldr	r3, [pc, #304]	; (8005db4 <HAL_SAI_Init+0x2dc>)
 8005c84:	400b      	ands	r3, r1
 8005c86:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6819      	ldr	r1, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c96:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005c9c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8005cb0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005cbc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	051b      	lsls	r3, r3, #20
 8005cc4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6812      	ldr	r2, [r2, #0]
 8005cd8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005cdc:	f023 030f 	bic.w	r3, r3, #15
 8005ce0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6859      	ldr	r1, [r3, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	699a      	ldr	r2, [r3, #24]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6899      	ldr	r1, [r3, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	4b2b      	ldr	r3, [pc, #172]	; (8005db8 <HAL_SAI_Init+0x2e0>)
 8005d0c:	400b      	ands	r3, r1
 8005d0e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6899      	ldr	r1, [r3, #8]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005d20:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8005d26:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005d2c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d32:	3b01      	subs	r3, #1
 8005d34:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005d36:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68d9      	ldr	r1, [r3, #12]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005d4e:	400b      	ands	r3, r1
 8005d50:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68d9      	ldr	r1, [r3, #12]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d60:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d66:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005d68:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	021b      	lsls	r3, r3, #8
 8005d72:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3720      	adds	r7, #32
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	40015404 	.word	0x40015404
 8005da4:	40015424 	.word	0x40015424
 8005da8:	40015400 	.word	0x40015400
 8005dac:	40015800 	.word	0x40015800
 8005db0:	cccccccd 	.word	0xcccccccd
 8005db4:	ff05c010 	.word	0xff05c010
 8005db8:	fff88000 	.word	0xfff88000

08005dbc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005dc4:	4b18      	ldr	r3, [pc, #96]	; (8005e28 <SAI_Disable+0x6c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a18      	ldr	r2, [pc, #96]	; (8005e2c <SAI_Disable+0x70>)
 8005dca:	fba2 2303 	umull	r2, r3, r2, r3
 8005dce:	0b1b      	lsrs	r3, r3, #12
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005de6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10a      	bne.n	8005e04 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005df4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	72fb      	strb	r3, [r7, #11]
      break;
 8005e02:	e009      	b.n	8005e18 <SAI_Disable+0x5c>
    }
    count--;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1e7      	bne.n	8005de8 <SAI_Disable+0x2c>

  return status;
 8005e18:	7afb      	ldrb	r3, [r7, #11]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	20000000 	.word	0x20000000
 8005e2c:	95cbec1b 	.word	0x95cbec1b

08005e30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e095      	b.n	8005f6e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d108      	bne.n	8005e5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e52:	d009      	beq.n	8005e68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	61da      	str	r2, [r3, #28]
 8005e5a:	e005      	b.n	8005e68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d106      	bne.n	8005e88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7fb f8ea 	bl	800105c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ea8:	d902      	bls.n	8005eb0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	e002      	b.n	8005eb6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005eb4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005ebe:	d007      	beq.n	8005ed0 <HAL_SPI_Init+0xa0>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ec8:	d002      	beq.n	8005ed0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	431a      	orrs	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005efe:	431a      	orrs	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f12:	ea42 0103 	orr.w	r1, r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	0c1b      	lsrs	r3, r3, #16
 8005f2c:	f003 0204 	and.w	r2, r3, #4
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	f003 0310 	and.w	r3, r3, #16
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3e:	f003 0308 	and.w	r3, r3, #8
 8005f42:	431a      	orrs	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f4c:	ea42 0103 	orr.w	r1, r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b082      	sub	sp, #8
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e040      	b.n	800600a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d106      	bne.n	8005f9e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7fb f8a3 	bl	80010e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2224      	movs	r2, #36	; 0x24
 8005fa2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 0201 	bic.w	r2, r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f82d 	bl	8006014 <UART_SetConfig>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d101      	bne.n	8005fc4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e022      	b.n	800600a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fad9 	bl	8006584 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fe0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ff0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f042 0201 	orr.w	r2, r2, #1
 8006000:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fb60 	bl	80066c8 <UART_CheckIdleState>
 8006008:	4603      	mov	r3, r0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
	...

08006014 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006018:	b08a      	sub	sp, #40	; 0x28
 800601a:	af00      	add	r7, sp, #0
 800601c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	431a      	orrs	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	431a      	orrs	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	4313      	orrs	r3, r2
 800603a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	4ba4      	ldr	r3, [pc, #656]	; (80062d4 <UART_SetConfig+0x2c0>)
 8006044:	4013      	ands	r3, r2
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	6812      	ldr	r2, [r2, #0]
 800604a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800604c:	430b      	orrs	r3, r1
 800604e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a99      	ldr	r2, [pc, #612]	; (80062d8 <UART_SetConfig+0x2c4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d004      	beq.n	8006080 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800607c:	4313      	orrs	r3, r2
 800607e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006090:	430a      	orrs	r2, r1
 8006092:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a90      	ldr	r2, [pc, #576]	; (80062dc <UART_SetConfig+0x2c8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d126      	bne.n	80060ec <UART_SetConfig+0xd8>
 800609e:	4b90      	ldr	r3, [pc, #576]	; (80062e0 <UART_SetConfig+0x2cc>)
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a4:	f003 0303 	and.w	r3, r3, #3
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d81b      	bhi.n	80060e4 <UART_SetConfig+0xd0>
 80060ac:	a201      	add	r2, pc, #4	; (adr r2, 80060b4 <UART_SetConfig+0xa0>)
 80060ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b2:	bf00      	nop
 80060b4:	080060c5 	.word	0x080060c5
 80060b8:	080060d5 	.word	0x080060d5
 80060bc:	080060cd 	.word	0x080060cd
 80060c0:	080060dd 	.word	0x080060dd
 80060c4:	2301      	movs	r3, #1
 80060c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ca:	e116      	b.n	80062fa <UART_SetConfig+0x2e6>
 80060cc:	2302      	movs	r3, #2
 80060ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060d2:	e112      	b.n	80062fa <UART_SetConfig+0x2e6>
 80060d4:	2304      	movs	r3, #4
 80060d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060da:	e10e      	b.n	80062fa <UART_SetConfig+0x2e6>
 80060dc:	2308      	movs	r3, #8
 80060de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060e2:	e10a      	b.n	80062fa <UART_SetConfig+0x2e6>
 80060e4:	2310      	movs	r3, #16
 80060e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ea:	e106      	b.n	80062fa <UART_SetConfig+0x2e6>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a7c      	ldr	r2, [pc, #496]	; (80062e4 <UART_SetConfig+0x2d0>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d138      	bne.n	8006168 <UART_SetConfig+0x154>
 80060f6:	4b7a      	ldr	r3, [pc, #488]	; (80062e0 <UART_SetConfig+0x2cc>)
 80060f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fc:	f003 030c 	and.w	r3, r3, #12
 8006100:	2b0c      	cmp	r3, #12
 8006102:	d82d      	bhi.n	8006160 <UART_SetConfig+0x14c>
 8006104:	a201      	add	r2, pc, #4	; (adr r2, 800610c <UART_SetConfig+0xf8>)
 8006106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610a:	bf00      	nop
 800610c:	08006141 	.word	0x08006141
 8006110:	08006161 	.word	0x08006161
 8006114:	08006161 	.word	0x08006161
 8006118:	08006161 	.word	0x08006161
 800611c:	08006151 	.word	0x08006151
 8006120:	08006161 	.word	0x08006161
 8006124:	08006161 	.word	0x08006161
 8006128:	08006161 	.word	0x08006161
 800612c:	08006149 	.word	0x08006149
 8006130:	08006161 	.word	0x08006161
 8006134:	08006161 	.word	0x08006161
 8006138:	08006161 	.word	0x08006161
 800613c:	08006159 	.word	0x08006159
 8006140:	2300      	movs	r3, #0
 8006142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006146:	e0d8      	b.n	80062fa <UART_SetConfig+0x2e6>
 8006148:	2302      	movs	r3, #2
 800614a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800614e:	e0d4      	b.n	80062fa <UART_SetConfig+0x2e6>
 8006150:	2304      	movs	r3, #4
 8006152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006156:	e0d0      	b.n	80062fa <UART_SetConfig+0x2e6>
 8006158:	2308      	movs	r3, #8
 800615a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800615e:	e0cc      	b.n	80062fa <UART_SetConfig+0x2e6>
 8006160:	2310      	movs	r3, #16
 8006162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006166:	e0c8      	b.n	80062fa <UART_SetConfig+0x2e6>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a5e      	ldr	r2, [pc, #376]	; (80062e8 <UART_SetConfig+0x2d4>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d125      	bne.n	80061be <UART_SetConfig+0x1aa>
 8006172:	4b5b      	ldr	r3, [pc, #364]	; (80062e0 <UART_SetConfig+0x2cc>)
 8006174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006178:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800617c:	2b30      	cmp	r3, #48	; 0x30
 800617e:	d016      	beq.n	80061ae <UART_SetConfig+0x19a>
 8006180:	2b30      	cmp	r3, #48	; 0x30
 8006182:	d818      	bhi.n	80061b6 <UART_SetConfig+0x1a2>
 8006184:	2b20      	cmp	r3, #32
 8006186:	d00a      	beq.n	800619e <UART_SetConfig+0x18a>
 8006188:	2b20      	cmp	r3, #32
 800618a:	d814      	bhi.n	80061b6 <UART_SetConfig+0x1a2>
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <UART_SetConfig+0x182>
 8006190:	2b10      	cmp	r3, #16
 8006192:	d008      	beq.n	80061a6 <UART_SetConfig+0x192>
 8006194:	e00f      	b.n	80061b6 <UART_SetConfig+0x1a2>
 8006196:	2300      	movs	r3, #0
 8006198:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800619c:	e0ad      	b.n	80062fa <UART_SetConfig+0x2e6>
 800619e:	2302      	movs	r3, #2
 80061a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061a4:	e0a9      	b.n	80062fa <UART_SetConfig+0x2e6>
 80061a6:	2304      	movs	r3, #4
 80061a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ac:	e0a5      	b.n	80062fa <UART_SetConfig+0x2e6>
 80061ae:	2308      	movs	r3, #8
 80061b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061b4:	e0a1      	b.n	80062fa <UART_SetConfig+0x2e6>
 80061b6:	2310      	movs	r3, #16
 80061b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061bc:	e09d      	b.n	80062fa <UART_SetConfig+0x2e6>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a4a      	ldr	r2, [pc, #296]	; (80062ec <UART_SetConfig+0x2d8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d125      	bne.n	8006214 <UART_SetConfig+0x200>
 80061c8:	4b45      	ldr	r3, [pc, #276]	; (80062e0 <UART_SetConfig+0x2cc>)
 80061ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061d2:	2bc0      	cmp	r3, #192	; 0xc0
 80061d4:	d016      	beq.n	8006204 <UART_SetConfig+0x1f0>
 80061d6:	2bc0      	cmp	r3, #192	; 0xc0
 80061d8:	d818      	bhi.n	800620c <UART_SetConfig+0x1f8>
 80061da:	2b80      	cmp	r3, #128	; 0x80
 80061dc:	d00a      	beq.n	80061f4 <UART_SetConfig+0x1e0>
 80061de:	2b80      	cmp	r3, #128	; 0x80
 80061e0:	d814      	bhi.n	800620c <UART_SetConfig+0x1f8>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <UART_SetConfig+0x1d8>
 80061e6:	2b40      	cmp	r3, #64	; 0x40
 80061e8:	d008      	beq.n	80061fc <UART_SetConfig+0x1e8>
 80061ea:	e00f      	b.n	800620c <UART_SetConfig+0x1f8>
 80061ec:	2300      	movs	r3, #0
 80061ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061f2:	e082      	b.n	80062fa <UART_SetConfig+0x2e6>
 80061f4:	2302      	movs	r3, #2
 80061f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061fa:	e07e      	b.n	80062fa <UART_SetConfig+0x2e6>
 80061fc:	2304      	movs	r3, #4
 80061fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006202:	e07a      	b.n	80062fa <UART_SetConfig+0x2e6>
 8006204:	2308      	movs	r3, #8
 8006206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800620a:	e076      	b.n	80062fa <UART_SetConfig+0x2e6>
 800620c:	2310      	movs	r3, #16
 800620e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006212:	e072      	b.n	80062fa <UART_SetConfig+0x2e6>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a35      	ldr	r2, [pc, #212]	; (80062f0 <UART_SetConfig+0x2dc>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d12a      	bne.n	8006274 <UART_SetConfig+0x260>
 800621e:	4b30      	ldr	r3, [pc, #192]	; (80062e0 <UART_SetConfig+0x2cc>)
 8006220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006228:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800622c:	d01a      	beq.n	8006264 <UART_SetConfig+0x250>
 800622e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006232:	d81b      	bhi.n	800626c <UART_SetConfig+0x258>
 8006234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006238:	d00c      	beq.n	8006254 <UART_SetConfig+0x240>
 800623a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800623e:	d815      	bhi.n	800626c <UART_SetConfig+0x258>
 8006240:	2b00      	cmp	r3, #0
 8006242:	d003      	beq.n	800624c <UART_SetConfig+0x238>
 8006244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006248:	d008      	beq.n	800625c <UART_SetConfig+0x248>
 800624a:	e00f      	b.n	800626c <UART_SetConfig+0x258>
 800624c:	2300      	movs	r3, #0
 800624e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006252:	e052      	b.n	80062fa <UART_SetConfig+0x2e6>
 8006254:	2302      	movs	r3, #2
 8006256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800625a:	e04e      	b.n	80062fa <UART_SetConfig+0x2e6>
 800625c:	2304      	movs	r3, #4
 800625e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006262:	e04a      	b.n	80062fa <UART_SetConfig+0x2e6>
 8006264:	2308      	movs	r3, #8
 8006266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800626a:	e046      	b.n	80062fa <UART_SetConfig+0x2e6>
 800626c:	2310      	movs	r3, #16
 800626e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006272:	e042      	b.n	80062fa <UART_SetConfig+0x2e6>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a17      	ldr	r2, [pc, #92]	; (80062d8 <UART_SetConfig+0x2c4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d13a      	bne.n	80062f4 <UART_SetConfig+0x2e0>
 800627e:	4b18      	ldr	r3, [pc, #96]	; (80062e0 <UART_SetConfig+0x2cc>)
 8006280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006284:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006288:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800628c:	d01a      	beq.n	80062c4 <UART_SetConfig+0x2b0>
 800628e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006292:	d81b      	bhi.n	80062cc <UART_SetConfig+0x2b8>
 8006294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006298:	d00c      	beq.n	80062b4 <UART_SetConfig+0x2a0>
 800629a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800629e:	d815      	bhi.n	80062cc <UART_SetConfig+0x2b8>
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <UART_SetConfig+0x298>
 80062a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a8:	d008      	beq.n	80062bc <UART_SetConfig+0x2a8>
 80062aa:	e00f      	b.n	80062cc <UART_SetConfig+0x2b8>
 80062ac:	2300      	movs	r3, #0
 80062ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062b2:	e022      	b.n	80062fa <UART_SetConfig+0x2e6>
 80062b4:	2302      	movs	r3, #2
 80062b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ba:	e01e      	b.n	80062fa <UART_SetConfig+0x2e6>
 80062bc:	2304      	movs	r3, #4
 80062be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062c2:	e01a      	b.n	80062fa <UART_SetConfig+0x2e6>
 80062c4:	2308      	movs	r3, #8
 80062c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ca:	e016      	b.n	80062fa <UART_SetConfig+0x2e6>
 80062cc:	2310      	movs	r3, #16
 80062ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062d2:	e012      	b.n	80062fa <UART_SetConfig+0x2e6>
 80062d4:	efff69f3 	.word	0xefff69f3
 80062d8:	40008000 	.word	0x40008000
 80062dc:	40013800 	.word	0x40013800
 80062e0:	40021000 	.word	0x40021000
 80062e4:	40004400 	.word	0x40004400
 80062e8:	40004800 	.word	0x40004800
 80062ec:	40004c00 	.word	0x40004c00
 80062f0:	40005000 	.word	0x40005000
 80062f4:	2310      	movs	r3, #16
 80062f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a9f      	ldr	r2, [pc, #636]	; (800657c <UART_SetConfig+0x568>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d17a      	bne.n	80063fa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006304:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006308:	2b08      	cmp	r3, #8
 800630a:	d824      	bhi.n	8006356 <UART_SetConfig+0x342>
 800630c:	a201      	add	r2, pc, #4	; (adr r2, 8006314 <UART_SetConfig+0x300>)
 800630e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006312:	bf00      	nop
 8006314:	08006339 	.word	0x08006339
 8006318:	08006357 	.word	0x08006357
 800631c:	08006341 	.word	0x08006341
 8006320:	08006357 	.word	0x08006357
 8006324:	08006347 	.word	0x08006347
 8006328:	08006357 	.word	0x08006357
 800632c:	08006357 	.word	0x08006357
 8006330:	08006357 	.word	0x08006357
 8006334:	0800634f 	.word	0x0800634f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006338:	f7fe f818 	bl	800436c <HAL_RCC_GetPCLK1Freq>
 800633c:	61f8      	str	r0, [r7, #28]
        break;
 800633e:	e010      	b.n	8006362 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006340:	4b8f      	ldr	r3, [pc, #572]	; (8006580 <UART_SetConfig+0x56c>)
 8006342:	61fb      	str	r3, [r7, #28]
        break;
 8006344:	e00d      	b.n	8006362 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006346:	f7fd ff79 	bl	800423c <HAL_RCC_GetSysClockFreq>
 800634a:	61f8      	str	r0, [r7, #28]
        break;
 800634c:	e009      	b.n	8006362 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800634e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006352:	61fb      	str	r3, [r7, #28]
        break;
 8006354:	e005      	b.n	8006362 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006360:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 80fb 	beq.w	8006560 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	4613      	mov	r3, r2
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	4413      	add	r3, r2
 8006374:	69fa      	ldr	r2, [r7, #28]
 8006376:	429a      	cmp	r2, r3
 8006378:	d305      	bcc.n	8006386 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006380:	69fa      	ldr	r2, [r7, #28]
 8006382:	429a      	cmp	r2, r3
 8006384:	d903      	bls.n	800638e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800638c:	e0e8      	b.n	8006560 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	2200      	movs	r2, #0
 8006392:	461c      	mov	r4, r3
 8006394:	4615      	mov	r5, r2
 8006396:	f04f 0200 	mov.w	r2, #0
 800639a:	f04f 0300 	mov.w	r3, #0
 800639e:	022b      	lsls	r3, r5, #8
 80063a0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80063a4:	0222      	lsls	r2, r4, #8
 80063a6:	68f9      	ldr	r1, [r7, #12]
 80063a8:	6849      	ldr	r1, [r1, #4]
 80063aa:	0849      	lsrs	r1, r1, #1
 80063ac:	2000      	movs	r0, #0
 80063ae:	4688      	mov	r8, r1
 80063b0:	4681      	mov	r9, r0
 80063b2:	eb12 0a08 	adds.w	sl, r2, r8
 80063b6:	eb43 0b09 	adc.w	fp, r3, r9
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	603b      	str	r3, [r7, #0]
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063c8:	4650      	mov	r0, sl
 80063ca:	4659      	mov	r1, fp
 80063cc:	f7f9 fefc 	bl	80001c8 <__aeabi_uldivmod>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	4613      	mov	r3, r2
 80063d6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063de:	d308      	bcc.n	80063f2 <UART_SetConfig+0x3de>
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063e6:	d204      	bcs.n	80063f2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	60da      	str	r2, [r3, #12]
 80063f0:	e0b6      	b.n	8006560 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063f8:	e0b2      	b.n	8006560 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006402:	d15e      	bne.n	80064c2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006404:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006408:	2b08      	cmp	r3, #8
 800640a:	d828      	bhi.n	800645e <UART_SetConfig+0x44a>
 800640c:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <UART_SetConfig+0x400>)
 800640e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006412:	bf00      	nop
 8006414:	08006439 	.word	0x08006439
 8006418:	08006441 	.word	0x08006441
 800641c:	08006449 	.word	0x08006449
 8006420:	0800645f 	.word	0x0800645f
 8006424:	0800644f 	.word	0x0800644f
 8006428:	0800645f 	.word	0x0800645f
 800642c:	0800645f 	.word	0x0800645f
 8006430:	0800645f 	.word	0x0800645f
 8006434:	08006457 	.word	0x08006457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006438:	f7fd ff98 	bl	800436c <HAL_RCC_GetPCLK1Freq>
 800643c:	61f8      	str	r0, [r7, #28]
        break;
 800643e:	e014      	b.n	800646a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006440:	f7fd ffaa 	bl	8004398 <HAL_RCC_GetPCLK2Freq>
 8006444:	61f8      	str	r0, [r7, #28]
        break;
 8006446:	e010      	b.n	800646a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006448:	4b4d      	ldr	r3, [pc, #308]	; (8006580 <UART_SetConfig+0x56c>)
 800644a:	61fb      	str	r3, [r7, #28]
        break;
 800644c:	e00d      	b.n	800646a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800644e:	f7fd fef5 	bl	800423c <HAL_RCC_GetSysClockFreq>
 8006452:	61f8      	str	r0, [r7, #28]
        break;
 8006454:	e009      	b.n	800646a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800645a:	61fb      	str	r3, [r7, #28]
        break;
 800645c:	e005      	b.n	800646a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006468:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d077      	beq.n	8006560 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	005a      	lsls	r2, r3, #1
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	085b      	lsrs	r3, r3, #1
 800647a:	441a      	add	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	fbb2 f3f3 	udiv	r3, r2, r3
 8006484:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	2b0f      	cmp	r3, #15
 800648a:	d916      	bls.n	80064ba <UART_SetConfig+0x4a6>
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006492:	d212      	bcs.n	80064ba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	b29b      	uxth	r3, r3
 8006498:	f023 030f 	bic.w	r3, r3, #15
 800649c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	085b      	lsrs	r3, r3, #1
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	f003 0307 	and.w	r3, r3, #7
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	8afb      	ldrh	r3, [r7, #22]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	8afa      	ldrh	r2, [r7, #22]
 80064b6:	60da      	str	r2, [r3, #12]
 80064b8:	e052      	b.n	8006560 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80064c0:	e04e      	b.n	8006560 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d827      	bhi.n	800651a <UART_SetConfig+0x506>
 80064ca:	a201      	add	r2, pc, #4	; (adr r2, 80064d0 <UART_SetConfig+0x4bc>)
 80064cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d0:	080064f5 	.word	0x080064f5
 80064d4:	080064fd 	.word	0x080064fd
 80064d8:	08006505 	.word	0x08006505
 80064dc:	0800651b 	.word	0x0800651b
 80064e0:	0800650b 	.word	0x0800650b
 80064e4:	0800651b 	.word	0x0800651b
 80064e8:	0800651b 	.word	0x0800651b
 80064ec:	0800651b 	.word	0x0800651b
 80064f0:	08006513 	.word	0x08006513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064f4:	f7fd ff3a 	bl	800436c <HAL_RCC_GetPCLK1Freq>
 80064f8:	61f8      	str	r0, [r7, #28]
        break;
 80064fa:	e014      	b.n	8006526 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064fc:	f7fd ff4c 	bl	8004398 <HAL_RCC_GetPCLK2Freq>
 8006500:	61f8      	str	r0, [r7, #28]
        break;
 8006502:	e010      	b.n	8006526 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006504:	4b1e      	ldr	r3, [pc, #120]	; (8006580 <UART_SetConfig+0x56c>)
 8006506:	61fb      	str	r3, [r7, #28]
        break;
 8006508:	e00d      	b.n	8006526 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800650a:	f7fd fe97 	bl	800423c <HAL_RCC_GetSysClockFreq>
 800650e:	61f8      	str	r0, [r7, #28]
        break;
 8006510:	e009      	b.n	8006526 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006516:	61fb      	str	r3, [r7, #28]
        break;
 8006518:	e005      	b.n	8006526 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006524:	bf00      	nop
    }

    if (pclk != 0U)
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d019      	beq.n	8006560 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	085a      	lsrs	r2, r3, #1
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	441a      	add	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	fbb2 f3f3 	udiv	r3, r2, r3
 800653e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	2b0f      	cmp	r3, #15
 8006544:	d909      	bls.n	800655a <UART_SetConfig+0x546>
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800654c:	d205      	bcs.n	800655a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	b29a      	uxth	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60da      	str	r2, [r3, #12]
 8006558:	e002      	b.n	8006560 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800656c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006570:	4618      	mov	r0, r3
 8006572:	3728      	adds	r7, #40	; 0x28
 8006574:	46bd      	mov	sp, r7
 8006576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800657a:	bf00      	nop
 800657c:	40008000 	.word	0x40008000
 8006580:	00f42400 	.word	0x00f42400

08006584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00a      	beq.n	80065ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00a      	beq.n	80065f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	f003 0308 	and.w	r3, r3, #8
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00a      	beq.n	8006614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	f003 0310 	and.w	r3, r3, #16
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00a      	beq.n	8006636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663a:	f003 0320 	and.w	r3, r3, #32
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00a      	beq.n	8006658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006660:	2b00      	cmp	r3, #0
 8006662:	d01a      	beq.n	800669a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006682:	d10a      	bne.n	800669a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	605a      	str	r2, [r3, #4]
  }
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af02      	add	r7, sp, #8
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066d8:	f7fa fef0 	bl	80014bc <HAL_GetTick>
 80066dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0308 	and.w	r3, r3, #8
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d10e      	bne.n	800670a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f82d 	bl	800675a <UART_WaitOnFlagUntilTimeout>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e023      	b.n	8006752 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b04      	cmp	r3, #4
 8006716:	d10e      	bne.n	8006736 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006718:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f817 	bl	800675a <UART_WaitOnFlagUntilTimeout>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e00d      	b.n	8006752 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2220      	movs	r2, #32
 800673a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2220      	movs	r2, #32
 8006740:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b09c      	sub	sp, #112	; 0x70
 800675e:	af00      	add	r7, sp, #0
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	60b9      	str	r1, [r7, #8]
 8006764:	603b      	str	r3, [r7, #0]
 8006766:	4613      	mov	r3, r2
 8006768:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800676a:	e0a5      	b.n	80068b8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800676c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006772:	f000 80a1 	beq.w	80068b8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006776:	f7fa fea1 	bl	80014bc <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006782:	429a      	cmp	r2, r3
 8006784:	d302      	bcc.n	800678c <UART_WaitOnFlagUntilTimeout+0x32>
 8006786:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006788:	2b00      	cmp	r3, #0
 800678a:	d13e      	bne.n	800680a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006794:	e853 3f00 	ldrex	r3, [r3]
 8006798:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800679a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800679c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067a0:	667b      	str	r3, [r7, #100]	; 0x64
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	461a      	mov	r2, r3
 80067a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067b2:	e841 2300 	strex	r3, r2, [r1]
 80067b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1e6      	bne.n	800678c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3308      	adds	r3, #8
 80067c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c8:	e853 3f00 	ldrex	r3, [r3]
 80067cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d0:	f023 0301 	bic.w	r3, r3, #1
 80067d4:	663b      	str	r3, [r7, #96]	; 0x60
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3308      	adds	r3, #8
 80067dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067de:	64ba      	str	r2, [r7, #72]	; 0x48
 80067e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067e6:	e841 2300 	strex	r3, r2, [r1]
 80067ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80067ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1e5      	bne.n	80067be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2220      	movs	r2, #32
 80067f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2220      	movs	r2, #32
 80067fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e067      	b.n	80068da <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d04f      	beq.n	80068b8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006826:	d147      	bne.n	80068b8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006830:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683a:	e853 3f00 	ldrex	r3, [r3]
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006846:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	461a      	mov	r2, r3
 800684e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006850:	637b      	str	r3, [r7, #52]	; 0x34
 8006852:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800685e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e6      	bne.n	8006832 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3308      	adds	r3, #8
 800686a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	e853 3f00 	ldrex	r3, [r3]
 8006872:	613b      	str	r3, [r7, #16]
   return(result);
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f023 0301 	bic.w	r3, r3, #1
 800687a:	66bb      	str	r3, [r7, #104]	; 0x68
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3308      	adds	r3, #8
 8006882:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006884:	623a      	str	r2, [r7, #32]
 8006886:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	69f9      	ldr	r1, [r7, #28]
 800688a:	6a3a      	ldr	r2, [r7, #32]
 800688c:	e841 2300 	strex	r3, r2, [r1]
 8006890:	61bb      	str	r3, [r7, #24]
   return(result);
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e5      	bne.n	8006864 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2220      	movs	r2, #32
 800689c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2220      	movs	r2, #32
 80068a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e010      	b.n	80068da <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	69da      	ldr	r2, [r3, #28]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	4013      	ands	r3, r2
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	bf0c      	ite	eq
 80068c8:	2301      	moveq	r3, #1
 80068ca:	2300      	movne	r3, #0
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	461a      	mov	r2, r3
 80068d0:	79fb      	ldrb	r3, [r7, #7]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	f43f af4a 	beq.w	800676c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3770      	adds	r7, #112	; 0x70
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068e2:	b084      	sub	sp, #16
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	f107 001c 	add.w	r0, r7, #28
 80068f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f9a1 	bl	8006c48 <USB_CoreReset>
 8006906:	4603      	mov	r3, r0
 8006908:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800690a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800690c:	2b00      	cmp	r3, #0
 800690e:	d106      	bne.n	800691e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006914:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	639a      	str	r2, [r3, #56]	; 0x38
 800691c:	e005      	b.n	800692a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800692a:	7bfb      	ldrb	r3, [r7, #15]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006936:	b004      	add	sp, #16
 8006938:	4770      	bx	lr

0800693a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f043 0201 	orr.w	r2, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f023 0201 	bic.w	r2, r3, #1
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	460b      	mov	r3, r1
 8006988:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800699a:	78fb      	ldrb	r3, [r7, #3]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d115      	bne.n	80069cc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80069ac:	2001      	movs	r0, #1
 80069ae:	f7fa fd91 	bl	80014d4 <HAL_Delay>
      ms++;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3301      	adds	r3, #1
 80069b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f936 	bl	8006c2a <USB_GetMode>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d01e      	beq.n	8006a02 <USB_SetCurrentMode+0x84>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2b31      	cmp	r3, #49	; 0x31
 80069c8:	d9f0      	bls.n	80069ac <USB_SetCurrentMode+0x2e>
 80069ca:	e01a      	b.n	8006a02 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d115      	bne.n	80069fe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80069de:	2001      	movs	r0, #1
 80069e0:	f7fa fd78 	bl	80014d4 <HAL_Delay>
      ms++;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	3301      	adds	r3, #1
 80069e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f91d 	bl	8006c2a <USB_GetMode>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d005      	beq.n	8006a02 <USB_SetCurrentMode+0x84>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b31      	cmp	r3, #49	; 0x31
 80069fa:	d9f0      	bls.n	80069de <USB_SetCurrentMode+0x60>
 80069fc:	e001      	b.n	8006a02 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e005      	b.n	8006a0e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2b32      	cmp	r3, #50	; 0x32
 8006a06:	d101      	bne.n	8006a0c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e000      	b.n	8006a0e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
	...

08006a18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4a13      	ldr	r2, [pc, #76]	; (8006a7c <USB_FlushTxFifo+0x64>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d901      	bls.n	8006a38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e01b      	b.n	8006a70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	daf2      	bge.n	8006a26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	019b      	lsls	r3, r3, #6
 8006a48:	f043 0220 	orr.w	r2, r3, #32
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3301      	adds	r3, #1
 8006a54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4a08      	ldr	r2, [pc, #32]	; (8006a7c <USB_FlushTxFifo+0x64>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d901      	bls.n	8006a62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e006      	b.n	8006a70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	f003 0320 	and.w	r3, r3, #32
 8006a6a:	2b20      	cmp	r3, #32
 8006a6c:	d0f0      	beq.n	8006a50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	00030d40 	.word	0x00030d40

08006a80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	4a11      	ldr	r2, [pc, #68]	; (8006adc <USB_FlushRxFifo+0x5c>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d901      	bls.n	8006a9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e018      	b.n	8006ad0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	daf2      	bge.n	8006a8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2210      	movs	r2, #16
 8006aae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4a08      	ldr	r2, [pc, #32]	; (8006adc <USB_FlushRxFifo+0x5c>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d901      	bls.n	8006ac2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e006      	b.n	8006ad0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f003 0310 	and.w	r3, r3, #16
 8006aca:	2b10      	cmp	r3, #16
 8006acc:	d0f0      	beq.n	8006ab0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
 8006adc:	00030d40 	.word	0x00030d40

08006ae0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b089      	sub	sp, #36	; 0x24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	4611      	mov	r1, r2
 8006aec:	461a      	mov	r2, r3
 8006aee:	460b      	mov	r3, r1
 8006af0:	71fb      	strb	r3, [r7, #7]
 8006af2:	4613      	mov	r3, r2
 8006af4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006afe:	88bb      	ldrh	r3, [r7, #4]
 8006b00:	3303      	adds	r3, #3
 8006b02:	089b      	lsrs	r3, r3, #2
 8006b04:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006b06:	2300      	movs	r3, #0
 8006b08:	61bb      	str	r3, [r7, #24]
 8006b0a:	e018      	b.n	8006b3e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006b0c:	79fb      	ldrb	r3, [r7, #7]
 8006b0e:	031a      	lsls	r2, r3, #12
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b18:	461a      	mov	r2, r3
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	3301      	adds	r3, #1
 8006b24:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	3301      	adds	r3, #1
 8006b36:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	61bb      	str	r3, [r7, #24]
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d3e2      	bcc.n	8006b0c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3724      	adds	r7, #36	; 0x24
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b08b      	sub	sp, #44	; 0x2c
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006b6a:	88fb      	ldrh	r3, [r7, #6]
 8006b6c:	089b      	lsrs	r3, r3, #2
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006b72:	88fb      	ldrh	r3, [r7, #6]
 8006b74:	f003 0303 	and.w	r3, r3, #3
 8006b78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	623b      	str	r3, [r7, #32]
 8006b7e:	e014      	b.n	8006baa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	3301      	adds	r3, #1
 8006b90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	3301      	adds	r3, #1
 8006b96:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	623b      	str	r3, [r7, #32]
 8006baa:	6a3a      	ldr	r2, [r7, #32]
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d3e6      	bcc.n	8006b80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006bb2:	8bfb      	ldrh	r3, [r7, #30]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d01e      	beq.n	8006bf6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f107 0310 	add.w	r3, r7, #16
 8006bc8:	6812      	ldr	r2, [r2, #0]
 8006bca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	00db      	lsls	r3, r3, #3
 8006bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	701a      	strb	r2, [r3, #0]
      i++;
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	3301      	adds	r3, #1
 8006be2:	623b      	str	r3, [r7, #32]
      pDest++;
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	3301      	adds	r3, #1
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006bea:	8bfb      	ldrh	r3, [r7, #30]
 8006bec:	3b01      	subs	r3, #1
 8006bee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006bf0:	8bfb      	ldrh	r3, [r7, #30]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1ea      	bne.n	8006bcc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	372c      	adds	r7, #44	; 0x2c
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	4013      	ands	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	f003 0301 	and.w	r3, r3, #1
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
	...

08006c48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3301      	adds	r3, #1
 8006c58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	4a13      	ldr	r2, [pc, #76]	; (8006cac <USB_CoreReset+0x64>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d901      	bls.n	8006c66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e01b      	b.n	8006c9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	daf2      	bge.n	8006c54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	f043 0201 	orr.w	r2, r3, #1
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3301      	adds	r3, #1
 8006c82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4a09      	ldr	r2, [pc, #36]	; (8006cac <USB_CoreReset+0x64>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d901      	bls.n	8006c90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e006      	b.n	8006c9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d0f0      	beq.n	8006c7e <USB_CoreReset+0x36>

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	00030d40 	.word	0x00030d40

08006cb0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b086      	sub	sp, #24
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006cbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cda:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cfc:	f023 0304 	bic.w	r3, r3, #4
 8006d00:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d02:	2110      	movs	r1, #16
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7ff fe87 	bl	8006a18 <USB_FlushTxFifo>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7ff feb3 	bl	8006a80 <USB_FlushRxFifo>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d24:	2300      	movs	r3, #0
 8006d26:	613b      	str	r3, [r7, #16]
 8006d28:	e015      	b.n	8006d56 <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d36:	461a      	mov	r2, r3
 8006d38:	f04f 33ff 	mov.w	r3, #4294967295
 8006d3c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	3301      	adds	r3, #1
 8006d54:	613b      	str	r3, [r7, #16]
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d3e5      	bcc.n	8006d2a <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f04f 32ff 	mov.w	r2, #4294967295
 8006d6a:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2280      	movs	r2, #128	; 0x80
 8006d70:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a0c      	ldr	r2, [pc, #48]	; (8006da8 <USB_HostInit+0xf8>)
 8006d76:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a0c      	ldr	r2, [pc, #48]	; (8006dac <USB_HostInit+0xfc>)
 8006d7c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	f043 0210 	orr.w	r2, r3, #16
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	699a      	ldr	r2, [r3, #24]
 8006d90:	4b07      	ldr	r3, [pc, #28]	; (8006db0 <USB_HostInit+0x100>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006da4:	b004      	add	sp, #16
 8006da6:	4770      	bx	lr
 8006da8:	00600080 	.word	0x00600080
 8006dac:	004000e0 	.word	0x004000e0
 8006db0:	a3200008 	.word	0xa3200008

08006db4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dd2:	f023 0303 	bic.w	r3, r3, #3
 8006dd6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	78fb      	ldrb	r3, [r7, #3]
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	68f9      	ldr	r1, [r7, #12]
 8006de8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006dec:	4313      	orrs	r3, r2
 8006dee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006df0:	78fb      	ldrb	r3, [r7, #3]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d107      	bne.n	8006e06 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006e02:	6053      	str	r3, [r2, #4]
 8006e04:	e009      	b.n	8006e1a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006e06:	78fb      	ldrb	r3, [r7, #3]
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d106      	bne.n	8006e1a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e12:	461a      	mov	r2, r3
 8006e14:	f241 7370 	movw	r3, #6000	; 0x1770
 8006e18:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3714      	adds	r7, #20
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006e48:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e56:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006e58:	2064      	movs	r0, #100	; 0x64
 8006e5a:	f7fa fb3b 	bl	80014d4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e6a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006e6c:	200a      	movs	r0, #10
 8006e6e:	f7fa fb31 	bl	80014d4 <HAL_Delay>

  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	460b      	mov	r3, r1
 8006e86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ea0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d109      	bne.n	8006ec0 <USB_DriveVbus+0x44>
 8006eac:	78fb      	ldrb	r3, [r7, #3]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d106      	bne.n	8006ec0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006eba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ebe:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eca:	d109      	bne.n	8006ee0 <USB_DriveVbus+0x64>
 8006ecc:	78fb      	ldrb	r3, [r7, #3]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d106      	bne.n	8006ee0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006eda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ede:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b085      	sub	sp, #20
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	0c5b      	lsrs	r3, r3, #17
 8006f0c:	f003 0303 	and.w	r3, r3, #3
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	b29b      	uxth	r3, r3
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
	...

08006f40 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b088      	sub	sp, #32
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	4608      	mov	r0, r1
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	4603      	mov	r3, r0
 8006f50:	70fb      	strb	r3, [r7, #3]
 8006f52:	460b      	mov	r3, r1
 8006f54:	70bb      	strb	r3, [r7, #2]
 8006f56:	4613      	mov	r3, r2
 8006f58:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006f62:	78fb      	ldrb	r3, [r7, #3]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f04f 33ff 	mov.w	r3, #4294967295
 8006f74:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006f76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d867      	bhi.n	800704e <USB_HC_Init+0x10e>
 8006f7e:	a201      	add	r2, pc, #4	; (adr r2, 8006f84 <USB_HC_Init+0x44>)
 8006f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f84:	08006f95 	.word	0x08006f95
 8006f88:	08007011 	.word	0x08007011
 8006f8c:	08006f95 	.word	0x08006f95
 8006f90:	08006fd3 	.word	0x08006fd3
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006f94:	78fb      	ldrb	r3, [r7, #3]
 8006f96:	015a      	lsls	r2, r3, #5
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	f240 439d 	movw	r3, #1181	; 0x49d
 8006fa6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006fa8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	da51      	bge.n	8007054 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	78fa      	ldrb	r2, [r7, #3]
 8006fc0:	0151      	lsls	r1, r2, #5
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	440a      	add	r2, r1
 8006fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fce:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006fd0:	e040      	b.n	8007054 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006fd2:	78fb      	ldrb	r3, [r7, #3]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f240 639d 	movw	r3, #1693	; 0x69d
 8006fe4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006fe6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	da34      	bge.n	8007058 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006fee:	78fb      	ldrb	r3, [r7, #3]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	78fa      	ldrb	r2, [r7, #3]
 8006ffe:	0151      	lsls	r1, r2, #5
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	440a      	add	r2, r1
 8007004:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800700c:	60d3      	str	r3, [r2, #12]
      }

      break;
 800700e:	e023      	b.n	8007058 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007010:	78fb      	ldrb	r3, [r7, #3]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	4413      	add	r3, r2
 8007018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800701c:	461a      	mov	r2, r3
 800701e:	f240 2325 	movw	r3, #549	; 0x225
 8007022:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007024:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007028:	2b00      	cmp	r3, #0
 800702a:	da17      	bge.n	800705c <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800702c:	78fb      	ldrb	r3, [r7, #3]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	4413      	add	r3, r2
 8007034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	78fa      	ldrb	r2, [r7, #3]
 800703c:	0151      	lsls	r1, r2, #5
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	440a      	add	r2, r1
 8007042:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007046:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800704a:	60d3      	str	r3, [r2, #12]
      }
      break;
 800704c:	e006      	b.n	800705c <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	77fb      	strb	r3, [r7, #31]
      break;
 8007052:	e004      	b.n	800705e <USB_HC_Init+0x11e>
      break;
 8007054:	bf00      	nop
 8007056:	e002      	b.n	800705e <USB_HC_Init+0x11e>
      break;
 8007058:	bf00      	nop
 800705a:	e000      	b.n	800705e <USB_HC_Init+0x11e>
      break;
 800705c:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800705e:	78fb      	ldrb	r3, [r7, #3]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	4413      	add	r3, r2
 8007066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	78fa      	ldrb	r2, [r7, #3]
 800706e:	0151      	lsls	r1, r2, #5
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	440a      	add	r2, r1
 8007074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007078:	f043 0302 	orr.w	r3, r3, #2
 800707c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007084:	699a      	ldr	r2, [r3, #24]
 8007086:	78fb      	ldrb	r3, [r7, #3]
 8007088:	f003 030f 	and.w	r3, r3, #15
 800708c:	2101      	movs	r1, #1
 800708e:	fa01 f303 	lsl.w	r3, r1, r3
 8007092:	6939      	ldr	r1, [r7, #16]
 8007094:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007098:	4313      	orrs	r3, r2
 800709a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80070a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	da03      	bge.n	80070b8 <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80070b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	e001      	b.n	80070bc <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7ff ff16 	bl	8006eee <USB_GetHostSpeed>
 80070c2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80070c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d106      	bne.n	80070da <USB_HC_Init+0x19a>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d003      	beq.n	80070da <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80070d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070d6:	617b      	str	r3, [r7, #20]
 80070d8:	e001      	b.n	80070de <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80070de:	787b      	ldrb	r3, [r7, #1]
 80070e0:	059b      	lsls	r3, r3, #22
 80070e2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80070e6:	78bb      	ldrb	r3, [r7, #2]
 80070e8:	02db      	lsls	r3, r3, #11
 80070ea:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80070ee:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80070f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80070f4:	049b      	lsls	r3, r3, #18
 80070f6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80070fa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80070fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80070fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007102:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007108:	78fb      	ldrb	r3, [r7, #3]
 800710a:	0159      	lsls	r1, r3, #5
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	440b      	add	r3, r1
 8007110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007114:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800711a:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800711c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007120:	2b03      	cmp	r3, #3
 8007122:	d003      	beq.n	800712c <USB_HC_Init+0x1ec>
 8007124:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007128:	2b01      	cmp	r3, #1
 800712a:	d10f      	bne.n	800714c <USB_HC_Init+0x20c>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800712c:	78fb      	ldrb	r3, [r7, #3]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	4413      	add	r3, r2
 8007134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	78fa      	ldrb	r2, [r7, #3]
 800713c:	0151      	lsls	r1, r2, #5
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	440a      	add	r2, r1
 8007142:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007146:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800714a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800714c:	7ffb      	ldrb	r3, [r7, #31]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3720      	adds	r7, #32
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop

08007158 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b088      	sub	sp, #32
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	785b      	ldrb	r3, [r3, #1]
 800716a:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800716c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007170:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d018      	beq.n	80071ac <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	8912      	ldrh	r2, [r2, #8]
 8007182:	4413      	add	r3, r2
 8007184:	3b01      	subs	r3, #1
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	8912      	ldrh	r2, [r2, #8]
 800718a:	fbb3 f3f2 	udiv	r3, r3, r2
 800718e:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8007190:	8bfa      	ldrh	r2, [r7, #30]
 8007192:	8a7b      	ldrh	r3, [r7, #18]
 8007194:	429a      	cmp	r2, r3
 8007196:	d90b      	bls.n	80071b0 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8007198:	8a7b      	ldrh	r3, [r7, #18]
 800719a:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800719c:	8bfb      	ldrh	r3, [r7, #30]
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	8912      	ldrh	r2, [r2, #8]
 80071a2:	fb03 f202 	mul.w	r2, r3, r2
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	611a      	str	r2, [r3, #16]
 80071aa:	e001      	b.n	80071b0 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 80071ac:	2301      	movs	r3, #1
 80071ae:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	78db      	ldrb	r3, [r3, #3]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d007      	beq.n	80071c8 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80071b8:	8bfb      	ldrh	r3, [r7, #30]
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	8912      	ldrh	r2, [r2, #8]
 80071be:	fb03 f202 	mul.w	r2, r3, r2
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	611a      	str	r2, [r3, #16]
 80071c6:	e003      	b.n	80071d0 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	695a      	ldr	r2, [r3, #20]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80071d8:	8bfb      	ldrh	r3, [r7, #30]
 80071da:	04d9      	lsls	r1, r3, #19
 80071dc:	4b59      	ldr	r3, [pc, #356]	; (8007344 <USB_HC_StartXfer+0x1ec>)
 80071de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	7a9b      	ldrb	r3, [r3, #10]
 80071e6:	075b      	lsls	r3, r3, #29
 80071e8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071ec:	6979      	ldr	r1, [r7, #20]
 80071ee:	0148      	lsls	r0, r1, #5
 80071f0:	69b9      	ldr	r1, [r7, #24]
 80071f2:	4401      	add	r1, r0
 80071f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80071f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071fa:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	2b00      	cmp	r3, #0
 800720a:	bf0c      	ite	eq
 800720c:	2301      	moveq	r3, #1
 800720e:	2300      	movne	r3, #0
 8007210:	b2db      	uxtb	r3, r3
 8007212:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	4413      	add	r3, r2
 800721c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	0151      	lsls	r1, r2, #5
 8007226:	69ba      	ldr	r2, [r7, #24]
 8007228:	440a      	add	r2, r1
 800722a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800722e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007232:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	4413      	add	r3, r2
 800723c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	7c7b      	ldrb	r3, [r7, #17]
 8007244:	075b      	lsls	r3, r3, #29
 8007246:	6979      	ldr	r1, [r7, #20]
 8007248:	0148      	lsls	r0, r1, #5
 800724a:	69b9      	ldr	r1, [r7, #24]
 800724c:	4401      	add	r1, r0
 800724e:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007252:	4313      	orrs	r3, r2
 8007254:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	4413      	add	r3, r2
 800725e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800726c:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	78db      	ldrb	r3, [r3, #3]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d004      	beq.n	8007280 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800727c:	60bb      	str	r3, [r7, #8]
 800727e:	e003      	b.n	8007288 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007286:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800728e:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	4413      	add	r3, r2
 8007298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800729c:	461a      	mov	r2, r3
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	78db      	ldrb	r3, [r3, #3]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d147      	bne.n	800733a <USB_HC_StartXfer+0x1e2>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d043      	beq.n	800733a <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	79db      	ldrb	r3, [r3, #7]
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d830      	bhi.n	800731c <USB_HC_StartXfer+0x1c4>
 80072ba:	a201      	add	r2, pc, #4	; (adr r2, 80072c0 <USB_HC_StartXfer+0x168>)
 80072bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c0:	080072d1 	.word	0x080072d1
 80072c4:	080072f5 	.word	0x080072f5
 80072c8:	080072d1 	.word	0x080072d1
 80072cc:	080072f5 	.word	0x080072f5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	3303      	adds	r3, #3
 80072d6:	089b      	lsrs	r3, r3, #2
 80072d8:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80072da:	89fa      	ldrh	r2, [r7, #14]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d91c      	bls.n	8007320 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	f043 0220 	orr.w	r2, r3, #32
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80072f2:	e015      	b.n	8007320 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	3303      	adds	r3, #3
 80072fa:	089b      	lsrs	r3, r3, #2
 80072fc:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80072fe:	89fa      	ldrh	r2, [r7, #14]
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	b29b      	uxth	r3, r3
 800730a:	429a      	cmp	r2, r3
 800730c:	d90a      	bls.n	8007324 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	619a      	str	r2, [r3, #24]
        }
        break;
 800731a:	e003      	b.n	8007324 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 800731c:	bf00      	nop
 800731e:	e002      	b.n	8007326 <USB_HC_StartXfer+0x1ce>
        break;
 8007320:	bf00      	nop
 8007322:	e000      	b.n	8007326 <USB_HC_StartXfer+0x1ce>
        break;
 8007324:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	68d9      	ldr	r1, [r3, #12]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	785a      	ldrb	r2, [r3, #1]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	b29b      	uxth	r3, r3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7ff fbd3 	bl	8006ae0 <USB_WritePacket>
  }

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3720      	adds	r7, #32
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	1ff80000 	.word	0x1ff80000

08007348 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	b29b      	uxth	r3, r3
}
 800735e:	4618      	mov	r0, r3
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800736a:	b480      	push	{r7}
 800736c:	b089      	sub	sp, #36	; 0x24
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	460b      	mov	r3, r1
 8007374:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	4413      	add	r3, r2
 800738a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	0c9b      	lsrs	r3, r3, #18
 8007392:	f003 0303 	and.w	r3, r3, #3
 8007396:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	015a      	lsls	r2, r3, #5
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	4413      	add	r3, r2
 80073a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	0fdb      	lsrs	r3, r3, #31
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f003 0320 	and.w	r3, r3, #32
 80073b6:	2b20      	cmp	r3, #32
 80073b8:	d104      	bne.n	80073c4 <USB_HC_Halt+0x5a>
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	e0c8      	b.n	8007556 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d002      	beq.n	80073d0 <USB_HC_Halt+0x66>
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d163      	bne.n	8007498 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	0151      	lsls	r1, r2, #5
 80073e2:	69fa      	ldr	r2, [r7, #28]
 80073e4:	440a      	add	r2, r1
 80073e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073ee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f003 0320 	and.w	r3, r3, #32
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f040 80ab 	bne.w	8007554 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007402:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d133      	bne.n	8007472 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	4413      	add	r3, r2
 8007412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	0151      	lsls	r1, r2, #5
 800741c:	69fa      	ldr	r2, [r7, #28]
 800741e:	440a      	add	r2, r1
 8007420:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007428:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	4413      	add	r3, r2
 8007432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	69ba      	ldr	r2, [r7, #24]
 800743a:	0151      	lsls	r1, r2, #5
 800743c:	69fa      	ldr	r2, [r7, #28]
 800743e:	440a      	add	r2, r1
 8007440:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007444:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007448:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3301      	adds	r3, #1
 800744e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007456:	d81d      	bhi.n	8007494 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	4413      	add	r3, r2
 8007460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800746a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800746e:	d0ec      	beq.n	800744a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007470:	e070      	b.n	8007554 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	4413      	add	r3, r2
 800747a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	0151      	lsls	r1, r2, #5
 8007484:	69fa      	ldr	r2, [r7, #28]
 8007486:	440a      	add	r2, r1
 8007488:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800748c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007490:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007492:	e05f      	b.n	8007554 <USB_HC_Halt+0x1ea>
            break;
 8007494:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007496:	e05d      	b.n	8007554 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	69ba      	ldr	r2, [r7, #24]
 80074a8:	0151      	lsls	r1, r2, #5
 80074aa:	69fa      	ldr	r2, [r7, #28]
 80074ac:	440a      	add	r2, r1
 80074ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074b6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d133      	bne.n	8007530 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	69ba      	ldr	r2, [r7, #24]
 80074d8:	0151      	lsls	r1, r2, #5
 80074da:	69fa      	ldr	r2, [r7, #28]
 80074dc:	440a      	add	r2, r1
 80074de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074e6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	69ba      	ldr	r2, [r7, #24]
 80074f8:	0151      	lsls	r1, r2, #5
 80074fa:	69fa      	ldr	r2, [r7, #28]
 80074fc:	440a      	add	r2, r1
 80074fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007502:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007506:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	3301      	adds	r3, #1
 800750c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007514:	d81d      	bhi.n	8007552 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	015a      	lsls	r2, r3, #5
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	4413      	add	r3, r2
 800751e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800752c:	d0ec      	beq.n	8007508 <USB_HC_Halt+0x19e>
 800752e:	e011      	b.n	8007554 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	4413      	add	r3, r2
 8007538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	69ba      	ldr	r2, [r7, #24]
 8007540:	0151      	lsls	r1, r2, #5
 8007542:	69fa      	ldr	r2, [r7, #28]
 8007544:	440a      	add	r2, r1
 8007546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800754a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	e000      	b.n	8007554 <USB_HC_Halt+0x1ea>
          break;
 8007552:	bf00      	nop
    }
  }

  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3724      	adds	r7, #36	; 0x24
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b088      	sub	sp, #32
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7ff f9f0 	bl	800695c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800757c:	2110      	movs	r1, #16
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7ff fa4a 	bl	8006a18 <USB_FlushTxFifo>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7ff fa76 	bl	8006a80 <USB_FlushRxFifo>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800759e:	2300      	movs	r3, #0
 80075a0:	61bb      	str	r3, [r7, #24]
 80075a2:	e01f      	b.n	80075e4 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075ba:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075c2:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075ca:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	015a      	lsls	r2, r3, #5
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075d8:	461a      	mov	r2, r3
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	3301      	adds	r3, #1
 80075e2:	61bb      	str	r3, [r7, #24]
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	2b0f      	cmp	r3, #15
 80075e8:	d9dc      	bls.n	80075a4 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80075ea:	2300      	movs	r3, #0
 80075ec:	61bb      	str	r3, [r7, #24]
 80075ee:	e034      	b.n	800765a <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007606:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800760e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007616:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	4413      	add	r3, r2
 8007620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007624:	461a      	mov	r2, r3
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3301      	adds	r3, #1
 800762e:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007636:	d80c      	bhi.n	8007652 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	4413      	add	r3, r2
 8007640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800764a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800764e:	d0ec      	beq.n	800762a <USB_StopHost+0xc8>
 8007650:	e000      	b.n	8007654 <USB_StopHost+0xf2>
        break;
 8007652:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	3301      	adds	r3, #1
 8007658:	61bb      	str	r3, [r7, #24]
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	2b0f      	cmp	r3, #15
 800765e:	d9c7      	bls.n	80075f0 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007666:	461a      	mov	r2, r3
 8007668:	f04f 33ff 	mov.w	r3, #4294967295
 800766c:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f04f 32ff 	mov.w	r2, #4294967295
 8007674:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7ff f95f 	bl	800693a <USB_EnableGlobalInt>

  return ret;
 800767c:	7ffb      	ldrb	r3, [r7, #31]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3720      	adds	r7, #32
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007686:	b590      	push	{r4, r7, lr}
 8007688:	b089      	sub	sp, #36	; 0x24
 800768a:	af04      	add	r7, sp, #16
 800768c:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800768e:	2301      	movs	r3, #1
 8007690:	2202      	movs	r2, #2
 8007692:	2102      	movs	r1, #2
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fc67 	bl	8007f68 <USBH_FindInterface>
 800769a:	4603      	mov	r3, r0
 800769c:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800769e:	7bfb      	ldrb	r3, [r7, #15]
 80076a0:	2bff      	cmp	r3, #255	; 0xff
 80076a2:	d002      	beq.n	80076aa <USBH_CDC_InterfaceInit+0x24>
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d901      	bls.n	80076ae <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80076aa:	2302      	movs	r3, #2
 80076ac:	e13d      	b.n	800792a <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
 80076b0:	4619      	mov	r1, r3
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fc3c 	bl	8007f30 <USBH_SelectInterface>
 80076b8:	4603      	mov	r3, r0
 80076ba:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80076c2:	2302      	movs	r3, #2
 80076c4:	e131      	b.n	800792a <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80076cc:	2050      	movs	r0, #80	; 0x50
 80076ce:	f002 fa05 	bl	8009adc <malloc>
 80076d2:	4603      	mov	r3, r0
 80076d4:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80076e6:	2302      	movs	r3, #2
 80076e8:	e11f      	b.n	800792a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80076ea:	2250      	movs	r2, #80	; 0x50
 80076ec:	2100      	movs	r1, #0
 80076ee:	68b8      	ldr	r0, [r7, #8]
 80076f0:	f002 fa04 	bl	8009afc <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	211a      	movs	r1, #26
 80076fa:	fb01 f303 	mul.w	r3, r1, r3
 80076fe:	4413      	add	r3, r2
 8007700:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	b25b      	sxtb	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	da15      	bge.n	8007738 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800770c:	7bfb      	ldrb	r3, [r7, #15]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	211a      	movs	r1, #26
 8007712:	fb01 f303 	mul.w	r3, r1, r3
 8007716:	4413      	add	r3, r2
 8007718:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800771c:	781a      	ldrb	r2, [r3, #0]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007722:	7bfb      	ldrb	r3, [r7, #15]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	211a      	movs	r1, #26
 8007728:	fb01 f303 	mul.w	r3, r1, r3
 800772c:	4413      	add	r3, r2
 800772e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007732:	881a      	ldrh	r2, [r3, #0]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	785b      	ldrb	r3, [r3, #1]
 800773c:	4619      	mov	r1, r3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f001 fe33 	bl	80093aa <USBH_AllocPipe>
 8007744:	4603      	mov	r3, r0
 8007746:	461a      	mov	r2, r3
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	7819      	ldrb	r1, [r3, #0]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	7858      	ldrb	r0, [r3, #1]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	8952      	ldrh	r2, [r2, #10]
 8007764:	9202      	str	r2, [sp, #8]
 8007766:	2203      	movs	r2, #3
 8007768:	9201      	str	r2, [sp, #4]
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	4623      	mov	r3, r4
 800776e:	4602      	mov	r2, r0
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 fdeb 	bl	800934c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	2200      	movs	r2, #0
 800777c:	4619      	mov	r1, r3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f002 f8fe 	bl	8009980 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007784:	2300      	movs	r3, #0
 8007786:	2200      	movs	r2, #0
 8007788:	210a      	movs	r1, #10
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fbec 	bl	8007f68 <USBH_FindInterface>
 8007790:	4603      	mov	r3, r0
 8007792:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007794:	7bfb      	ldrb	r3, [r7, #15]
 8007796:	2bff      	cmp	r3, #255	; 0xff
 8007798:	d002      	beq.n	80077a0 <USBH_CDC_InterfaceInit+0x11a>
 800779a:	7bfb      	ldrb	r3, [r7, #15]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d901      	bls.n	80077a4 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80077a0:	2302      	movs	r3, #2
 80077a2:	e0c2      	b.n	800792a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	211a      	movs	r1, #26
 80077aa:	fb01 f303 	mul.w	r3, r1, r3
 80077ae:	4413      	add	r3, r2
 80077b0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	b25b      	sxtb	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	da16      	bge.n	80077ea <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	211a      	movs	r1, #26
 80077c2:	fb01 f303 	mul.w	r3, r1, r3
 80077c6:	4413      	add	r3, r2
 80077c8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80077cc:	781a      	ldrb	r2, [r3, #0]
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80077d2:	7bfb      	ldrb	r3, [r7, #15]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	211a      	movs	r1, #26
 80077d8:	fb01 f303 	mul.w	r3, r1, r3
 80077dc:	4413      	add	r3, r2
 80077de:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80077e2:	881a      	ldrh	r2, [r3, #0]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	835a      	strh	r2, [r3, #26]
 80077e8:	e015      	b.n	8007816 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	211a      	movs	r1, #26
 80077f0:	fb01 f303 	mul.w	r3, r1, r3
 80077f4:	4413      	add	r3, r2
 80077f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80077fa:	781a      	ldrb	r2, [r3, #0]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007800:	7bfb      	ldrb	r3, [r7, #15]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	211a      	movs	r1, #26
 8007806:	fb01 f303 	mul.w	r3, r1, r3
 800780a:	4413      	add	r3, r2
 800780c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007810:	881a      	ldrh	r2, [r3, #0]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007816:	7bfb      	ldrb	r3, [r7, #15]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	211a      	movs	r1, #26
 800781c:	fb01 f303 	mul.w	r3, r1, r3
 8007820:	4413      	add	r3, r2
 8007822:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	b25b      	sxtb	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	da16      	bge.n	800785c <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800782e:	7bfb      	ldrb	r3, [r7, #15]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	211a      	movs	r1, #26
 8007834:	fb01 f303 	mul.w	r3, r1, r3
 8007838:	4413      	add	r3, r2
 800783a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800783e:	781a      	ldrb	r2, [r3, #0]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007844:	7bfb      	ldrb	r3, [r7, #15]
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	211a      	movs	r1, #26
 800784a:	fb01 f303 	mul.w	r3, r1, r3
 800784e:	4413      	add	r3, r2
 8007850:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007854:	881a      	ldrh	r2, [r3, #0]
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	835a      	strh	r2, [r3, #26]
 800785a:	e015      	b.n	8007888 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	211a      	movs	r1, #26
 8007862:	fb01 f303 	mul.w	r3, r1, r3
 8007866:	4413      	add	r3, r2
 8007868:	f203 3356 	addw	r3, r3, #854	; 0x356
 800786c:	781a      	ldrb	r2, [r3, #0]
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007872:	7bfb      	ldrb	r3, [r7, #15]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	211a      	movs	r1, #26
 8007878:	fb01 f303 	mul.w	r3, r1, r3
 800787c:	4413      	add	r3, r2
 800787e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007882:	881a      	ldrh	r2, [r3, #0]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	7b9b      	ldrb	r3, [r3, #14]
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f001 fd8b 	bl	80093aa <USBH_AllocPipe>
 8007894:	4603      	mov	r3, r0
 8007896:	461a      	mov	r2, r3
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	7bdb      	ldrb	r3, [r3, #15]
 80078a0:	4619      	mov	r1, r3
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f001 fd81 	bl	80093aa <USBH_AllocPipe>
 80078a8:	4603      	mov	r3, r0
 80078aa:	461a      	mov	r2, r3
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	7b59      	ldrb	r1, [r3, #13]
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	7b98      	ldrb	r0, [r3, #14]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	8b12      	ldrh	r2, [r2, #24]
 80078c8:	9202      	str	r2, [sp, #8]
 80078ca:	2202      	movs	r2, #2
 80078cc:	9201      	str	r2, [sp, #4]
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	4623      	mov	r3, r4
 80078d2:	4602      	mov	r2, r0
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f001 fd39 	bl	800934c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	7b19      	ldrb	r1, [r3, #12]
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	7bd8      	ldrb	r0, [r3, #15]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	8b52      	ldrh	r2, [r2, #26]
 80078f2:	9202      	str	r2, [sp, #8]
 80078f4:	2202      	movs	r2, #2
 80078f6:	9201      	str	r2, [sp, #4]
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	4623      	mov	r3, r4
 80078fc:	4602      	mov	r2, r0
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f001 fd24 	bl	800934c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	7b5b      	ldrb	r3, [r3, #13]
 8007910:	2200      	movs	r2, #0
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f002 f833 	bl	8009980 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	7b1b      	ldrb	r3, [r3, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	4619      	mov	r1, r3
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f002 f82c 	bl	8009980 <USBH_LL_SetToggle>

  return USBH_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	bd90      	pop	{r4, r7, pc}

08007932 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00e      	beq.n	800796a <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	4619      	mov	r1, r3
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f001 fd19 	bl	800938a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	4619      	mov	r1, r3
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f001 fd44 	bl	80093ec <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	7b1b      	ldrb	r3, [r3, #12]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00e      	beq.n	8007990 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	7b1b      	ldrb	r3, [r3, #12]
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f001 fd06 	bl	800938a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	7b1b      	ldrb	r3, [r3, #12]
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f001 fd31 	bl	80093ec <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	7b5b      	ldrb	r3, [r3, #13]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00e      	beq.n	80079b6 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	7b5b      	ldrb	r3, [r3, #13]
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f001 fcf3 	bl	800938a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	7b5b      	ldrb	r3, [r3, #13]
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 fd1e 	bl	80093ec <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00b      	beq.n	80079da <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f002 f88e 	bl	8009aec <free>
    phost->pActiveClass->pData = 0U;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079d6:	2200      	movs	r2, #0
 80079d8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079f2:	69db      	ldr	r3, [r3, #28]
 80079f4:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3340      	adds	r3, #64	; 0x40
 80079fa:	4619      	mov	r1, r3
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f8b2 	bl	8007b66 <GetLineCoding>
 8007a02:	4603      	mov	r3, r0
 8007a04:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007a06:	7afb      	ldrb	r3, [r7, #11]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d105      	bne.n	8007a18 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a12:	2102      	movs	r1, #2
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007a18:	7afb      	ldrb	r3, [r7, #11]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
	...

08007a24 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007a44:	2b04      	cmp	r3, #4
 8007a46:	d877      	bhi.n	8007b38 <USBH_CDC_Process+0x114>
 8007a48:	a201      	add	r2, pc, #4	; (adr r2, 8007a50 <USBH_CDC_Process+0x2c>)
 8007a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4e:	bf00      	nop
 8007a50:	08007a65 	.word	0x08007a65
 8007a54:	08007a6b 	.word	0x08007a6b
 8007a58:	08007a9b 	.word	0x08007a9b
 8007a5c:	08007b0f 	.word	0x08007b0f
 8007a60:	08007b1d 	.word	0x08007b1d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	73fb      	strb	r3, [r7, #15]
      break;
 8007a68:	e06d      	b.n	8007b46 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f897 	bl	8007ba4 <SetLineCoding>
 8007a76:	4603      	mov	r3, r0
 8007a78:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007a7a:	7bbb      	ldrb	r3, [r7, #14]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d104      	bne.n	8007a8a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007a88:	e058      	b.n	8007b3c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d055      	beq.n	8007b3c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2204      	movs	r2, #4
 8007a94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007a98:	e050      	b.n	8007b3c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	3340      	adds	r3, #64	; 0x40
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f860 	bl	8007b66 <GetLineCoding>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d126      	bne.n	8007afe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ac2:	791b      	ldrb	r3, [r3, #4]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d13b      	bne.n	8007b40 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ad2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d133      	bne.n	8007b40 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ae2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d12b      	bne.n	8007b40 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007af0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d124      	bne.n	8007b40 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f958 	bl	8007dac <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007afc:	e020      	b.n	8007b40 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d01d      	beq.n	8007b40 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2204      	movs	r2, #4
 8007b08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007b0c:	e018      	b.n	8007b40 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f867 	bl	8007be2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f8da 	bl	8007cce <CDC_ProcessReception>
      break;
 8007b1a:	e014      	b.n	8007b46 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 ffe3 	bl	8008aea <USBH_ClrFeature>
 8007b24:	4603      	mov	r3, r0
 8007b26:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007b28:	7bbb      	ldrb	r3, [r7, #14]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10a      	bne.n	8007b44 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007b36:	e005      	b.n	8007b44 <USBH_CDC_Process+0x120>

    default:
      break;
 8007b38:	bf00      	nop
 8007b3a:	e004      	b.n	8007b46 <USBH_CDC_Process+0x122>
      break;
 8007b3c:	bf00      	nop
 8007b3e:	e002      	b.n	8007b46 <USBH_CDC_Process+0x122>
      break;
 8007b40:	bf00      	nop
 8007b42:	e000      	b.n	8007b46 <USBH_CDC_Process+0x122>
      break;
 8007b44:	bf00      	nop

  }

  return status;
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b082      	sub	sp, #8
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	22a1      	movs	r2, #161	; 0xa1
 8007b74:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2221      	movs	r2, #33	; 0x21
 8007b7a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2207      	movs	r2, #7
 8007b8c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2207      	movs	r2, #7
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f001 f988 	bl	8008eaa <USBH_CtlReq>
 8007b9a:	4603      	mov	r3, r0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2221      	movs	r2, #33	; 0x21
 8007bb2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2207      	movs	r2, #7
 8007bca:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	2207      	movs	r2, #7
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f001 f969 	bl	8008eaa <USBH_CtlReq>
 8007bd8:	4603      	mov	r3, r0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b086      	sub	sp, #24
 8007be6:	af02      	add	r7, sp, #8
 8007be8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d002      	beq.n	8007c08 <CDC_ProcessTransmission+0x26>
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d023      	beq.n	8007c4e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007c06:	e05e      	b.n	8007cc6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	8b12      	ldrh	r2, [r2, #24]
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d90b      	bls.n	8007c2c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	69d9      	ldr	r1, [r3, #28]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8b1a      	ldrh	r2, [r3, #24]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	7b5b      	ldrb	r3, [r3, #13]
 8007c20:	2001      	movs	r0, #1
 8007c22:	9000      	str	r0, [sp, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f001 fb4e 	bl	80092c6 <USBH_BulkSendData>
 8007c2a:	e00b      	b.n	8007c44 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	7b5b      	ldrb	r3, [r3, #13]
 8007c3a:	2001      	movs	r0, #1
 8007c3c:	9000      	str	r0, [sp, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f001 fb41 	bl	80092c6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2202      	movs	r2, #2
 8007c48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007c4c:	e03b      	b.n	8007cc6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	7b5b      	ldrb	r3, [r3, #13]
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f001 fe69 	bl	800992c <USBH_LL_GetURBState>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007c5e:	7afb      	ldrb	r3, [r7, #11]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d128      	bne.n	8007cb6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	8b12      	ldrh	r2, [r2, #24]
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d90e      	bls.n	8007c8e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	8b12      	ldrh	r2, [r2, #24]
 8007c78:	1a9a      	subs	r2, r3, r2
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	8b12      	ldrh	r2, [r2, #24]
 8007c86:	441a      	add	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	61da      	str	r2, [r3, #28]
 8007c8c:	e002      	b.n	8007c94 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d004      	beq.n	8007ca6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007ca4:	e00e      	b.n	8007cc4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f868 	bl	8007d84 <USBH_CDC_TransmitCallback>
      break;
 8007cb4:	e006      	b.n	8007cc4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007cb6:	7afb      	ldrb	r3, [r7, #11]
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d103      	bne.n	8007cc4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007cc4:	bf00      	nop
  }
}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b086      	sub	sp, #24
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	d002      	beq.n	8007cf4 <CDC_ProcessReception+0x26>
 8007cee:	2b04      	cmp	r3, #4
 8007cf0:	d00e      	beq.n	8007d10 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007cf2:	e043      	b.n	8007d7c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	6a19      	ldr	r1, [r3, #32]
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	8b5a      	ldrh	r2, [r3, #26]
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	7b1b      	ldrb	r3, [r3, #12]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f001 fb05 	bl	8009310 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	2204      	movs	r2, #4
 8007d0a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007d0e:	e035      	b.n	8007d7c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	7b1b      	ldrb	r3, [r3, #12]
 8007d14:	4619      	mov	r1, r3
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f001 fe08 	bl	800992c <USBH_LL_GetURBState>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007d20:	7cfb      	ldrb	r3, [r7, #19]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d129      	bne.n	8007d7a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	7b1b      	ldrb	r3, [r3, #12]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 fd6b 	bl	8009808 <USBH_LL_GetLastXferSize>
 8007d32:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d016      	beq.n	8007d6c <CDC_ProcessReception+0x9e>
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	8b5b      	ldrh	r3, [r3, #26]
 8007d42:	461a      	mov	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d910      	bls.n	8007d6c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	1ad2      	subs	r2, r2, r3
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	6a1a      	ldr	r2, [r3, #32]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	441a      	add	r2, r3
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	2203      	movs	r2, #3
 8007d66:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007d6a:	e006      	b.n	8007d7a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f80f 	bl	8007d98 <USBH_CDC_ReceiveCallback>
      break;
 8007d7a:	bf00      	nop
  }
}
 8007d7c:	bf00      	nop
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	e029      	b.n	8007e2c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	79fa      	ldrb	r2, [r7, #7]
 8007ddc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 f81f 	bl	8007e34 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f001 fc3b 	bl	80096a0 <USBH_LL_Init>

  return USBH_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007e40:	2300      	movs	r3, #0
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	e009      	b.n	8007e5a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	33e0      	adds	r3, #224	; 0xe0
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	2200      	movs	r2, #0
 8007e52:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	3301      	adds	r3, #1
 8007e58:	60fb      	str	r3, [r7, #12]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2b0e      	cmp	r3, #14
 8007e5e:	d9f2      	bls.n	8007e46 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007e60:	2300      	movs	r3, #0
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	e009      	b.n	8007e7a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e70:	2200      	movs	r2, #0
 8007e72:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	3301      	adds	r3, #1
 8007e78:	60fb      	str	r3, [r7, #12]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e80:	d3f1      	bcc.n	8007e66 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2201      	movs	r2, #1
 8007e92:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2240      	movs	r2, #64	; 0x40
 8007ea6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d016      	beq.n	8007f1e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10e      	bne.n	8007f18 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f00:	1c59      	adds	r1, r3, #1
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	33de      	adds	r3, #222	; 0xde
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	73fb      	strb	r3, [r7, #15]
 8007f16:	e004      	b.n	8007f22 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007f18:	2302      	movs	r3, #2
 8007f1a:	73fb      	strb	r3, [r7, #15]
 8007f1c:	e001      	b.n	8007f22 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007f1e:	2302      	movs	r3, #2
 8007f20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007f46:	78fa      	ldrb	r2, [r7, #3]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d204      	bcs.n	8007f56 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	78fa      	ldrb	r2, [r7, #3]
 8007f50:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007f54:	e001      	b.n	8007f5a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007f56:	2302      	movs	r3, #2
 8007f58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b087      	sub	sp, #28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	4608      	mov	r0, r1
 8007f72:	4611      	mov	r1, r2
 8007f74:	461a      	mov	r2, r3
 8007f76:	4603      	mov	r3, r0
 8007f78:	70fb      	strb	r3, [r7, #3]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	70bb      	strb	r3, [r7, #2]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f90:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007f92:	e025      	b.n	8007fe0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007f94:	7dfb      	ldrb	r3, [r7, #23]
 8007f96:	221a      	movs	r2, #26
 8007f98:	fb02 f303 	mul.w	r3, r2, r3
 8007f9c:	3308      	adds	r3, #8
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	3302      	adds	r3, #2
 8007fa4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	795b      	ldrb	r3, [r3, #5]
 8007faa:	78fa      	ldrb	r2, [r7, #3]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d002      	beq.n	8007fb6 <USBH_FindInterface+0x4e>
 8007fb0:	78fb      	ldrb	r3, [r7, #3]
 8007fb2:	2bff      	cmp	r3, #255	; 0xff
 8007fb4:	d111      	bne.n	8007fda <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007fba:	78ba      	ldrb	r2, [r7, #2]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d002      	beq.n	8007fc6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007fc0:	78bb      	ldrb	r3, [r7, #2]
 8007fc2:	2bff      	cmp	r3, #255	; 0xff
 8007fc4:	d109      	bne.n	8007fda <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007fca:	787a      	ldrb	r2, [r7, #1]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d002      	beq.n	8007fd6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007fd0:	787b      	ldrb	r3, [r7, #1]
 8007fd2:	2bff      	cmp	r3, #255	; 0xff
 8007fd4:	d101      	bne.n	8007fda <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007fd6:	7dfb      	ldrb	r3, [r7, #23]
 8007fd8:	e006      	b.n	8007fe8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007fda:	7dfb      	ldrb	r3, [r7, #23]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d9d6      	bls.n	8007f94 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007fe6:	23ff      	movs	r3, #255	; 0xff
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	371c      	adds	r7, #28
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f001 fb8b 	bl	8009718 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008002:	2101      	movs	r1, #1
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f001 fca4 	bl	8009952 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b088      	sub	sp, #32
 8008018:	af04      	add	r7, sp, #16
 800801a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800801c:	2302      	movs	r3, #2
 800801e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008020:	2300      	movs	r3, #0
 8008022:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b01      	cmp	r3, #1
 800802e:	d102      	bne.n	8008036 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2203      	movs	r2, #3
 8008034:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b0b      	cmp	r3, #11
 800803e:	f200 81b3 	bhi.w	80083a8 <USBH_Process+0x394>
 8008042:	a201      	add	r2, pc, #4	; (adr r2, 8008048 <USBH_Process+0x34>)
 8008044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008048:	08008079 	.word	0x08008079
 800804c:	080080ab 	.word	0x080080ab
 8008050:	08008113 	.word	0x08008113
 8008054:	08008343 	.word	0x08008343
 8008058:	080083a9 	.word	0x080083a9
 800805c:	080081b7 	.word	0x080081b7
 8008060:	080082e9 	.word	0x080082e9
 8008064:	080081ed 	.word	0x080081ed
 8008068:	0800820d 	.word	0x0800820d
 800806c:	0800822d 	.word	0x0800822d
 8008070:	0800825b 	.word	0x0800825b
 8008074:	0800832b 	.word	0x0800832b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 8193 	beq.w	80083ac <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800808c:	20c8      	movs	r0, #200	; 0xc8
 800808e:	f001 fca7 	bl	80099e0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f001 fb9d 	bl	80097d2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80080a8:	e180      	b.n	80083ac <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d107      	bne.n	80080c4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2202      	movs	r2, #2
 80080c0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80080c2:	e182      	b.n	80083ca <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80080ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080ce:	d914      	bls.n	80080fa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80080d6:	3301      	adds	r3, #1
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d903      	bls.n	80080f2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	220d      	movs	r2, #13
 80080ee:	701a      	strb	r2, [r3, #0]
      break;
 80080f0:	e16b      	b.n	80083ca <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	701a      	strb	r2, [r3, #0]
      break;
 80080f8:	e167      	b.n	80083ca <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008100:	f103 020a 	add.w	r2, r3, #10
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800810a:	200a      	movs	r0, #10
 800810c:	f001 fc68 	bl	80099e0 <USBH_Delay>
      break;
 8008110:	e15b      	b.n	80083ca <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008118:	2b00      	cmp	r3, #0
 800811a:	d005      	beq.n	8008128 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008122:	2104      	movs	r1, #4
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008128:	2064      	movs	r0, #100	; 0x64
 800812a:	f001 fc59 	bl	80099e0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f001 fb28 	bl	8009784 <USBH_LL_GetSpeed>
 8008134:	4603      	mov	r3, r0
 8008136:	461a      	mov	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2205      	movs	r2, #5
 8008142:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008144:	2100      	movs	r1, #0
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f001 f92f 	bl	80093aa <USBH_AllocPipe>
 800814c:	4603      	mov	r3, r0
 800814e:	461a      	mov	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008154:	2180      	movs	r1, #128	; 0x80
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f001 f927 	bl	80093aa <USBH_AllocPipe>
 800815c:	4603      	mov	r3, r0
 800815e:	461a      	mov	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	7919      	ldrb	r1, [r3, #4]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008178:	b292      	uxth	r2, r2
 800817a:	9202      	str	r2, [sp, #8]
 800817c:	2200      	movs	r2, #0
 800817e:	9201      	str	r2, [sp, #4]
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	4603      	mov	r3, r0
 8008184:	2280      	movs	r2, #128	; 0x80
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f001 f8e0 	bl	800934c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	7959      	ldrb	r1, [r3, #5]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80081a0:	b292      	uxth	r2, r2
 80081a2:	9202      	str	r2, [sp, #8]
 80081a4:	2200      	movs	r2, #0
 80081a6:	9201      	str	r2, [sp, #4]
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	4603      	mov	r3, r0
 80081ac:	2200      	movs	r2, #0
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f001 f8cc 	bl	800934c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80081b4:	e109      	b.n	80083ca <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f90c 	bl	80083d4 <USBH_HandleEnum>
 80081bc:	4603      	mov	r3, r0
 80081be:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f040 80f3 	bne.w	80083b0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d103      	bne.n	80081e4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2208      	movs	r2, #8
 80081e0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80081e2:	e0e5      	b.n	80083b0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2207      	movs	r2, #7
 80081e8:	701a      	strb	r2, [r3, #0]
      break;
 80081ea:	e0e1      	b.n	80083b0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 80de 	beq.w	80083b4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081fe:	2101      	movs	r1, #1
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2208      	movs	r2, #8
 8008208:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800820a:	e0d3      	b.n	80083b4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008212:	b29b      	uxth	r3, r3
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fc20 	bl	8008a5c <USBH_SetCfg>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	f040 80ca 	bne.w	80083b8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2209      	movs	r2, #9
 8008228:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800822a:	e0c5      	b.n	80083b8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008232:	f003 0320 	and.w	r3, r3, #32
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00b      	beq.n	8008252 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800823a:	2101      	movs	r1, #1
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fc30 	bl	8008aa2 <USBH_SetFeature>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	f040 80b9 	bne.w	80083bc <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	220a      	movs	r2, #10
 800824e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008250:	e0b4      	b.n	80083bc <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	220a      	movs	r2, #10
 8008256:	701a      	strb	r2, [r3, #0]
      break;
 8008258:	e0b0      	b.n	80083bc <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 80ad 	beq.w	80083c0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800826e:	2300      	movs	r3, #0
 8008270:	73fb      	strb	r3, [r7, #15]
 8008272:	e016      	b.n	80082a2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008274:	7bfa      	ldrb	r2, [r7, #15]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	32de      	adds	r2, #222	; 0xde
 800827a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800827e:	791a      	ldrb	r2, [r3, #4]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008286:	429a      	cmp	r2, r3
 8008288:	d108      	bne.n	800829c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800828a:	7bfa      	ldrb	r2, [r7, #15]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	32de      	adds	r2, #222	; 0xde
 8008290:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800829a:	e005      	b.n	80082a8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800829c:	7bfb      	ldrb	r3, [r7, #15]
 800829e:	3301      	adds	r3, #1
 80082a0:	73fb      	strb	r3, [r7, #15]
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d0e5      	beq.n	8008274 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d016      	beq.n	80082e0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	4798      	blx	r3
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d109      	bne.n	80082d8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2206      	movs	r2, #6
 80082c8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082d0:	2103      	movs	r1, #3
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80082d6:	e073      	b.n	80083c0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	220d      	movs	r2, #13
 80082dc:	701a      	strb	r2, [r3, #0]
      break;
 80082de:	e06f      	b.n	80083c0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	220d      	movs	r2, #13
 80082e4:	701a      	strb	r2, [r3, #0]
      break;
 80082e6:	e06b      	b.n	80083c0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d017      	beq.n	8008322 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	4798      	blx	r3
 80082fe:	4603      	mov	r3, r0
 8008300:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d103      	bne.n	8008312 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	220b      	movs	r2, #11
 800830e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008310:	e058      	b.n	80083c4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008312:	7bbb      	ldrb	r3, [r7, #14]
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b02      	cmp	r3, #2
 8008318:	d154      	bne.n	80083c4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	220d      	movs	r2, #13
 800831e:	701a      	strb	r2, [r3, #0]
      break;
 8008320:	e050      	b.n	80083c4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	220d      	movs	r2, #13
 8008326:	701a      	strb	r2, [r3, #0]
      break;
 8008328:	e04c      	b.n	80083c4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008330:	2b00      	cmp	r3, #0
 8008332:	d049      	beq.n	80083c8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800833a:	695b      	ldr	r3, [r3, #20]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	4798      	blx	r3
      }
      break;
 8008340:	e042      	b.n	80083c8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7ff fd72 	bl	8007e34 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008356:	2b00      	cmp	r3, #0
 8008358:	d009      	beq.n	800836e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008374:	2b00      	cmp	r3, #0
 8008376:	d005      	beq.n	8008384 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800837e:	2105      	movs	r1, #5
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b01      	cmp	r3, #1
 800838e:	d107      	bne.n	80083a0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f7ff fe2b 	bl	8007ff4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800839e:	e014      	b.n	80083ca <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f001 f9b9 	bl	8009718 <USBH_LL_Start>
      break;
 80083a6:	e010      	b.n	80083ca <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80083a8:	bf00      	nop
 80083aa:	e00e      	b.n	80083ca <USBH_Process+0x3b6>
      break;
 80083ac:	bf00      	nop
 80083ae:	e00c      	b.n	80083ca <USBH_Process+0x3b6>
      break;
 80083b0:	bf00      	nop
 80083b2:	e00a      	b.n	80083ca <USBH_Process+0x3b6>
    break;
 80083b4:	bf00      	nop
 80083b6:	e008      	b.n	80083ca <USBH_Process+0x3b6>
      break;
 80083b8:	bf00      	nop
 80083ba:	e006      	b.n	80083ca <USBH_Process+0x3b6>
      break;
 80083bc:	bf00      	nop
 80083be:	e004      	b.n	80083ca <USBH_Process+0x3b6>
      break;
 80083c0:	bf00      	nop
 80083c2:	e002      	b.n	80083ca <USBH_Process+0x3b6>
      break;
 80083c4:	bf00      	nop
 80083c6:	e000      	b.n	80083ca <USBH_Process+0x3b6>
      break;
 80083c8:	bf00      	nop
  }
  return USBH_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b088      	sub	sp, #32
 80083d8:	af04      	add	r7, sp, #16
 80083da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80083dc:	2301      	movs	r3, #1
 80083de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80083e0:	2301      	movs	r3, #1
 80083e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	785b      	ldrb	r3, [r3, #1]
 80083e8:	2b07      	cmp	r3, #7
 80083ea:	f200 81c1 	bhi.w	8008770 <USBH_HandleEnum+0x39c>
 80083ee:	a201      	add	r2, pc, #4	; (adr r2, 80083f4 <USBH_HandleEnum+0x20>)
 80083f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f4:	08008415 	.word	0x08008415
 80083f8:	080084d3 	.word	0x080084d3
 80083fc:	0800853d 	.word	0x0800853d
 8008400:	080085cb 	.word	0x080085cb
 8008404:	08008635 	.word	0x08008635
 8008408:	080086a5 	.word	0x080086a5
 800840c:	080086eb 	.word	0x080086eb
 8008410:	08008731 	.word	0x08008731
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008414:	2108      	movs	r1, #8
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fa50 	bl	80088bc <USBH_Get_DevDesc>
 800841c:	4603      	mov	r3, r0
 800841e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008420:	7bbb      	ldrb	r3, [r7, #14]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d130      	bne.n	8008488 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	7919      	ldrb	r1, [r3, #4]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800844a:	b292      	uxth	r2, r2
 800844c:	9202      	str	r2, [sp, #8]
 800844e:	2200      	movs	r2, #0
 8008450:	9201      	str	r2, [sp, #4]
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	4603      	mov	r3, r0
 8008456:	2280      	movs	r2, #128	; 0x80
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 ff77 	bl	800934c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	7959      	ldrb	r1, [r3, #5]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008472:	b292      	uxth	r2, r2
 8008474:	9202      	str	r2, [sp, #8]
 8008476:	2200      	movs	r2, #0
 8008478:	9201      	str	r2, [sp, #4]
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	4603      	mov	r3, r0
 800847e:	2200      	movs	r2, #0
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 ff63 	bl	800934c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008486:	e175      	b.n	8008774 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	2b03      	cmp	r3, #3
 800848c:	f040 8172 	bne.w	8008774 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008496:	3301      	adds	r3, #1
 8008498:	b2da      	uxtb	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084a6:	2b03      	cmp	r3, #3
 80084a8:	d903      	bls.n	80084b2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	220d      	movs	r2, #13
 80084ae:	701a      	strb	r2, [r3, #0]
      break;
 80084b0:	e160      	b.n	8008774 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	795b      	ldrb	r3, [r3, #5]
 80084b6:	4619      	mov	r1, r3
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 ff97 	bl	80093ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	791b      	ldrb	r3, [r3, #4]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 ff91 	bl	80093ec <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	701a      	strb	r2, [r3, #0]
      break;
 80084d0:	e150      	b.n	8008774 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80084d2:	2112      	movs	r1, #18
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f9f1 	bl	80088bc <USBH_Get_DevDesc>
 80084da:	4603      	mov	r3, r0
 80084dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084de:	7bbb      	ldrb	r3, [r7, #14]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d103      	bne.n	80084ec <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80084ea:	e145      	b.n	8008778 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	f040 8142 	bne.w	8008778 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084fa:	3301      	adds	r3, #1
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800850a:	2b03      	cmp	r3, #3
 800850c:	d903      	bls.n	8008516 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	220d      	movs	r2, #13
 8008512:	701a      	strb	r2, [r3, #0]
      break;
 8008514:	e130      	b.n	8008778 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	795b      	ldrb	r3, [r3, #5]
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 ff65 	bl	80093ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	791b      	ldrb	r3, [r3, #4]
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 ff5f 	bl	80093ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	701a      	strb	r2, [r3, #0]
      break;
 800853a:	e11d      	b.n	8008778 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800853c:	2101      	movs	r1, #1
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fa68 	bl	8008a14 <USBH_SetAddress>
 8008544:	4603      	mov	r3, r0
 8008546:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008548:	7bbb      	ldrb	r3, [r7, #14]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d132      	bne.n	80085b4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800854e:	2002      	movs	r0, #2
 8008550:	f001 fa46 	bl	80099e0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2203      	movs	r2, #3
 8008560:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	7919      	ldrb	r1, [r3, #4]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008576:	b292      	uxth	r2, r2
 8008578:	9202      	str	r2, [sp, #8]
 800857a:	2200      	movs	r2, #0
 800857c:	9201      	str	r2, [sp, #4]
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	4603      	mov	r3, r0
 8008582:	2280      	movs	r2, #128	; 0x80
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fee1 	bl	800934c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	7959      	ldrb	r1, [r3, #5]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800859e:	b292      	uxth	r2, r2
 80085a0:	9202      	str	r2, [sp, #8]
 80085a2:	2200      	movs	r2, #0
 80085a4:	9201      	str	r2, [sp, #4]
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	4603      	mov	r3, r0
 80085aa:	2200      	movs	r2, #0
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fecd 	bl	800934c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80085b2:	e0e3      	b.n	800877c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	f040 80e0 	bne.w	800877c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	220d      	movs	r2, #13
 80085c0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	705a      	strb	r2, [r3, #1]
      break;
 80085c8:	e0d8      	b.n	800877c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80085ca:	2109      	movs	r1, #9
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f99d 	bl	800890c <USBH_Get_CfgDesc>
 80085d2:	4603      	mov	r3, r0
 80085d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085d6:	7bbb      	ldrb	r3, [r7, #14]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d103      	bne.n	80085e4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2204      	movs	r2, #4
 80085e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80085e2:	e0cd      	b.n	8008780 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085e4:	7bbb      	ldrb	r3, [r7, #14]
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	f040 80ca 	bne.w	8008780 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085f2:	3301      	adds	r3, #1
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008602:	2b03      	cmp	r3, #3
 8008604:	d903      	bls.n	800860e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	220d      	movs	r2, #13
 800860a:	701a      	strb	r2, [r3, #0]
      break;
 800860c:	e0b8      	b.n	8008780 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	795b      	ldrb	r3, [r3, #5]
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fee9 	bl	80093ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	791b      	ldrb	r3, [r3, #4]
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fee3 	bl	80093ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	701a      	strb	r2, [r3, #0]
      break;
 8008632:	e0a5      	b.n	8008780 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800863a:	4619      	mov	r1, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f965 	bl	800890c <USBH_Get_CfgDesc>
 8008642:	4603      	mov	r3, r0
 8008644:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008646:	7bbb      	ldrb	r3, [r7, #14]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d103      	bne.n	8008654 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2205      	movs	r2, #5
 8008650:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008652:	e097      	b.n	8008784 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	2b03      	cmp	r3, #3
 8008658:	f040 8094 	bne.w	8008784 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008662:	3301      	adds	r3, #1
 8008664:	b2da      	uxtb	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008672:	2b03      	cmp	r3, #3
 8008674:	d903      	bls.n	800867e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	220d      	movs	r2, #13
 800867a:	701a      	strb	r2, [r3, #0]
      break;
 800867c:	e082      	b.n	8008784 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	795b      	ldrb	r3, [r3, #5]
 8008682:	4619      	mov	r1, r3
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 feb1 	bl	80093ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	791b      	ldrb	r3, [r3, #4]
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 feab 	bl	80093ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	701a      	strb	r2, [r3, #0]
      break;
 80086a2:	e06f      	b.n	8008784 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d019      	beq.n	80086e2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80086ba:	23ff      	movs	r3, #255	; 0xff
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f949 	bl	8008954 <USBH_Get_StringDesc>
 80086c2:	4603      	mov	r3, r0
 80086c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d103      	bne.n	80086d4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2206      	movs	r2, #6
 80086d0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80086d2:	e059      	b.n	8008788 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	2b03      	cmp	r3, #3
 80086d8:	d156      	bne.n	8008788 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2206      	movs	r2, #6
 80086de:	705a      	strb	r2, [r3, #1]
      break;
 80086e0:	e052      	b.n	8008788 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2206      	movs	r2, #6
 80086e6:	705a      	strb	r2, [r3, #1]
      break;
 80086e8:	e04e      	b.n	8008788 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d019      	beq.n	8008728 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008700:	23ff      	movs	r3, #255	; 0xff
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f926 	bl	8008954 <USBH_Get_StringDesc>
 8008708:	4603      	mov	r3, r0
 800870a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d103      	bne.n	800871a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2207      	movs	r2, #7
 8008716:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008718:	e038      	b.n	800878c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800871a:	7bbb      	ldrb	r3, [r7, #14]
 800871c:	2b03      	cmp	r3, #3
 800871e:	d135      	bne.n	800878c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2207      	movs	r2, #7
 8008724:	705a      	strb	r2, [r3, #1]
      break;
 8008726:	e031      	b.n	800878c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2207      	movs	r2, #7
 800872c:	705a      	strb	r2, [r3, #1]
      break;
 800872e:	e02d      	b.n	800878c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008736:	2b00      	cmp	r3, #0
 8008738:	d017      	beq.n	800876a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008746:	23ff      	movs	r3, #255	; 0xff
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f903 	bl	8008954 <USBH_Get_StringDesc>
 800874e:	4603      	mov	r3, r0
 8008750:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008752:	7bbb      	ldrb	r3, [r7, #14]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d102      	bne.n	800875e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008758:	2300      	movs	r3, #0
 800875a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800875c:	e018      	b.n	8008790 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800875e:	7bbb      	ldrb	r3, [r7, #14]
 8008760:	2b03      	cmp	r3, #3
 8008762:	d115      	bne.n	8008790 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	73fb      	strb	r3, [r7, #15]
      break;
 8008768:	e012      	b.n	8008790 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	73fb      	strb	r3, [r7, #15]
      break;
 800876e:	e00f      	b.n	8008790 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008770:	bf00      	nop
 8008772:	e00e      	b.n	8008792 <USBH_HandleEnum+0x3be>
      break;
 8008774:	bf00      	nop
 8008776:	e00c      	b.n	8008792 <USBH_HandleEnum+0x3be>
      break;
 8008778:	bf00      	nop
 800877a:	e00a      	b.n	8008792 <USBH_HandleEnum+0x3be>
      break;
 800877c:	bf00      	nop
 800877e:	e008      	b.n	8008792 <USBH_HandleEnum+0x3be>
      break;
 8008780:	bf00      	nop
 8008782:	e006      	b.n	8008792 <USBH_HandleEnum+0x3be>
      break;
 8008784:	bf00      	nop
 8008786:	e004      	b.n	8008792 <USBH_HandleEnum+0x3be>
      break;
 8008788:	bf00      	nop
 800878a:	e002      	b.n	8008792 <USBH_HandleEnum+0x3be>
      break;
 800878c:	bf00      	nop
 800878e:	e000      	b.n	8008792 <USBH_HandleEnum+0x3be>
      break;
 8008790:	bf00      	nop
  }
  return Status;
 8008792:	7bfb      	ldrb	r3, [r7, #15]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	683a      	ldr	r2, [r7, #0]
 80087aa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80087ae:	bf00      	nop
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b082      	sub	sp, #8
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087c8:	1c5a      	adds	r2, r3, #1
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f804 	bl	80087de <USBH_HandleSof>
}
 80087d6:	bf00      	nop
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b082      	sub	sp, #8
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b0b      	cmp	r3, #11
 80087ee:	d10a      	bne.n	8008806 <USBH_HandleSof+0x28>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d005      	beq.n	8008806 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	4798      	blx	r3
  }
}
 8008806:	bf00      	nop
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800880e:	b480      	push	{r7}
 8008810:	b083      	sub	sp, #12
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2201      	movs	r2, #1
 800881a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800881e:	bf00      	nop
}
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800882a:	b480      	push	{r7}
 800882c:	b083      	sub	sp, #12
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800883a:	bf00      	nop
}
 800883c:	370c      	adds	r7, #12
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008846:	b480      	push	{r7}
 8008848:	b083      	sub	sp, #12
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2201      	movs	r2, #1
 8008852:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 ff5a 	bl	800974e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	791b      	ldrb	r3, [r3, #4]
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fda3 	bl	80093ec <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	795b      	ldrb	r3, [r3, #5]
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fd9d 	bl	80093ec <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af02      	add	r7, sp, #8
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	460b      	mov	r3, r1
 80088c6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80088ce:	78fb      	ldrb	r3, [r7, #3]
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	4613      	mov	r3, r2
 80088d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088da:	2100      	movs	r1, #0
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f864 	bl	80089aa <USBH_GetDescriptor>
 80088e2:	4603      	mov	r3, r0
 80088e4:	73fb      	strb	r3, [r7, #15]
 80088e6:	7bfb      	ldrb	r3, [r7, #15]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10a      	bne.n	8008902 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f203 3026 	addw	r0, r3, #806	; 0x326
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80088f8:	78fa      	ldrb	r2, [r7, #3]
 80088fa:	b292      	uxth	r2, r2
 80088fc:	4619      	mov	r1, r3
 80088fe:	f000 f918 	bl	8008b32 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008902:	7bfb      	ldrb	r3, [r7, #15]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af02      	add	r7, sp, #8
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	460b      	mov	r3, r1
 8008916:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	331c      	adds	r3, #28
 800891c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800891e:	887b      	ldrh	r3, [r7, #2]
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008928:	2100      	movs	r1, #0
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f83d 	bl	80089aa <USBH_GetDescriptor>
 8008930:	4603      	mov	r3, r0
 8008932:	72fb      	strb	r3, [r7, #11]
 8008934:	7afb      	ldrb	r3, [r7, #11]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d107      	bne.n	800894a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008940:	887a      	ldrh	r2, [r7, #2]
 8008942:	68f9      	ldr	r1, [r7, #12]
 8008944:	4618      	mov	r0, r3
 8008946:	f000 f964 	bl	8008c12 <USBH_ParseCfgDesc>
  }

  return status;
 800894a:	7afb      	ldrb	r3, [r7, #11]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b088      	sub	sp, #32
 8008958:	af02      	add	r7, sp, #8
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	607a      	str	r2, [r7, #4]
 800895e:	461a      	mov	r2, r3
 8008960:	460b      	mov	r3, r1
 8008962:	72fb      	strb	r3, [r7, #11]
 8008964:	4613      	mov	r3, r2
 8008966:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008968:	7afb      	ldrb	r3, [r7, #11]
 800896a:	b29b      	uxth	r3, r3
 800896c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008970:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008978:	893b      	ldrh	r3, [r7, #8]
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	460b      	mov	r3, r1
 800897e:	2100      	movs	r1, #0
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 f812 	bl	80089aa <USBH_GetDescriptor>
 8008986:	4603      	mov	r3, r0
 8008988:	75fb      	strb	r3, [r7, #23]
 800898a:	7dfb      	ldrb	r3, [r7, #23]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d107      	bne.n	80089a0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008996:	893a      	ldrh	r2, [r7, #8]
 8008998:	6879      	ldr	r1, [r7, #4]
 800899a:	4618      	mov	r0, r3
 800899c:	f000 fa37 	bl	8008e0e <USBH_ParseStringDesc>
  }

  return status;
 80089a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3718      	adds	r7, #24
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	60f8      	str	r0, [r7, #12]
 80089b2:	607b      	str	r3, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	72fb      	strb	r3, [r7, #11]
 80089b8:	4613      	mov	r3, r2
 80089ba:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	789b      	ldrb	r3, [r3, #2]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d11c      	bne.n	80089fe <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80089c4:	7afb      	ldrb	r3, [r7, #11]
 80089c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2206      	movs	r2, #6
 80089d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	893a      	ldrh	r2, [r7, #8]
 80089da:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80089dc:	893b      	ldrh	r3, [r7, #8]
 80089de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80089e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089e6:	d104      	bne.n	80089f2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f240 4209 	movw	r2, #1033	; 0x409
 80089ee:	829a      	strh	r2, [r3, #20]
 80089f0:	e002      	b.n	80089f8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2200      	movs	r2, #0
 80089f6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	8b3a      	ldrh	r2, [r7, #24]
 80089fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80089fe:	8b3b      	ldrh	r3, [r7, #24]
 8008a00:	461a      	mov	r2, r3
 8008a02:	6879      	ldr	r1, [r7, #4]
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 fa50 	bl	8008eaa <USBH_CtlReq>
 8008a0a:	4603      	mov	r3, r0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	789b      	ldrb	r3, [r3, #2]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d10f      	bne.n	8008a48 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2205      	movs	r2, #5
 8008a32:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008a34:	78fb      	ldrb	r3, [r7, #3]
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008a48:	2200      	movs	r2, #0
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fa2c 	bl	8008eaa <USBH_CtlReq>
 8008a52:	4603      	mov	r3, r0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	460b      	mov	r3, r1
 8008a66:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	789b      	ldrb	r3, [r3, #2]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d10e      	bne.n	8008a8e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2209      	movs	r2, #9
 8008a7a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	887a      	ldrh	r2, [r7, #2]
 8008a80:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008a8e:	2200      	movs	r2, #0
 8008a90:	2100      	movs	r1, #0
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fa09 	bl	8008eaa <USBH_CtlReq>
 8008a98:	4603      	mov	r3, r0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b082      	sub	sp, #8
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	460b      	mov	r3, r1
 8008aac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	789b      	ldrb	r3, [r3, #2]
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d10f      	bne.n	8008ad6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2203      	movs	r2, #3
 8008ac0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008ac2:	78fb      	ldrb	r3, [r7, #3]
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2100      	movs	r1, #0
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f9e5 	bl	8008eaa <USBH_CtlReq>
 8008ae0:	4603      	mov	r3, r0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b082      	sub	sp, #8
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	460b      	mov	r3, r1
 8008af4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	789b      	ldrb	r3, [r3, #2]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d10f      	bne.n	8008b1e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2202      	movs	r2, #2
 8008b02:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008b10:	78fb      	ldrb	r3, [r7, #3]
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008b1e:	2200      	movs	r2, #0
 8008b20:	2100      	movs	r1, #0
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f9c1 	bl	8008eaa <USBH_CtlReq>
 8008b28:	4603      	mov	r3, r0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b085      	sub	sp, #20
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	60f8      	str	r0, [r7, #12]
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	781a      	ldrb	r2, [r3, #0]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	785a      	ldrb	r2, [r3, #1]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	3302      	adds	r3, #2
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	3303      	adds	r3, #3
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	021b      	lsls	r3, r3, #8
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	4313      	orrs	r3, r2
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	791a      	ldrb	r2, [r3, #4]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	795a      	ldrb	r2, [r3, #5]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	799a      	ldrb	r2, [r3, #6]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	79da      	ldrb	r2, [r3, #7]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008b8c:	88fb      	ldrh	r3, [r7, #6]
 8008b8e:	2b08      	cmp	r3, #8
 8008b90:	d939      	bls.n	8008c06 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	3308      	adds	r3, #8
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	3309      	adds	r3, #9
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	021b      	lsls	r3, r3, #8
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	330a      	adds	r3, #10
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	330b      	adds	r3, #11
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	021b      	lsls	r3, r3, #8
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	330c      	adds	r3, #12
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	330d      	adds	r3, #13
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	021b      	lsls	r3, r3, #8
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	4313      	orrs	r3, r2
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	7b9a      	ldrb	r2, [r3, #14]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	7bda      	ldrb	r2, [r3, #15]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	7c1a      	ldrb	r2, [r3, #16]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	7c5a      	ldrb	r2, [r3, #17]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	745a      	strb	r2, [r3, #17]
  }
}
 8008c06:	bf00      	nop
 8008c08:	3714      	adds	r7, #20
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b08a      	sub	sp, #40	; 0x28
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	60f8      	str	r0, [r7, #12]
 8008c1a:	60b9      	str	r1, [r7, #8]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008c24:	2300      	movs	r3, #0
 8008c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	781a      	ldrb	r2, [r3, #0]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	785a      	ldrb	r2, [r3, #1]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	3302      	adds	r3, #2
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	3303      	adds	r3, #3
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	021b      	lsls	r3, r3, #8
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	791a      	ldrb	r2, [r3, #4]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	795a      	ldrb	r2, [r3, #5]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	799a      	ldrb	r2, [r3, #6]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	79da      	ldrb	r2, [r3, #7]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	7a1a      	ldrb	r2, [r3, #8]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008c88:	88fb      	ldrh	r3, [r7, #6]
 8008c8a:	2b09      	cmp	r3, #9
 8008c8c:	d95f      	bls.n	8008d4e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008c8e:	2309      	movs	r3, #9
 8008c90:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008c92:	2300      	movs	r3, #0
 8008c94:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008c96:	e051      	b.n	8008d3c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008c98:	f107 0316 	add.w	r3, r7, #22
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ca0:	f000 f8e8 	bl	8008e74 <USBH_GetNextDesc>
 8008ca4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca8:	785b      	ldrb	r3, [r3, #1]
 8008caa:	2b04      	cmp	r3, #4
 8008cac:	d146      	bne.n	8008d3c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008cae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008cb2:	221a      	movs	r2, #26
 8008cb4:	fb02 f303 	mul.w	r3, r2, r3
 8008cb8:	3308      	adds	r3, #8
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	3302      	adds	r3, #2
 8008cc0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008cc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cc4:	69f8      	ldr	r0, [r7, #28]
 8008cc6:	f000 f846 	bl	8008d56 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008cd4:	e022      	b.n	8008d1c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008cd6:	f107 0316 	add.w	r3, r7, #22
 8008cda:	4619      	mov	r1, r3
 8008cdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008cde:	f000 f8c9 	bl	8008e74 <USBH_GetNextDesc>
 8008ce2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce6:	785b      	ldrb	r3, [r3, #1]
 8008ce8:	2b05      	cmp	r3, #5
 8008cea:	d117      	bne.n	8008d1c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008cec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008cf0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008cf4:	3201      	adds	r2, #1
 8008cf6:	00d2      	lsls	r2, r2, #3
 8008cf8:	211a      	movs	r1, #26
 8008cfa:	fb01 f303 	mul.w	r3, r1, r3
 8008cfe:	4413      	add	r3, r2
 8008d00:	3308      	adds	r3, #8
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	4413      	add	r3, r2
 8008d06:	3304      	adds	r3, #4
 8008d08:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008d0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d0c:	69b8      	ldr	r0, [r7, #24]
 8008d0e:	f000 f851 	bl	8008db4 <USBH_ParseEPDesc>
            ep_ix++;
 8008d12:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008d16:	3301      	adds	r3, #1
 8008d18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	791b      	ldrb	r3, [r3, #4]
 8008d20:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d204      	bcs.n	8008d32 <USBH_ParseCfgDesc+0x120>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	885a      	ldrh	r2, [r3, #2]
 8008d2c:	8afb      	ldrh	r3, [r7, #22]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d8d1      	bhi.n	8008cd6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008d32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d36:	3301      	adds	r3, #1
 8008d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008d3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d804      	bhi.n	8008d4e <USBH_ParseCfgDesc+0x13c>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	885a      	ldrh	r2, [r3, #2]
 8008d48:	8afb      	ldrh	r3, [r7, #22]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d8a4      	bhi.n	8008c98 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008d4e:	bf00      	nop
 8008d50:	3728      	adds	r7, #40	; 0x28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b083      	sub	sp, #12
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	781a      	ldrb	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	785a      	ldrb	r2, [r3, #1]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	789a      	ldrb	r2, [r3, #2]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	78da      	ldrb	r2, [r3, #3]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	791a      	ldrb	r2, [r3, #4]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	795a      	ldrb	r2, [r3, #5]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	799a      	ldrb	r2, [r3, #6]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	79da      	ldrb	r2, [r3, #7]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	7a1a      	ldrb	r2, [r3, #8]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	721a      	strb	r2, [r3, #8]
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	781a      	ldrb	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	785a      	ldrb	r2, [r3, #1]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	789a      	ldrb	r2, [r3, #2]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	78da      	ldrb	r2, [r3, #3]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	3304      	adds	r3, #4
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	b29a      	uxth	r2, r3
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	3305      	adds	r3, #5
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	021b      	lsls	r3, r3, #8
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	4313      	orrs	r3, r2
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	799a      	ldrb	r2, [r3, #6]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	719a      	strb	r2, [r3, #6]
}
 8008e02:	bf00      	nop
 8008e04:	370c      	adds	r7, #12
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b087      	sub	sp, #28
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	60f8      	str	r0, [r7, #12]
 8008e16:	60b9      	str	r1, [r7, #8]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	2b03      	cmp	r3, #3
 8008e24:	d120      	bne.n	8008e68 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	1e9a      	subs	r2, r3, #2
 8008e2c:	88fb      	ldrh	r3, [r7, #6]
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	bf28      	it	cs
 8008e32:	4613      	movcs	r3, r2
 8008e34:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	3302      	adds	r3, #2
 8008e3a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	82fb      	strh	r3, [r7, #22]
 8008e40:	e00b      	b.n	8008e5a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008e42:	8afb      	ldrh	r3, [r7, #22]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	4413      	add	r3, r2
 8008e48:	781a      	ldrb	r2, [r3, #0]
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	3301      	adds	r3, #1
 8008e52:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008e54:	8afb      	ldrh	r3, [r7, #22]
 8008e56:	3302      	adds	r3, #2
 8008e58:	82fb      	strh	r3, [r7, #22]
 8008e5a:	8afa      	ldrh	r2, [r7, #22]
 8008e5c:	8abb      	ldrh	r3, [r7, #20]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d3ef      	bcc.n	8008e42 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	2200      	movs	r2, #0
 8008e66:	701a      	strb	r2, [r3, #0]
  }
}
 8008e68:	bf00      	nop
 8008e6a:	371c      	adds	r7, #28
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	881a      	ldrh	r2, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	4413      	add	r3, r2
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4413      	add	r3, r2
 8008e9a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3714      	adds	r7, #20
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b086      	sub	sp, #24
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	60f8      	str	r0, [r7, #12]
 8008eb2:	60b9      	str	r1, [r7, #8]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	789b      	ldrb	r3, [r3, #2]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d002      	beq.n	8008eca <USBH_CtlReq+0x20>
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d00f      	beq.n	8008ee8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008ec8:	e027      	b.n	8008f1a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	88fa      	ldrh	r2, [r7, #6]
 8008ed4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2202      	movs	r2, #2
 8008ee0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ee6:	e018      	b.n	8008f1a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f000 f81b 	bl	8008f24 <USBH_HandleControl>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008ef2:	7dfb      	ldrb	r3, [r7, #23]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d002      	beq.n	8008efe <USBH_CtlReq+0x54>
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
 8008efa:	2b03      	cmp	r3, #3
 8008efc:	d106      	bne.n	8008f0c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2201      	movs	r2, #1
 8008f02:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	761a      	strb	r2, [r3, #24]
      break;
 8008f0a:	e005      	b.n	8008f18 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008f0c:	7dfb      	ldrb	r3, [r7, #23]
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d102      	bne.n	8008f18 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2201      	movs	r2, #1
 8008f16:	709a      	strb	r2, [r3, #2]
      break;
 8008f18:	bf00      	nop
  }
  return status;
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3718      	adds	r7, #24
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af02      	add	r7, sp, #8
 8008f2a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008f30:	2300      	movs	r3, #0
 8008f32:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	7e1b      	ldrb	r3, [r3, #24]
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	2b0a      	cmp	r3, #10
 8008f3c:	f200 8156 	bhi.w	80091ec <USBH_HandleControl+0x2c8>
 8008f40:	a201      	add	r2, pc, #4	; (adr r2, 8008f48 <USBH_HandleControl+0x24>)
 8008f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f46:	bf00      	nop
 8008f48:	08008f75 	.word	0x08008f75
 8008f4c:	08008f8f 	.word	0x08008f8f
 8008f50:	08008ff9 	.word	0x08008ff9
 8008f54:	0800901f 	.word	0x0800901f
 8008f58:	08009057 	.word	0x08009057
 8008f5c:	08009081 	.word	0x08009081
 8008f60:	080090d3 	.word	0x080090d3
 8008f64:	080090f5 	.word	0x080090f5
 8008f68:	08009131 	.word	0x08009131
 8008f6c:	08009157 	.word	0x08009157
 8008f70:	08009195 	.word	0x08009195
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f103 0110 	add.w	r1, r3, #16
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	795b      	ldrb	r3, [r3, #5]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f943 	bl	800920c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2202      	movs	r2, #2
 8008f8a:	761a      	strb	r2, [r3, #24]
      break;
 8008f8c:	e139      	b.n	8009202 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	795b      	ldrb	r3, [r3, #5]
 8008f92:	4619      	mov	r1, r3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fcc9 	bl	800992c <USBH_LL_GetURBState>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f9e:	7bbb      	ldrb	r3, [r7, #14]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d11e      	bne.n	8008fe2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	7c1b      	ldrb	r3, [r3, #16]
 8008fa8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008fac:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	8adb      	ldrh	r3, [r3, #22]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00a      	beq.n	8008fcc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008fb6:	7b7b      	ldrb	r3, [r7, #13]
 8008fb8:	2b80      	cmp	r3, #128	; 0x80
 8008fba:	d103      	bne.n	8008fc4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2203      	movs	r2, #3
 8008fc0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008fc2:	e115      	b.n	80091f0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2205      	movs	r2, #5
 8008fc8:	761a      	strb	r2, [r3, #24]
      break;
 8008fca:	e111      	b.n	80091f0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008fcc:	7b7b      	ldrb	r3, [r7, #13]
 8008fce:	2b80      	cmp	r3, #128	; 0x80
 8008fd0:	d103      	bne.n	8008fda <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2209      	movs	r2, #9
 8008fd6:	761a      	strb	r2, [r3, #24]
      break;
 8008fd8:	e10a      	b.n	80091f0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2207      	movs	r2, #7
 8008fde:	761a      	strb	r2, [r3, #24]
      break;
 8008fe0:	e106      	b.n	80091f0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	2b04      	cmp	r3, #4
 8008fe6:	d003      	beq.n	8008ff0 <USBH_HandleControl+0xcc>
 8008fe8:	7bbb      	ldrb	r3, [r7, #14]
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	f040 8100 	bne.w	80091f0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	220b      	movs	r2, #11
 8008ff4:	761a      	strb	r2, [r3, #24]
      break;
 8008ff6:	e0fb      	b.n	80091f0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6899      	ldr	r1, [r3, #8]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	899a      	ldrh	r2, [r3, #12]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	791b      	ldrb	r3, [r3, #4]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f93a 	bl	800928a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2204      	movs	r2, #4
 800901a:	761a      	strb	r2, [r3, #24]
      break;
 800901c:	e0f1      	b.n	8009202 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	791b      	ldrb	r3, [r3, #4]
 8009022:	4619      	mov	r1, r3
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fc81 	bl	800992c <USBH_LL_GetURBState>
 800902a:	4603      	mov	r3, r0
 800902c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800902e:	7bbb      	ldrb	r3, [r7, #14]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d102      	bne.n	800903a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2209      	movs	r2, #9
 8009038:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800903a:	7bbb      	ldrb	r3, [r7, #14]
 800903c:	2b05      	cmp	r3, #5
 800903e:	d102      	bne.n	8009046 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009040:	2303      	movs	r3, #3
 8009042:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009044:	e0d6      	b.n	80091f4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009046:	7bbb      	ldrb	r3, [r7, #14]
 8009048:	2b04      	cmp	r3, #4
 800904a:	f040 80d3 	bne.w	80091f4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	220b      	movs	r2, #11
 8009052:	761a      	strb	r2, [r3, #24]
      break;
 8009054:	e0ce      	b.n	80091f4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6899      	ldr	r1, [r3, #8]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	899a      	ldrh	r2, [r3, #12]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	795b      	ldrb	r3, [r3, #5]
 8009062:	2001      	movs	r0, #1
 8009064:	9000      	str	r0, [sp, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f8ea 	bl	8009240 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009072:	b29a      	uxth	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2206      	movs	r2, #6
 800907c:	761a      	strb	r2, [r3, #24]
      break;
 800907e:	e0c0      	b.n	8009202 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	795b      	ldrb	r3, [r3, #5]
 8009084:	4619      	mov	r1, r3
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fc50 	bl	800992c <USBH_LL_GetURBState>
 800908c:	4603      	mov	r3, r0
 800908e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009090:	7bbb      	ldrb	r3, [r7, #14]
 8009092:	2b01      	cmp	r3, #1
 8009094:	d103      	bne.n	800909e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2207      	movs	r2, #7
 800909a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800909c:	e0ac      	b.n	80091f8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800909e:	7bbb      	ldrb	r3, [r7, #14]
 80090a0:	2b05      	cmp	r3, #5
 80090a2:	d105      	bne.n	80090b0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	220c      	movs	r2, #12
 80090a8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80090aa:	2303      	movs	r3, #3
 80090ac:	73fb      	strb	r3, [r7, #15]
      break;
 80090ae:	e0a3      	b.n	80091f8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80090b0:	7bbb      	ldrb	r3, [r7, #14]
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d103      	bne.n	80090be <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2205      	movs	r2, #5
 80090ba:	761a      	strb	r2, [r3, #24]
      break;
 80090bc:	e09c      	b.n	80091f8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80090be:	7bbb      	ldrb	r3, [r7, #14]
 80090c0:	2b04      	cmp	r3, #4
 80090c2:	f040 8099 	bne.w	80091f8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	220b      	movs	r2, #11
 80090ca:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80090cc:	2302      	movs	r3, #2
 80090ce:	73fb      	strb	r3, [r7, #15]
      break;
 80090d0:	e092      	b.n	80091f8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	791b      	ldrb	r3, [r3, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	2100      	movs	r1, #0
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f8d5 	bl	800928a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2208      	movs	r2, #8
 80090f0:	761a      	strb	r2, [r3, #24]

      break;
 80090f2:	e086      	b.n	8009202 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	791b      	ldrb	r3, [r3, #4]
 80090f8:	4619      	mov	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fc16 	bl	800992c <USBH_LL_GetURBState>
 8009100:	4603      	mov	r3, r0
 8009102:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009104:	7bbb      	ldrb	r3, [r7, #14]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d105      	bne.n	8009116 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	220d      	movs	r2, #13
 800910e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009110:	2300      	movs	r3, #0
 8009112:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009114:	e072      	b.n	80091fc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009116:	7bbb      	ldrb	r3, [r7, #14]
 8009118:	2b04      	cmp	r3, #4
 800911a:	d103      	bne.n	8009124 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	220b      	movs	r2, #11
 8009120:	761a      	strb	r2, [r3, #24]
      break;
 8009122:	e06b      	b.n	80091fc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009124:	7bbb      	ldrb	r3, [r7, #14]
 8009126:	2b05      	cmp	r3, #5
 8009128:	d168      	bne.n	80091fc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800912a:	2303      	movs	r3, #3
 800912c:	73fb      	strb	r3, [r7, #15]
      break;
 800912e:	e065      	b.n	80091fc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	795b      	ldrb	r3, [r3, #5]
 8009134:	2201      	movs	r2, #1
 8009136:	9200      	str	r2, [sp, #0]
 8009138:	2200      	movs	r2, #0
 800913a:	2100      	movs	r1, #0
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f87f 	bl	8009240 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009148:	b29a      	uxth	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	220a      	movs	r2, #10
 8009152:	761a      	strb	r2, [r3, #24]
      break;
 8009154:	e055      	b.n	8009202 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	795b      	ldrb	r3, [r3, #5]
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 fbe5 	bl	800992c <USBH_LL_GetURBState>
 8009162:	4603      	mov	r3, r0
 8009164:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009166:	7bbb      	ldrb	r3, [r7, #14]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d105      	bne.n	8009178 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	220d      	movs	r2, #13
 8009174:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009176:	e043      	b.n	8009200 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009178:	7bbb      	ldrb	r3, [r7, #14]
 800917a:	2b02      	cmp	r3, #2
 800917c:	d103      	bne.n	8009186 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2209      	movs	r2, #9
 8009182:	761a      	strb	r2, [r3, #24]
      break;
 8009184:	e03c      	b.n	8009200 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009186:	7bbb      	ldrb	r3, [r7, #14]
 8009188:	2b04      	cmp	r3, #4
 800918a:	d139      	bne.n	8009200 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	220b      	movs	r2, #11
 8009190:	761a      	strb	r2, [r3, #24]
      break;
 8009192:	e035      	b.n	8009200 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	7e5b      	ldrb	r3, [r3, #25]
 8009198:	3301      	adds	r3, #1
 800919a:	b2da      	uxtb	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	765a      	strb	r2, [r3, #25]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	7e5b      	ldrb	r3, [r3, #25]
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d806      	bhi.n	80091b6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2201      	movs	r2, #1
 80091b2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80091b4:	e025      	b.n	8009202 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80091bc:	2106      	movs	r1, #6
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	795b      	ldrb	r3, [r3, #5]
 80091cc:	4619      	mov	r1, r3
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f90c 	bl	80093ec <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	791b      	ldrb	r3, [r3, #4]
 80091d8:	4619      	mov	r1, r3
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f906 	bl	80093ec <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80091e6:	2302      	movs	r3, #2
 80091e8:	73fb      	strb	r3, [r7, #15]
      break;
 80091ea:	e00a      	b.n	8009202 <USBH_HandleControl+0x2de>

    default:
      break;
 80091ec:	bf00      	nop
 80091ee:	e008      	b.n	8009202 <USBH_HandleControl+0x2de>
      break;
 80091f0:	bf00      	nop
 80091f2:	e006      	b.n	8009202 <USBH_HandleControl+0x2de>
      break;
 80091f4:	bf00      	nop
 80091f6:	e004      	b.n	8009202 <USBH_HandleControl+0x2de>
      break;
 80091f8:	bf00      	nop
 80091fa:	e002      	b.n	8009202 <USBH_HandleControl+0x2de>
      break;
 80091fc:	bf00      	nop
 80091fe:	e000      	b.n	8009202 <USBH_HandleControl+0x2de>
      break;
 8009200:	bf00      	nop
  }

  return status;
 8009202:	7bfb      	ldrb	r3, [r7, #15]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b088      	sub	sp, #32
 8009210:	af04      	add	r7, sp, #16
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	4613      	mov	r3, r2
 8009218:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800921a:	79f9      	ldrb	r1, [r7, #7]
 800921c:	2300      	movs	r3, #0
 800921e:	9303      	str	r3, [sp, #12]
 8009220:	2308      	movs	r3, #8
 8009222:	9302      	str	r3, [sp, #8]
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	9301      	str	r3, [sp, #4]
 8009228:	2300      	movs	r3, #0
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	2300      	movs	r3, #0
 800922e:	2200      	movs	r2, #0
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 fb4a 	bl	80098ca <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b088      	sub	sp, #32
 8009244:	af04      	add	r7, sp, #16
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	4611      	mov	r1, r2
 800924c:	461a      	mov	r2, r3
 800924e:	460b      	mov	r3, r1
 8009250:	80fb      	strh	r3, [r7, #6]
 8009252:	4613      	mov	r3, r2
 8009254:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800925c:	2b00      	cmp	r3, #0
 800925e:	d001      	beq.n	8009264 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009260:	2300      	movs	r3, #0
 8009262:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009264:	7979      	ldrb	r1, [r7, #5]
 8009266:	7e3b      	ldrb	r3, [r7, #24]
 8009268:	9303      	str	r3, [sp, #12]
 800926a:	88fb      	ldrh	r3, [r7, #6]
 800926c:	9302      	str	r3, [sp, #8]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	9301      	str	r3, [sp, #4]
 8009272:	2301      	movs	r3, #1
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	2300      	movs	r3, #0
 8009278:	2200      	movs	r2, #0
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 fb25 	bl	80098ca <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b088      	sub	sp, #32
 800928e:	af04      	add	r7, sp, #16
 8009290:	60f8      	str	r0, [r7, #12]
 8009292:	60b9      	str	r1, [r7, #8]
 8009294:	4611      	mov	r1, r2
 8009296:	461a      	mov	r2, r3
 8009298:	460b      	mov	r3, r1
 800929a:	80fb      	strh	r3, [r7, #6]
 800929c:	4613      	mov	r3, r2
 800929e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80092a0:	7979      	ldrb	r1, [r7, #5]
 80092a2:	2300      	movs	r3, #0
 80092a4:	9303      	str	r3, [sp, #12]
 80092a6:	88fb      	ldrh	r3, [r7, #6]
 80092a8:	9302      	str	r3, [sp, #8]
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	9301      	str	r3, [sp, #4]
 80092ae:	2301      	movs	r3, #1
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	2300      	movs	r3, #0
 80092b4:	2201      	movs	r2, #1
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f000 fb07 	bl	80098ca <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80092bc:	2300      	movs	r3, #0

}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b088      	sub	sp, #32
 80092ca:	af04      	add	r7, sp, #16
 80092cc:	60f8      	str	r0, [r7, #12]
 80092ce:	60b9      	str	r1, [r7, #8]
 80092d0:	4611      	mov	r1, r2
 80092d2:	461a      	mov	r2, r3
 80092d4:	460b      	mov	r3, r1
 80092d6:	80fb      	strh	r3, [r7, #6]
 80092d8:	4613      	mov	r3, r2
 80092da:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80092e6:	2300      	movs	r3, #0
 80092e8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80092ea:	7979      	ldrb	r1, [r7, #5]
 80092ec:	7e3b      	ldrb	r3, [r7, #24]
 80092ee:	9303      	str	r3, [sp, #12]
 80092f0:	88fb      	ldrh	r3, [r7, #6]
 80092f2:	9302      	str	r3, [sp, #8]
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	9301      	str	r3, [sp, #4]
 80092f8:	2301      	movs	r3, #1
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	2302      	movs	r3, #2
 80092fe:	2200      	movs	r2, #0
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 fae2 	bl	80098ca <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b088      	sub	sp, #32
 8009314:	af04      	add	r7, sp, #16
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	4611      	mov	r1, r2
 800931c:	461a      	mov	r2, r3
 800931e:	460b      	mov	r3, r1
 8009320:	80fb      	strh	r3, [r7, #6]
 8009322:	4613      	mov	r3, r2
 8009324:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009326:	7979      	ldrb	r1, [r7, #5]
 8009328:	2300      	movs	r3, #0
 800932a:	9303      	str	r3, [sp, #12]
 800932c:	88fb      	ldrh	r3, [r7, #6]
 800932e:	9302      	str	r3, [sp, #8]
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	9301      	str	r3, [sp, #4]
 8009334:	2301      	movs	r3, #1
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	2302      	movs	r3, #2
 800933a:	2201      	movs	r2, #1
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f000 fac4 	bl	80098ca <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009342:	2300      	movs	r3, #0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b086      	sub	sp, #24
 8009350:	af04      	add	r7, sp, #16
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	4608      	mov	r0, r1
 8009356:	4611      	mov	r1, r2
 8009358:	461a      	mov	r2, r3
 800935a:	4603      	mov	r3, r0
 800935c:	70fb      	strb	r3, [r7, #3]
 800935e:	460b      	mov	r3, r1
 8009360:	70bb      	strb	r3, [r7, #2]
 8009362:	4613      	mov	r3, r2
 8009364:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009366:	7878      	ldrb	r0, [r7, #1]
 8009368:	78ba      	ldrb	r2, [r7, #2]
 800936a:	78f9      	ldrb	r1, [r7, #3]
 800936c:	8b3b      	ldrh	r3, [r7, #24]
 800936e:	9302      	str	r3, [sp, #8]
 8009370:	7d3b      	ldrb	r3, [r7, #20]
 8009372:	9301      	str	r3, [sp, #4]
 8009374:	7c3b      	ldrb	r3, [r7, #16]
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	4603      	mov	r3, r0
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fa57 	bl	800982e <USBH_LL_OpenPipe>

  return USBH_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b082      	sub	sp, #8
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	460b      	mov	r3, r1
 8009394:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009396:	78fb      	ldrb	r3, [r7, #3]
 8009398:	4619      	mov	r1, r3
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fa76 	bl	800988c <USBH_LL_ClosePipe>

  return USBH_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b084      	sub	sp, #16
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	460b      	mov	r3, r1
 80093b4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f836 	bl	8009428 <USBH_GetFreePipe>
 80093bc:	4603      	mov	r3, r0
 80093be:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80093c0:	89fb      	ldrh	r3, [r7, #14]
 80093c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d00a      	beq.n	80093e0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80093ca:	78fa      	ldrb	r2, [r7, #3]
 80093cc:	89fb      	ldrh	r3, [r7, #14]
 80093ce:	f003 030f 	and.w	r3, r3, #15
 80093d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093d6:	6879      	ldr	r1, [r7, #4]
 80093d8:	33e0      	adds	r3, #224	; 0xe0
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	440b      	add	r3, r1
 80093de:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80093e0:	89fb      	ldrh	r3, [r7, #14]
 80093e2:	b2db      	uxtb	r3, r3
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3710      	adds	r7, #16
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	460b      	mov	r3, r1
 80093f6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80093f8:	78fb      	ldrb	r3, [r7, #3]
 80093fa:	2b0a      	cmp	r3, #10
 80093fc:	d80d      	bhi.n	800941a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80093fe:	78fb      	ldrb	r3, [r7, #3]
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	33e0      	adds	r3, #224	; 0xe0
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	78fb      	ldrb	r3, [r7, #3]
 800940c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009410:	6879      	ldr	r1, [r7, #4]
 8009412:	33e0      	adds	r3, #224	; 0xe0
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	440b      	add	r3, r1
 8009418:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009430:	2300      	movs	r3, #0
 8009432:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009434:	2300      	movs	r3, #0
 8009436:	73fb      	strb	r3, [r7, #15]
 8009438:	e00f      	b.n	800945a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800943a:	7bfb      	ldrb	r3, [r7, #15]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	33e0      	adds	r3, #224	; 0xe0
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4413      	add	r3, r2
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800944a:	2b00      	cmp	r3, #0
 800944c:	d102      	bne.n	8009454 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800944e:	7bfb      	ldrb	r3, [r7, #15]
 8009450:	b29b      	uxth	r3, r3
 8009452:	e007      	b.n	8009464 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009454:	7bfb      	ldrb	r3, [r7, #15]
 8009456:	3301      	adds	r3, #1
 8009458:	73fb      	strb	r3, [r7, #15]
 800945a:	7bfb      	ldrb	r3, [r7, #15]
 800945c:	2b0a      	cmp	r3, #10
 800945e:	d9ec      	bls.n	800943a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009460:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009464:	4618      	mov	r0, r3
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009474:	2201      	movs	r2, #1
 8009476:	490e      	ldr	r1, [pc, #56]	; (80094b0 <MX_USB_HOST_Init+0x40>)
 8009478:	480e      	ldr	r0, [pc, #56]	; (80094b4 <MX_USB_HOST_Init+0x44>)
 800947a:	f7fe fca1 	bl	8007dc0 <USBH_Init>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d001      	beq.n	8009488 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009484:	f7f7 fc0c 	bl	8000ca0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009488:	490b      	ldr	r1, [pc, #44]	; (80094b8 <MX_USB_HOST_Init+0x48>)
 800948a:	480a      	ldr	r0, [pc, #40]	; (80094b4 <MX_USB_HOST_Init+0x44>)
 800948c:	f7fe fd26 	bl	8007edc <USBH_RegisterClass>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009496:	f7f7 fc03 	bl	8000ca0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800949a:	4806      	ldr	r0, [pc, #24]	; (80094b4 <MX_USB_HOST_Init+0x44>)
 800949c:	f7fe fdaa 	bl	8007ff4 <USBH_Start>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80094a6:	f7f7 fbfb 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80094aa:	bf00      	nop
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	080094d1 	.word	0x080094d1
 80094b4:	200003d0 	.word	0x200003d0
 80094b8:	2000000c 	.word	0x2000000c

080094bc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80094c0:	4802      	ldr	r0, [pc, #8]	; (80094cc <MX_USB_HOST_Process+0x10>)
 80094c2:	f7fe fda7 	bl	8008014 <USBH_Process>
}
 80094c6:	bf00      	nop
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	200003d0 	.word	0x200003d0

080094d0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	460b      	mov	r3, r1
 80094da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80094dc:	78fb      	ldrb	r3, [r7, #3]
 80094de:	3b01      	subs	r3, #1
 80094e0:	2b04      	cmp	r3, #4
 80094e2:	d819      	bhi.n	8009518 <USBH_UserProcess+0x48>
 80094e4:	a201      	add	r2, pc, #4	; (adr r2, 80094ec <USBH_UserProcess+0x1c>)
 80094e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ea:	bf00      	nop
 80094ec:	08009519 	.word	0x08009519
 80094f0:	08009509 	.word	0x08009509
 80094f4:	08009519 	.word	0x08009519
 80094f8:	08009511 	.word	0x08009511
 80094fc:	08009501 	.word	0x08009501
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009500:	4b09      	ldr	r3, [pc, #36]	; (8009528 <USBH_UserProcess+0x58>)
 8009502:	2203      	movs	r2, #3
 8009504:	701a      	strb	r2, [r3, #0]
  break;
 8009506:	e008      	b.n	800951a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009508:	4b07      	ldr	r3, [pc, #28]	; (8009528 <USBH_UserProcess+0x58>)
 800950a:	2202      	movs	r2, #2
 800950c:	701a      	strb	r2, [r3, #0]
  break;
 800950e:	e004      	b.n	800951a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009510:	4b05      	ldr	r3, [pc, #20]	; (8009528 <USBH_UserProcess+0x58>)
 8009512:	2201      	movs	r2, #1
 8009514:	701a      	strb	r2, [r3, #0]
  break;
 8009516:	e000      	b.n	800951a <USBH_UserProcess+0x4a>

  default:
  break;
 8009518:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800951a:	bf00      	nop
 800951c:	370c      	adds	r7, #12
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	200007a8 	.word	0x200007a8

0800952c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b08a      	sub	sp, #40	; 0x28
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009534:	f107 0314 	add.w	r3, r7, #20
 8009538:	2200      	movs	r2, #0
 800953a:	601a      	str	r2, [r3, #0]
 800953c:	605a      	str	r2, [r3, #4]
 800953e:	609a      	str	r2, [r3, #8]
 8009540:	60da      	str	r2, [r3, #12]
 8009542:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800954c:	d14e      	bne.n	80095ec <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800954e:	4b29      	ldr	r3, [pc, #164]	; (80095f4 <HAL_HCD_MspInit+0xc8>)
 8009550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009552:	4a28      	ldr	r2, [pc, #160]	; (80095f4 <HAL_HCD_MspInit+0xc8>)
 8009554:	f043 0301 	orr.w	r3, r3, #1
 8009558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800955a:	4b26      	ldr	r3, [pc, #152]	; (80095f4 <HAL_HCD_MspInit+0xc8>)
 800955c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	613b      	str	r3, [r7, #16]
 8009564:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009566:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800956a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800956c:	2302      	movs	r3, #2
 800956e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009570:	2300      	movs	r3, #0
 8009572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009574:	2303      	movs	r3, #3
 8009576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009578:	230a      	movs	r3, #10
 800957a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800957c:	f107 0314 	add.w	r3, r7, #20
 8009580:	4619      	mov	r1, r3
 8009582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009586:	f7f8 f8db 	bl	8001740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800958a:	4b1a      	ldr	r3, [pc, #104]	; (80095f4 <HAL_HCD_MspInit+0xc8>)
 800958c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800958e:	4a19      	ldr	r2, [pc, #100]	; (80095f4 <HAL_HCD_MspInit+0xc8>)
 8009590:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009596:	4b17      	ldr	r3, [pc, #92]	; (80095f4 <HAL_HCD_MspInit+0xc8>)
 8009598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800959a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800959e:	60fb      	str	r3, [r7, #12]
 80095a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80095a2:	4b14      	ldr	r3, [pc, #80]	; (80095f4 <HAL_HCD_MspInit+0xc8>)
 80095a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d114      	bne.n	80095d8 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095ae:	4b11      	ldr	r3, [pc, #68]	; (80095f4 <HAL_HCD_MspInit+0xc8>)
 80095b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b2:	4a10      	ldr	r2, [pc, #64]	; (80095f4 <HAL_HCD_MspInit+0xc8>)
 80095b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095b8:	6593      	str	r3, [r2, #88]	; 0x58
 80095ba:	4b0e      	ldr	r3, [pc, #56]	; (80095f4 <HAL_HCD_MspInit+0xc8>)
 80095bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095c2:	60bb      	str	r3, [r7, #8]
 80095c4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80095c6:	f7fa f891 	bl	80036ec <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80095ca:	4b0a      	ldr	r3, [pc, #40]	; (80095f4 <HAL_HCD_MspInit+0xc8>)
 80095cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ce:	4a09      	ldr	r2, [pc, #36]	; (80095f4 <HAL_HCD_MspInit+0xc8>)
 80095d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095d4:	6593      	str	r3, [r2, #88]	; 0x58
 80095d6:	e001      	b.n	80095dc <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80095d8:	f7fa f888 	bl	80036ec <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80095dc:	2200      	movs	r2, #0
 80095de:	2100      	movs	r1, #0
 80095e0:	2043      	movs	r0, #67	; 0x43
 80095e2:	f7f8 f876 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80095e6:	2043      	movs	r0, #67	; 0x43
 80095e8:	f7f8 f88f 	bl	800170a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80095ec:	bf00      	nop
 80095ee:	3728      	adds	r7, #40	; 0x28
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	40021000 	.word	0x40021000

080095f8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009606:	4618      	mov	r0, r3
 8009608:	f7ff f8d7 	bl	80087ba <USBH_LL_IncTimer>
}
 800960c:	bf00      	nop
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009622:	4618      	mov	r0, r3
 8009624:	f7ff f90f 	bl	8008846 <USBH_LL_Connect>
}
 8009628:	bf00      	nop
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800963e:	4618      	mov	r0, r3
 8009640:	f7ff f918 	bl	8008874 <USBH_LL_Disconnect>
}
 8009644:	bf00      	nop
 8009646:	3708      	adds	r7, #8
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	460b      	mov	r3, r1
 8009656:	70fb      	strb	r3, [r7, #3]
 8009658:	4613      	mov	r3, r2
 800965a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800965c:	bf00      	nop
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009676:	4618      	mov	r0, r3
 8009678:	f7ff f8c9 	bl	800880e <USBH_LL_PortEnabled>
}
 800967c:	bf00      	nop
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009692:	4618      	mov	r0, r3
 8009694:	f7ff f8c9 	bl	800882a <USBH_LL_PortDisabled>
}
 8009698:	bf00      	nop
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d12a      	bne.n	8009708 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80096b2:	4a18      	ldr	r2, [pc, #96]	; (8009714 <USBH_LL_Init+0x74>)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a15      	ldr	r2, [pc, #84]	; (8009714 <USBH_LL_Init+0x74>)
 80096be:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80096c2:	4b14      	ldr	r3, [pc, #80]	; (8009714 <USBH_LL_Init+0x74>)
 80096c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80096c8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80096ca:	4b12      	ldr	r3, [pc, #72]	; (8009714 <USBH_LL_Init+0x74>)
 80096cc:	2208      	movs	r2, #8
 80096ce:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80096d0:	4b10      	ldr	r3, [pc, #64]	; (8009714 <USBH_LL_Init+0x74>)
 80096d2:	2201      	movs	r2, #1
 80096d4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80096d6:	4b0f      	ldr	r3, [pc, #60]	; (8009714 <USBH_LL_Init+0x74>)
 80096d8:	2200      	movs	r2, #0
 80096da:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80096dc:	4b0d      	ldr	r3, [pc, #52]	; (8009714 <USBH_LL_Init+0x74>)
 80096de:	2202      	movs	r2, #2
 80096e0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80096e2:	4b0c      	ldr	r3, [pc, #48]	; (8009714 <USBH_LL_Init+0x74>)
 80096e4:	2200      	movs	r2, #0
 80096e6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80096e8:	480a      	ldr	r0, [pc, #40]	; (8009714 <USBH_LL_Init+0x74>)
 80096ea:	f7f8 fa05 	bl	8001af8 <HAL_HCD_Init>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d001      	beq.n	80096f8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80096f4:	f7f7 fad4 	bl	8000ca0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80096f8:	4806      	ldr	r0, [pc, #24]	; (8009714 <USBH_LL_Init+0x74>)
 80096fa:	f7f8 fde4 	bl	80022c6 <HAL_HCD_GetCurrentFrame>
 80096fe:	4603      	mov	r3, r0
 8009700:	4619      	mov	r1, r3
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7ff f84a 	bl	800879c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	200007ac 	.word	0x200007ac

08009718 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800972e:	4618      	mov	r0, r3
 8009730:	f7f8 fd53 	bl	80021da <HAL_HCD_Start>
 8009734:	4603      	mov	r3, r0
 8009736:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009738:	7bfb      	ldrb	r3, [r7, #15]
 800973a:	4618      	mov	r0, r3
 800973c:	f000 f95c 	bl	80099f8 <USBH_Get_USB_Status>
 8009740:	4603      	mov	r3, r0
 8009742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009744:	7bbb      	ldrb	r3, [r7, #14]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b084      	sub	sp, #16
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009764:	4618      	mov	r0, r3
 8009766:	f7f8 fd5b 	bl	8002220 <HAL_HCD_Stop>
 800976a:	4603      	mov	r3, r0
 800976c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800976e:	7bfb      	ldrb	r3, [r7, #15]
 8009770:	4618      	mov	r0, r3
 8009772:	f000 f941 	bl	80099f8 <USBH_Get_USB_Status>
 8009776:	4603      	mov	r3, r0
 8009778:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800977a:	7bbb      	ldrb	r3, [r7, #14]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800978c:	2301      	movs	r3, #1
 800978e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009796:	4618      	mov	r0, r3
 8009798:	f7f8 fda3 	bl	80022e2 <HAL_HCD_GetCurrentSpeed>
 800979c:	4603      	mov	r3, r0
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d00c      	beq.n	80097bc <USBH_LL_GetSpeed+0x38>
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d80d      	bhi.n	80097c2 <USBH_LL_GetSpeed+0x3e>
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d002      	beq.n	80097b0 <USBH_LL_GetSpeed+0x2c>
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d003      	beq.n	80097b6 <USBH_LL_GetSpeed+0x32>
 80097ae:	e008      	b.n	80097c2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80097b0:	2300      	movs	r3, #0
 80097b2:	73fb      	strb	r3, [r7, #15]
    break;
 80097b4:	e008      	b.n	80097c8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80097b6:	2301      	movs	r3, #1
 80097b8:	73fb      	strb	r3, [r7, #15]
    break;
 80097ba:	e005      	b.n	80097c8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80097bc:	2302      	movs	r3, #2
 80097be:	73fb      	strb	r3, [r7, #15]
    break;
 80097c0:	e002      	b.n	80097c8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80097c2:	2301      	movs	r3, #1
 80097c4:	73fb      	strb	r3, [r7, #15]
    break;
 80097c6:	bf00      	nop
  }
  return  speed;
 80097c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b084      	sub	sp, #16
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097da:	2300      	movs	r3, #0
 80097dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7f8 fd36 	bl	800225a <HAL_HCD_ResetPort>
 80097ee:	4603      	mov	r3, r0
 80097f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80097f2:	7bfb      	ldrb	r3, [r7, #15]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f000 f8ff 	bl	80099f8 <USBH_Get_USB_Status>
 80097fa:	4603      	mov	r3, r0
 80097fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	460b      	mov	r3, r1
 8009812:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800981a:	78fa      	ldrb	r2, [r7, #3]
 800981c:	4611      	mov	r1, r2
 800981e:	4618      	mov	r0, r3
 8009820:	f7f8 fd3d 	bl	800229e <HAL_HCD_HC_GetXferCount>
 8009824:	4603      	mov	r3, r0
}
 8009826:	4618      	mov	r0, r3
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800982e:	b590      	push	{r4, r7, lr}
 8009830:	b089      	sub	sp, #36	; 0x24
 8009832:	af04      	add	r7, sp, #16
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	4608      	mov	r0, r1
 8009838:	4611      	mov	r1, r2
 800983a:	461a      	mov	r2, r3
 800983c:	4603      	mov	r3, r0
 800983e:	70fb      	strb	r3, [r7, #3]
 8009840:	460b      	mov	r3, r1
 8009842:	70bb      	strb	r3, [r7, #2]
 8009844:	4613      	mov	r3, r2
 8009846:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009848:	2300      	movs	r3, #0
 800984a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009856:	787c      	ldrb	r4, [r7, #1]
 8009858:	78ba      	ldrb	r2, [r7, #2]
 800985a:	78f9      	ldrb	r1, [r7, #3]
 800985c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800985e:	9302      	str	r3, [sp, #8]
 8009860:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009864:	9301      	str	r3, [sp, #4]
 8009866:	f897 3020 	ldrb.w	r3, [r7, #32]
 800986a:	9300      	str	r3, [sp, #0]
 800986c:	4623      	mov	r3, r4
 800986e:	f7f8 f9a5 	bl	8001bbc <HAL_HCD_HC_Init>
 8009872:	4603      	mov	r3, r0
 8009874:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009876:	7bfb      	ldrb	r3, [r7, #15]
 8009878:	4618      	mov	r0, r3
 800987a:	f000 f8bd 	bl	80099f8 <USBH_Get_USB_Status>
 800987e:	4603      	mov	r3, r0
 8009880:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009882:	7bbb      	ldrb	r3, [r7, #14]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3714      	adds	r7, #20
 8009888:	46bd      	mov	sp, r7
 800988a:	bd90      	pop	{r4, r7, pc}

0800988c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	460b      	mov	r3, r1
 8009896:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800989c:	2300      	movs	r3, #0
 800989e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80098a6:	78fa      	ldrb	r2, [r7, #3]
 80098a8:	4611      	mov	r1, r2
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7f8 fa15 	bl	8001cda <HAL_HCD_HC_Halt>
 80098b0:	4603      	mov	r3, r0
 80098b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 f89e 	bl	80099f8 <USBH_Get_USB_Status>
 80098bc:	4603      	mov	r3, r0
 80098be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80098ca:	b590      	push	{r4, r7, lr}
 80098cc:	b089      	sub	sp, #36	; 0x24
 80098ce:	af04      	add	r7, sp, #16
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	4608      	mov	r0, r1
 80098d4:	4611      	mov	r1, r2
 80098d6:	461a      	mov	r2, r3
 80098d8:	4603      	mov	r3, r0
 80098da:	70fb      	strb	r3, [r7, #3]
 80098dc:	460b      	mov	r3, r1
 80098de:	70bb      	strb	r3, [r7, #2]
 80098e0:	4613      	mov	r3, r2
 80098e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098e8:	2300      	movs	r3, #0
 80098ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80098f2:	787c      	ldrb	r4, [r7, #1]
 80098f4:	78ba      	ldrb	r2, [r7, #2]
 80098f6:	78f9      	ldrb	r1, [r7, #3]
 80098f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80098fc:	9303      	str	r3, [sp, #12]
 80098fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009900:	9302      	str	r3, [sp, #8]
 8009902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009904:	9301      	str	r3, [sp, #4]
 8009906:	f897 3020 	ldrb.w	r3, [r7, #32]
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	4623      	mov	r3, r4
 800990e:	f7f8 fa07 	bl	8001d20 <HAL_HCD_HC_SubmitRequest>
 8009912:	4603      	mov	r3, r0
 8009914:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009916:	7bfb      	ldrb	r3, [r7, #15]
 8009918:	4618      	mov	r0, r3
 800991a:	f000 f86d 	bl	80099f8 <USBH_Get_USB_Status>
 800991e:	4603      	mov	r3, r0
 8009920:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009922:	7bbb      	ldrb	r3, [r7, #14]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	bd90      	pop	{r4, r7, pc}

0800992c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	460b      	mov	r3, r1
 8009936:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800993e:	78fa      	ldrb	r2, [r7, #3]
 8009940:	4611      	mov	r1, r2
 8009942:	4618      	mov	r0, r3
 8009944:	f7f8 fc97 	bl	8002276 <HAL_HCD_HC_GetURBState>
 8009948:	4603      	mov	r3, r0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3708      	adds	r7, #8
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b082      	sub	sp, #8
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	460b      	mov	r3, r1
 800995c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009964:	2b01      	cmp	r3, #1
 8009966:	d103      	bne.n	8009970 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009968:	78fb      	ldrb	r3, [r7, #3]
 800996a:	4618      	mov	r0, r3
 800996c:	f000 f870 	bl	8009a50 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009970:	20c8      	movs	r0, #200	; 0xc8
 8009972:	f7f7 fdaf 	bl	80014d4 <HAL_Delay>
  return USBH_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3708      	adds	r7, #8
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	460b      	mov	r3, r1
 800998a:	70fb      	strb	r3, [r7, #3]
 800998c:	4613      	mov	r3, r2
 800998e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009996:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009998:	78fb      	ldrb	r3, [r7, #3]
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	212c      	movs	r1, #44	; 0x2c
 800999e:	fb01 f303 	mul.w	r3, r1, r3
 80099a2:	4413      	add	r3, r2
 80099a4:	333b      	adds	r3, #59	; 0x3b
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d009      	beq.n	80099c0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80099ac:	78fb      	ldrb	r3, [r7, #3]
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	212c      	movs	r1, #44	; 0x2c
 80099b2:	fb01 f303 	mul.w	r3, r1, r3
 80099b6:	4413      	add	r3, r2
 80099b8:	3354      	adds	r3, #84	; 0x54
 80099ba:	78ba      	ldrb	r2, [r7, #2]
 80099bc:	701a      	strb	r2, [r3, #0]
 80099be:	e008      	b.n	80099d2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80099c0:	78fb      	ldrb	r3, [r7, #3]
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	212c      	movs	r1, #44	; 0x2c
 80099c6:	fb01 f303 	mul.w	r3, r1, r3
 80099ca:	4413      	add	r3, r2
 80099cc:	3355      	adds	r3, #85	; 0x55
 80099ce:	78ba      	ldrb	r2, [r7, #2]
 80099d0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3714      	adds	r7, #20
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f7f7 fd73 	bl	80014d4 <HAL_Delay>
}
 80099ee:	bf00      	nop
 80099f0:	3708      	adds	r7, #8
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
	...

080099f8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a06:	79fb      	ldrb	r3, [r7, #7]
 8009a08:	2b03      	cmp	r3, #3
 8009a0a:	d817      	bhi.n	8009a3c <USBH_Get_USB_Status+0x44>
 8009a0c:	a201      	add	r2, pc, #4	; (adr r2, 8009a14 <USBH_Get_USB_Status+0x1c>)
 8009a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a12:	bf00      	nop
 8009a14:	08009a25 	.word	0x08009a25
 8009a18:	08009a2b 	.word	0x08009a2b
 8009a1c:	08009a31 	.word	0x08009a31
 8009a20:	08009a37 	.word	0x08009a37
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	73fb      	strb	r3, [r7, #15]
    break;
 8009a28:	e00b      	b.n	8009a42 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009a2a:	2302      	movs	r3, #2
 8009a2c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a2e:	e008      	b.n	8009a42 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009a30:	2301      	movs	r3, #1
 8009a32:	73fb      	strb	r3, [r7, #15]
    break;
 8009a34:	e005      	b.n	8009a42 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009a36:	2302      	movs	r3, #2
 8009a38:	73fb      	strb	r3, [r7, #15]
    break;
 8009a3a:	e002      	b.n	8009a42 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a40:	bf00      	nop
  }
  return usb_status;
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3714      	adds	r7, #20
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	4603      	mov	r3, r0
 8009a58:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009a5a:	79fb      	ldrb	r3, [r7, #7]
 8009a5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009a5e:	79fb      	ldrb	r3, [r7, #7]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d102      	bne.n	8009a6a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009a64:	2300      	movs	r3, #0
 8009a66:	73fb      	strb	r3, [r7, #15]
 8009a68:	e001      	b.n	8009a6e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 8009a6e:	7bfb      	ldrb	r3, [r7, #15]
 8009a70:	461a      	mov	r2, r3
 8009a72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a76:	4803      	ldr	r0, [pc, #12]	; (8009a84 <MX_DriverVbusFS+0x34>)
 8009a78:	f7f8 f80c 	bl	8001a94 <HAL_GPIO_WritePin>
}
 8009a7c:	bf00      	nop
 8009a7e:	3710      	adds	r7, #16
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	48000800 	.word	0x48000800

08009a88 <__errno>:
 8009a88:	4b01      	ldr	r3, [pc, #4]	; (8009a90 <__errno+0x8>)
 8009a8a:	6818      	ldr	r0, [r3, #0]
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	2000002c 	.word	0x2000002c

08009a94 <__libc_init_array>:
 8009a94:	b570      	push	{r4, r5, r6, lr}
 8009a96:	4d0d      	ldr	r5, [pc, #52]	; (8009acc <__libc_init_array+0x38>)
 8009a98:	4c0d      	ldr	r4, [pc, #52]	; (8009ad0 <__libc_init_array+0x3c>)
 8009a9a:	1b64      	subs	r4, r4, r5
 8009a9c:	10a4      	asrs	r4, r4, #2
 8009a9e:	2600      	movs	r6, #0
 8009aa0:	42a6      	cmp	r6, r4
 8009aa2:	d109      	bne.n	8009ab8 <__libc_init_array+0x24>
 8009aa4:	4d0b      	ldr	r5, [pc, #44]	; (8009ad4 <__libc_init_array+0x40>)
 8009aa6:	4c0c      	ldr	r4, [pc, #48]	; (8009ad8 <__libc_init_array+0x44>)
 8009aa8:	f000 f92e 	bl	8009d08 <_init>
 8009aac:	1b64      	subs	r4, r4, r5
 8009aae:	10a4      	asrs	r4, r4, #2
 8009ab0:	2600      	movs	r6, #0
 8009ab2:	42a6      	cmp	r6, r4
 8009ab4:	d105      	bne.n	8009ac2 <__libc_init_array+0x2e>
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}
 8009ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009abc:	4798      	blx	r3
 8009abe:	3601      	adds	r6, #1
 8009ac0:	e7ee      	b.n	8009aa0 <__libc_init_array+0xc>
 8009ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ac6:	4798      	blx	r3
 8009ac8:	3601      	adds	r6, #1
 8009aca:	e7f2      	b.n	8009ab2 <__libc_init_array+0x1e>
 8009acc:	08009d74 	.word	0x08009d74
 8009ad0:	08009d74 	.word	0x08009d74
 8009ad4:	08009d74 	.word	0x08009d74
 8009ad8:	08009d78 	.word	0x08009d78

08009adc <malloc>:
 8009adc:	4b02      	ldr	r3, [pc, #8]	; (8009ae8 <malloc+0xc>)
 8009ade:	4601      	mov	r1, r0
 8009ae0:	6818      	ldr	r0, [r3, #0]
 8009ae2:	f000 b87f 	b.w	8009be4 <_malloc_r>
 8009ae6:	bf00      	nop
 8009ae8:	2000002c 	.word	0x2000002c

08009aec <free>:
 8009aec:	4b02      	ldr	r3, [pc, #8]	; (8009af8 <free+0xc>)
 8009aee:	4601      	mov	r1, r0
 8009af0:	6818      	ldr	r0, [r3, #0]
 8009af2:	f000 b80b 	b.w	8009b0c <_free_r>
 8009af6:	bf00      	nop
 8009af8:	2000002c 	.word	0x2000002c

08009afc <memset>:
 8009afc:	4402      	add	r2, r0
 8009afe:	4603      	mov	r3, r0
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d100      	bne.n	8009b06 <memset+0xa>
 8009b04:	4770      	bx	lr
 8009b06:	f803 1b01 	strb.w	r1, [r3], #1
 8009b0a:	e7f9      	b.n	8009b00 <memset+0x4>

08009b0c <_free_r>:
 8009b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b0e:	2900      	cmp	r1, #0
 8009b10:	d044      	beq.n	8009b9c <_free_r+0x90>
 8009b12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b16:	9001      	str	r0, [sp, #4]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f1a1 0404 	sub.w	r4, r1, #4
 8009b1e:	bfb8      	it	lt
 8009b20:	18e4      	addlt	r4, r4, r3
 8009b22:	f000 f8e3 	bl	8009cec <__malloc_lock>
 8009b26:	4a1e      	ldr	r2, [pc, #120]	; (8009ba0 <_free_r+0x94>)
 8009b28:	9801      	ldr	r0, [sp, #4]
 8009b2a:	6813      	ldr	r3, [r2, #0]
 8009b2c:	b933      	cbnz	r3, 8009b3c <_free_r+0x30>
 8009b2e:	6063      	str	r3, [r4, #4]
 8009b30:	6014      	str	r4, [r2, #0]
 8009b32:	b003      	add	sp, #12
 8009b34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b38:	f000 b8de 	b.w	8009cf8 <__malloc_unlock>
 8009b3c:	42a3      	cmp	r3, r4
 8009b3e:	d908      	bls.n	8009b52 <_free_r+0x46>
 8009b40:	6825      	ldr	r5, [r4, #0]
 8009b42:	1961      	adds	r1, r4, r5
 8009b44:	428b      	cmp	r3, r1
 8009b46:	bf01      	itttt	eq
 8009b48:	6819      	ldreq	r1, [r3, #0]
 8009b4a:	685b      	ldreq	r3, [r3, #4]
 8009b4c:	1949      	addeq	r1, r1, r5
 8009b4e:	6021      	streq	r1, [r4, #0]
 8009b50:	e7ed      	b.n	8009b2e <_free_r+0x22>
 8009b52:	461a      	mov	r2, r3
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	b10b      	cbz	r3, 8009b5c <_free_r+0x50>
 8009b58:	42a3      	cmp	r3, r4
 8009b5a:	d9fa      	bls.n	8009b52 <_free_r+0x46>
 8009b5c:	6811      	ldr	r1, [r2, #0]
 8009b5e:	1855      	adds	r5, r2, r1
 8009b60:	42a5      	cmp	r5, r4
 8009b62:	d10b      	bne.n	8009b7c <_free_r+0x70>
 8009b64:	6824      	ldr	r4, [r4, #0]
 8009b66:	4421      	add	r1, r4
 8009b68:	1854      	adds	r4, r2, r1
 8009b6a:	42a3      	cmp	r3, r4
 8009b6c:	6011      	str	r1, [r2, #0]
 8009b6e:	d1e0      	bne.n	8009b32 <_free_r+0x26>
 8009b70:	681c      	ldr	r4, [r3, #0]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	6053      	str	r3, [r2, #4]
 8009b76:	4421      	add	r1, r4
 8009b78:	6011      	str	r1, [r2, #0]
 8009b7a:	e7da      	b.n	8009b32 <_free_r+0x26>
 8009b7c:	d902      	bls.n	8009b84 <_free_r+0x78>
 8009b7e:	230c      	movs	r3, #12
 8009b80:	6003      	str	r3, [r0, #0]
 8009b82:	e7d6      	b.n	8009b32 <_free_r+0x26>
 8009b84:	6825      	ldr	r5, [r4, #0]
 8009b86:	1961      	adds	r1, r4, r5
 8009b88:	428b      	cmp	r3, r1
 8009b8a:	bf04      	itt	eq
 8009b8c:	6819      	ldreq	r1, [r3, #0]
 8009b8e:	685b      	ldreq	r3, [r3, #4]
 8009b90:	6063      	str	r3, [r4, #4]
 8009b92:	bf04      	itt	eq
 8009b94:	1949      	addeq	r1, r1, r5
 8009b96:	6021      	streq	r1, [r4, #0]
 8009b98:	6054      	str	r4, [r2, #4]
 8009b9a:	e7ca      	b.n	8009b32 <_free_r+0x26>
 8009b9c:	b003      	add	sp, #12
 8009b9e:	bd30      	pop	{r4, r5, pc}
 8009ba0:	20000ab0 	.word	0x20000ab0

08009ba4 <sbrk_aligned>:
 8009ba4:	b570      	push	{r4, r5, r6, lr}
 8009ba6:	4e0e      	ldr	r6, [pc, #56]	; (8009be0 <sbrk_aligned+0x3c>)
 8009ba8:	460c      	mov	r4, r1
 8009baa:	6831      	ldr	r1, [r6, #0]
 8009bac:	4605      	mov	r5, r0
 8009bae:	b911      	cbnz	r1, 8009bb6 <sbrk_aligned+0x12>
 8009bb0:	f000 f88c 	bl	8009ccc <_sbrk_r>
 8009bb4:	6030      	str	r0, [r6, #0]
 8009bb6:	4621      	mov	r1, r4
 8009bb8:	4628      	mov	r0, r5
 8009bba:	f000 f887 	bl	8009ccc <_sbrk_r>
 8009bbe:	1c43      	adds	r3, r0, #1
 8009bc0:	d00a      	beq.n	8009bd8 <sbrk_aligned+0x34>
 8009bc2:	1cc4      	adds	r4, r0, #3
 8009bc4:	f024 0403 	bic.w	r4, r4, #3
 8009bc8:	42a0      	cmp	r0, r4
 8009bca:	d007      	beq.n	8009bdc <sbrk_aligned+0x38>
 8009bcc:	1a21      	subs	r1, r4, r0
 8009bce:	4628      	mov	r0, r5
 8009bd0:	f000 f87c 	bl	8009ccc <_sbrk_r>
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	d101      	bne.n	8009bdc <sbrk_aligned+0x38>
 8009bd8:	f04f 34ff 	mov.w	r4, #4294967295
 8009bdc:	4620      	mov	r0, r4
 8009bde:	bd70      	pop	{r4, r5, r6, pc}
 8009be0:	20000ab4 	.word	0x20000ab4

08009be4 <_malloc_r>:
 8009be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009be8:	1ccd      	adds	r5, r1, #3
 8009bea:	f025 0503 	bic.w	r5, r5, #3
 8009bee:	3508      	adds	r5, #8
 8009bf0:	2d0c      	cmp	r5, #12
 8009bf2:	bf38      	it	cc
 8009bf4:	250c      	movcc	r5, #12
 8009bf6:	2d00      	cmp	r5, #0
 8009bf8:	4607      	mov	r7, r0
 8009bfa:	db01      	blt.n	8009c00 <_malloc_r+0x1c>
 8009bfc:	42a9      	cmp	r1, r5
 8009bfe:	d905      	bls.n	8009c0c <_malloc_r+0x28>
 8009c00:	230c      	movs	r3, #12
 8009c02:	603b      	str	r3, [r7, #0]
 8009c04:	2600      	movs	r6, #0
 8009c06:	4630      	mov	r0, r6
 8009c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c0c:	4e2e      	ldr	r6, [pc, #184]	; (8009cc8 <_malloc_r+0xe4>)
 8009c0e:	f000 f86d 	bl	8009cec <__malloc_lock>
 8009c12:	6833      	ldr	r3, [r6, #0]
 8009c14:	461c      	mov	r4, r3
 8009c16:	bb34      	cbnz	r4, 8009c66 <_malloc_r+0x82>
 8009c18:	4629      	mov	r1, r5
 8009c1a:	4638      	mov	r0, r7
 8009c1c:	f7ff ffc2 	bl	8009ba4 <sbrk_aligned>
 8009c20:	1c43      	adds	r3, r0, #1
 8009c22:	4604      	mov	r4, r0
 8009c24:	d14d      	bne.n	8009cc2 <_malloc_r+0xde>
 8009c26:	6834      	ldr	r4, [r6, #0]
 8009c28:	4626      	mov	r6, r4
 8009c2a:	2e00      	cmp	r6, #0
 8009c2c:	d140      	bne.n	8009cb0 <_malloc_r+0xcc>
 8009c2e:	6823      	ldr	r3, [r4, #0]
 8009c30:	4631      	mov	r1, r6
 8009c32:	4638      	mov	r0, r7
 8009c34:	eb04 0803 	add.w	r8, r4, r3
 8009c38:	f000 f848 	bl	8009ccc <_sbrk_r>
 8009c3c:	4580      	cmp	r8, r0
 8009c3e:	d13a      	bne.n	8009cb6 <_malloc_r+0xd2>
 8009c40:	6821      	ldr	r1, [r4, #0]
 8009c42:	3503      	adds	r5, #3
 8009c44:	1a6d      	subs	r5, r5, r1
 8009c46:	f025 0503 	bic.w	r5, r5, #3
 8009c4a:	3508      	adds	r5, #8
 8009c4c:	2d0c      	cmp	r5, #12
 8009c4e:	bf38      	it	cc
 8009c50:	250c      	movcc	r5, #12
 8009c52:	4629      	mov	r1, r5
 8009c54:	4638      	mov	r0, r7
 8009c56:	f7ff ffa5 	bl	8009ba4 <sbrk_aligned>
 8009c5a:	3001      	adds	r0, #1
 8009c5c:	d02b      	beq.n	8009cb6 <_malloc_r+0xd2>
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	442b      	add	r3, r5
 8009c62:	6023      	str	r3, [r4, #0]
 8009c64:	e00e      	b.n	8009c84 <_malloc_r+0xa0>
 8009c66:	6822      	ldr	r2, [r4, #0]
 8009c68:	1b52      	subs	r2, r2, r5
 8009c6a:	d41e      	bmi.n	8009caa <_malloc_r+0xc6>
 8009c6c:	2a0b      	cmp	r2, #11
 8009c6e:	d916      	bls.n	8009c9e <_malloc_r+0xba>
 8009c70:	1961      	adds	r1, r4, r5
 8009c72:	42a3      	cmp	r3, r4
 8009c74:	6025      	str	r5, [r4, #0]
 8009c76:	bf18      	it	ne
 8009c78:	6059      	strne	r1, [r3, #4]
 8009c7a:	6863      	ldr	r3, [r4, #4]
 8009c7c:	bf08      	it	eq
 8009c7e:	6031      	streq	r1, [r6, #0]
 8009c80:	5162      	str	r2, [r4, r5]
 8009c82:	604b      	str	r3, [r1, #4]
 8009c84:	4638      	mov	r0, r7
 8009c86:	f104 060b 	add.w	r6, r4, #11
 8009c8a:	f000 f835 	bl	8009cf8 <__malloc_unlock>
 8009c8e:	f026 0607 	bic.w	r6, r6, #7
 8009c92:	1d23      	adds	r3, r4, #4
 8009c94:	1af2      	subs	r2, r6, r3
 8009c96:	d0b6      	beq.n	8009c06 <_malloc_r+0x22>
 8009c98:	1b9b      	subs	r3, r3, r6
 8009c9a:	50a3      	str	r3, [r4, r2]
 8009c9c:	e7b3      	b.n	8009c06 <_malloc_r+0x22>
 8009c9e:	6862      	ldr	r2, [r4, #4]
 8009ca0:	42a3      	cmp	r3, r4
 8009ca2:	bf0c      	ite	eq
 8009ca4:	6032      	streq	r2, [r6, #0]
 8009ca6:	605a      	strne	r2, [r3, #4]
 8009ca8:	e7ec      	b.n	8009c84 <_malloc_r+0xa0>
 8009caa:	4623      	mov	r3, r4
 8009cac:	6864      	ldr	r4, [r4, #4]
 8009cae:	e7b2      	b.n	8009c16 <_malloc_r+0x32>
 8009cb0:	4634      	mov	r4, r6
 8009cb2:	6876      	ldr	r6, [r6, #4]
 8009cb4:	e7b9      	b.n	8009c2a <_malloc_r+0x46>
 8009cb6:	230c      	movs	r3, #12
 8009cb8:	603b      	str	r3, [r7, #0]
 8009cba:	4638      	mov	r0, r7
 8009cbc:	f000 f81c 	bl	8009cf8 <__malloc_unlock>
 8009cc0:	e7a1      	b.n	8009c06 <_malloc_r+0x22>
 8009cc2:	6025      	str	r5, [r4, #0]
 8009cc4:	e7de      	b.n	8009c84 <_malloc_r+0xa0>
 8009cc6:	bf00      	nop
 8009cc8:	20000ab0 	.word	0x20000ab0

08009ccc <_sbrk_r>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	4d06      	ldr	r5, [pc, #24]	; (8009ce8 <_sbrk_r+0x1c>)
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	4604      	mov	r4, r0
 8009cd4:	4608      	mov	r0, r1
 8009cd6:	602b      	str	r3, [r5, #0]
 8009cd8:	f7f7 fb0e 	bl	80012f8 <_sbrk>
 8009cdc:	1c43      	adds	r3, r0, #1
 8009cde:	d102      	bne.n	8009ce6 <_sbrk_r+0x1a>
 8009ce0:	682b      	ldr	r3, [r5, #0]
 8009ce2:	b103      	cbz	r3, 8009ce6 <_sbrk_r+0x1a>
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	bd38      	pop	{r3, r4, r5, pc}
 8009ce8:	20000ab8 	.word	0x20000ab8

08009cec <__malloc_lock>:
 8009cec:	4801      	ldr	r0, [pc, #4]	; (8009cf4 <__malloc_lock+0x8>)
 8009cee:	f000 b809 	b.w	8009d04 <__retarget_lock_acquire_recursive>
 8009cf2:	bf00      	nop
 8009cf4:	20000abc 	.word	0x20000abc

08009cf8 <__malloc_unlock>:
 8009cf8:	4801      	ldr	r0, [pc, #4]	; (8009d00 <__malloc_unlock+0x8>)
 8009cfa:	f000 b804 	b.w	8009d06 <__retarget_lock_release_recursive>
 8009cfe:	bf00      	nop
 8009d00:	20000abc 	.word	0x20000abc

08009d04 <__retarget_lock_acquire_recursive>:
 8009d04:	4770      	bx	lr

08009d06 <__retarget_lock_release_recursive>:
 8009d06:	4770      	bx	lr

08009d08 <_init>:
 8009d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0a:	bf00      	nop
 8009d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0e:	bc08      	pop	{r3}
 8009d10:	469e      	mov	lr, r3
 8009d12:	4770      	bx	lr

08009d14 <_fini>:
 8009d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d16:	bf00      	nop
 8009d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d1a:	bc08      	pop	{r3}
 8009d1c:	469e      	mov	lr, r3
 8009d1e:	4770      	bx	lr
